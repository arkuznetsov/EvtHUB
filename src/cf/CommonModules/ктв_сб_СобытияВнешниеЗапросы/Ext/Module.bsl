
////////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС ОБМЕНА СОБЫТИЯМИ С ВНЕШНИМИ ИБ ЧЕРЕЗ СЕРВИС EventHUB
//
#Область ИнтерфейсСобытияВнешнихИБ

// Функция - Передать событие во внешнюю ИБ
//
// Параметры:
// 	СтруктураНастроек						- Структура			- Структура настроек подключения к http-сервису, в т.ч.:
//		Сервис_ТипСервиса						- ПеречислениеСсылка.	- Тип сервиса SOAP/HTTP
//												  ктв_сб_ТипСервиса
//		Сервис_Сервер							- Строка			- Адрес сервера http-сервиса
//		Сервис_АдресРесурса						- Строка			- Адрес ресурса http/web-сервиса
//		Сервис_ПространствоИмен					- Строка			- Пространство имен web-сервиса
//		Сервис_ИмяСервиса						- Строка			- Имя web-сервиса
//		Сервис_ИмяТочкиПодключения				- Строка			- Имя точки подключения web-сервиса
//		Сервис_Пользователь						- Строка			- Имя пользователя сервиса
//		Сервис_Пароль							- Строка			- Пароль пользователя сервиса
//		УстановленноеСоединение                 - WebПрокси		    - Полученный ранее объект соединения с web-сервисом для повторного использования
//		УстановленноеСоединение_Использование	- Булево			- Флаг необходимости повторного использования объекта соединения с web-сервисом 
//  ОписаниеСобытия	 - Структура									  	- Структура описания события
//  ТекстОшибки		 - Строка										  	- ОписаниеОшибки
// 
// Возвращаемое значение:
//  Строка - Ответ сервиса передачи событий внешней ИБ
//
Функция ПередатьСобытиеВоВнешнююИБ(СтруктураНастроек, ОписаниеСобытия, ТекстОшибки = "") Экспорт
	
	ОписаниеСоединения = ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьСоединение(СтруктураНастроек);
	
	Если ОписаниеСоединения.Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОписаниеСоединения.Соединение;
	
	ДанныеОтвета = Неопределено;
	
	ТекстОшибки = "";
		
	Если ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.СОАП Тогда
		
		ВремСериализатор = Новый СериализаторXDTO(Соединение.ФабрикаXDTO);
		ОписаниеСобытия = ВремСериализатор.ЗаписатьXDTO(ОписаниеСобытия);
		
		РезультатОбработки = Соединение.EventRise(ОписаниеСобытия, ТекстОшибки);
		
	ИначеЕсли ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.ХТТП Тогда
		
		РезультатОбработки =
			ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьРезультатОбработкиХТТПСервиса(Соединение,
																						СтруктураНастроек.Сервис_АдресРесурса + "/Evt",
																						ОписаниеСобытия,
																						ДанныеОтвета,
																						ТекстОшибки);
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции //ПередатьСобытиеВоВнешнююИБ()

// Функция - Получает описания точек подключения, зарегистрированных во внешней ИБ
//
// Параметры:
// 	СтруктураНастроек						- Структура			- Структура настроек подключения к http-сервису, в т.ч.:
//		Сервис_ТипСервиса						- ПеречислениеСсылка.	- Тип сервиса SOAP/HTTP
//												  ктв_сб_ТипСервиса
//		Сервис_Сервер							- Строка			- Адрес сервера http-сервиса
//		Сервис_АдресРесурса						- Строка			- Адрес ресурса http/web-сервиса
//		Сервис_ПространствоИмен					- Строка			- Пространство имен web-сервиса
//		Сервис_ИмяСервиса						- Строка			- Имя web-сервиса
//		Сервис_ИмяТочкиПодключения				- Строка			- Имя точки подключения web-сервиса
//		Сервис_Пользователь						- Строка			- Имя пользователя сервиса
//		Сервис_Пароль							- Строка			- Пароль пользователя сервиса
//		УстановленноеСоединение                 - WebПрокси		    - Полученный ранее объект соединения с web-сервисом для повторного использования
//		УстановленноеСоединение_Использование	- Булево			- Флаг необходимости повторного использования объекта соединения с web-сервисом 
//  ТекстОшибки								 - 	Строка			- Описание возникшей ошибки
// 
// Возвращаемое значение:
//  Массив (Структура) - Массив описаний точек подключения
//
&НаСервере
Функция ПолучитьТочкиВозникновенияСобытий(СтруктураНастроек, ТекстОшибки = "") Экспорт
	
	ОписаниеСоединения = ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьСоединение(СтруктураНастроек);
	
	Если ОписаниеСоединения.Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОписаниеСоединения.Соединение;
	
	ДанныеОтвета = Неопределено;
	
	ТекстОшибки = "";
		
	Если ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.СОАП Тогда
		
		ВремСериализатор = Новый СериализаторXDTO(Соединение.ФабрикаXDTO);
		
		ДанныеОтветаВнеш = Соединение.GetEventPoints();
		
		ДанныеОтвета = ВремСериализатор.ПрочитатьXDTO(ДанныеОтветаВнеш);
		
	ИначеЕсли ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.ХТТП Тогда
		
		РезультатОбработки =
			ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьОтветХТТПСервиса(Соединение,
																		СтруктураНастроек.Сервис_АдресРесурса + "/EvtPnts",
																		ДанныеОтвета,
																		ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
		ТекстОшибки = "Некорректный тип ответа сервиса """ + СокрЛП(ТипЗнч(ДанныеОтвета)) + """, ожидается ""Массив""!";
		Возврат Неопределено;
	КонецЕсли;
	
	ОбязательныеПоля = Новый Структура("Ид, Наименование");
	//ОписаниеСобытия = Новый Структура("Ид, Наименование, Дата, Момент, Источник, Параметры");
	
	ОписаниеОшибок = "";
	
	Если ДанныеОтвета.Количество() = 0 Тогда
		ТекстОшибки = "Ответ сервиса не содержит описания точек возникновения событий!";
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеОтвета[0]) = Тип("Структура") Тогда
		ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", Символы.ПС) + "Описание точки имеет тип """ + СокрЛП(ТипЗнч(ДанныеОтвета[0])) + """, ожидается тип ""Структура""!";
	КонецЕсли;
	Для Каждого ТекПоле Из ОбязательныеПоля Цикл
		Если НЕ ДанныеОтвета[0].Свойство(ТекПоле.Ключ) Тогда
			ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", Символы.ПС) + "В описании точки отсутствует поле """ + ТекПоле.Ключ + """!";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОписаниеОшибок = "" Тогда
		ТекстОшибки = "В процессе обработки ответа сервиса возникли ошибки: " + Символы.ПС + ОписаниеОшибок;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции //ПолучитьТочкиВозникновенияСобытий()

// Функция - Получает идентификатор для текущей точки возникновения события от сервиса
//
// Параметры:
// 	СтруктураНастроек						- Структура			- Структура настроек подключения к http-сервису, в т.ч.:
//		Сервис_ТипСервиса						- ПеречислениеСсылка.	- Тип сервиса SOAP/HTTP
//												  ктв_сб_ТипСервиса
//		Сервис_Сервер							- Строка			- Адрес сервера http-сервиса
//		Сервис_АдресРесурса						- Строка			- Адрес ресурса http/web-сервиса
//		Сервис_ПространствоИмен					- Строка			- Пространство имен web-сервиса
//		Сервис_ИмяСервиса						- Строка			- Имя web-сервиса
//		Сервис_ИмяТочкиПодключения				- Строка			- Имя точки подключения web-сервиса
//		Сервис_Пользователь						- Строка			- Имя пользователя сервиса
//		Сервис_Пароль							- Строка			- Пароль пользователя сервиса
//		УстановленноеСоединение                 - WebПрокси		    - Полученный ранее объект соединения с web-сервисом для повторного использования
//		УстановленноеСоединение_Использование	- Булево			- Флаг необходимости повторного использования объекта соединения с web-сервисом 
//  ТекстОшибки					 - 	Строка				- Описание возникшей ошибки
// 
// Возвращаемое значение:
//   Строка - Идентификатор точки возникновения событий
//
&НаСервере
Функция ПолучитьИдентификаторВнешнейИБ(СтруктураНастроек, ТекстОшибки = "") Экспорт
	
	ОписаниеСоединения = ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьСоединение(СтруктураНастроек);
	
	Если ОписаниеСоединения.Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОписаниеСоединения.Соединение;
	
	ДанныеОтвета = Неопределено;
	
	ТекстОшибки = "";
		
	Если ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.СОАП Тогда
		
		ВремСериализатор = Новый СериализаторXDTO(Соединение.ФабрикаXDTO);
		
		ДанныеОтветаВнеш = Соединение.GetThisEventPoint();
		
		ДанныеОтвета = ВремСериализатор.ПрочитатьXDTO(ДанныеОтветаВнеш);
		
	ИначеЕсли ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.ХТТП Тогда
		
		РезультатОбработки =
			ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьОтветХТТПСервиса(Соединение,
																		СтруктураНастроек.Сервис_АдресРесурса + "/ThisEvtPnt",
																		ДанныеОтвета,
																		ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
		ТекстОшибки = "Некорректный тип ответа сервиса """ + СокрЛП(ТипЗнч(ДанныеОтвета)) + """, ожидается ""Массив""!";
		Возврат Неопределено;
	КонецЕсли;
	
	ОбязательныеПоля = Новый Структура("Ид, Наименование");
	//ОписаниеСобытия = Новый Структура("Ид, Наименование, Дата, Момент, Источник, Параметры");
	
	ОписаниеОшибок = "";
	
	Если ДанныеОтвета.Количество() = 0 Тогда
		ТекстОшибки = "Ответ сервиса не содержит описания точек возникновения событий!";
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ДанныеОтвета[0]) = Тип("Структура") Тогда
		ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", Символы.ПС) + "Описание точки имеет тип """ + СокрЛП(ТипЗнч(ДанныеОтвета[0])) + """, ожидается тип ""Структура""!";
	КонецЕсли;
	Для Каждого ТекПоле Из ОбязательныеПоля Цикл
		Если НЕ ДанныеОтвета[0].Свойство(ТекПоле.Ключ) Тогда
			ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", Символы.ПС) + "В описании точки отсутствует поле """ + ТекПоле.Ключ + """!";
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОписаниеОшибок = "" Тогда
		ТекстОшибки = "В процессе обработки ответа сервиса возникли ошибки: " + Символы.ПС + ОписаниеОшибок;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеОтвета[0].Ид;
	
КонецФункции //ПолучитьИдентификаторВнешнейИБ()

// Функция - Получает список событий из внешней ИБ
//
// Параметры:
// 	СтруктураНастроек						- Структура			- Структура настроек подключения к http-сервису, в т.ч.:
//		Сервис_ТипСервиса						- ПеречислениеСсылка.	- Тип сервиса SOAP/HTTP
//												  ктв_сб_ТипСервиса
//		Сервис_Сервер							- Строка			- Адрес сервера http-сервиса
//		Сервис_АдресРесурса						- Строка			- Адрес ресурса http/web-сервиса
//		Сервис_ПространствоИмен					- Строка			- Пространство имен web-сервиса
//		Сервис_ИмяСервиса						- Строка			- Имя web-сервиса
//		Сервис_ИмяТочкиПодключения				- Строка			- Имя точки подключения web-сервиса
//		Сервис_Пользователь						- Строка			- Имя пользователя сервиса
//		Сервис_Пароль							- Строка			- Пароль пользователя сервиса
//		УстановленноеСоединение                 - WebПрокси		    - Полученный ранее объект соединения с web-сервисом для повторного использования
//		УстановленноеСоединение_Использование	- Булево			- Флаг необходимости повторного использования объекта соединения с web-сервисом 
//  ТекстОшибки		 - Строка										  	- ОписаниеОшибки
// 
// Возвращаемое значение:
//  Массив (Структура) - Массив описаний событий
//
Функция ПолучитьСписокСобытийВнешнейИБ(СтруктураНастроек, ТекстОшибки = "") Экспорт
	
	ОписаниеСоединения = ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьСоединение(СтруктураНастроек);
	
	Если ОписаниеСоединения.Соединение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОписаниеСоединения.Соединение;
	
	ДанныеОтвета = Неопределено;
	
	ТекстОшибки = "";
		
	Если ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.СОАП Тогда
		
		ВремСериализатор = Новый СериализаторXDTO(Соединение.ФабрикаXDTO);
		
		ДанныеОтветаВнеш = Соединение.GetEventsRegistered();
		
		ДанныеОтвета = ВремСериализатор.ПрочитатьXDTO(ДанныеОтветаВнеш);
		
	ИначеЕсли ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.ХТТП Тогда
		
		РезультатОбработки =
			ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьОтветХТТПСервиса(Соединение,
																		СтруктураНастроек.Сервис_АдресРесурса + "/EvtReg",
																		ДанныеОтвета,
																		ТекстОшибки);
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции //ПолучитьСписокСобытийВнешнейИБ()

#КонецОбласти
