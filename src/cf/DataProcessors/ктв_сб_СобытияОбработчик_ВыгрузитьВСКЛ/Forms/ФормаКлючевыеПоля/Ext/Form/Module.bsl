&НаКлиенте
Перем ФормаНастройкиЗаполненияПолей Экспорт; //Хранит ссылку на форму настройки заполнения полей

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТаблицыСУБД") Тогда
		Для Каждого ТекКолонка Из Параметры.ТаблицыСУБД Цикл
			Элементы.ПоляКлючаТаблицаИсточник.СписокВыбора.Добавить(ТекКолонка);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиСУБД") Тогда
		Для Каждого ТекКолонка Из Параметры.КолонкиСУБД Цикл
			Элементы.ПоляКлючаПолеКлюча.СписокВыбора.Добавить(ТекКолонка);
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиЗапроса") Тогда
		Для Каждого ТекКолонка Из Параметры.КолонкиЗапроса Цикл
			Элементы.ПоляКлючаКолонкаЗапроса.СписокВыбора.Добавить(ТекКолонка);
		КонецЦикла;
	КонецЕсли;
	
	Параметры.Свойство("ТекущаяСтрока", ТекущаяСтрокаВладельца);
	
	Если Параметры.Свойство("ПоляКлюча") Тогда
		Попытка
			ВремПоляКлюча = РеквизитФормыВЗначение("ПоляКлюча");
			ЗаполнитьТаблицуИзМассиваСтруктур(ВремПоляКлюча, ЗначениеИзСтрокиВнутр(Параметры.ПоляКлюча)); 
			ЗначениеВРеквизитФормы(ВремПоляКлюча, "ПоляКлюча");
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //ПриСозданииНаСервере()

// Процедура - Обработка оповещения
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыПоляКлюча" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Параметр.Свойство("Приемник") Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Параметр.Приемник = ЭтаФорма Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Неопределено;
		Попытка
			ТекущиеДанные = ПоляКлюча[Параметр.ТекущаяСтрока];
		Исключение
		КонецПопытки;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные.ПоляКлюча					= Параметр.ПоляКлюча;
			ТекущиеДанные.ПоляКлючаПредставление	= Параметр.ПоляКлючаПредставление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - Обработчик события "ПриИзменении" поля "ПоляКлючаТаблицаИсточник" таблицы "ПоляКлюча" формы
//
&НаКлиенте
Процедура ПоляКлючаТаблицаИсточникПриИзменении(Элемент)
	
	Элементы.ПоляКлючаПолеЗначения.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.ПоляКлюча.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолей = ФормаНастройкиЗаполненияПолей.ПолучитьСписокПолейТаблицыСУБДНаСервере(ТекущиеДанные.ТаблицаИсточник);
	
	Для Каждого ТекПоле Из МассивПолей Цикл
			
		Элементы.ПоляКлючаПолеЗначения.СписокВыбора.Добавить(ТекПоле);
	
	КонецЦикла;
	
КонецПроцедуры //ПоляКлючаТаблицаИсточникПриИзменении()

// Процедура - Обработчик события "ПриНачалеРедактирования" таблицы "ПоляКлюча" формы
//
&НаКлиенте
Процедура ПоляКлючаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПоляКлючаТаблицаИсточникПриИзменении(Элемент);
	
КонецПроцедуры //ПоляКлючаПриНачалеРедактирования()

// Процедура - Обработчик события "НачалоВыбора" поля "ПоляКлюча" таблицы "ПоляКлюча" формы
//
&НаКлиенте
Процедура ПоляКлючаПоляКлючаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = ПоляКлюча.Индекс(Элементы.ПоляКлюча.ТекущиеДанные);
	
	Если ТекСтрока = Неопределено Тогда
		ПоляКлюча = "";
		ТаблицыСУБД = Новый Массив();
		КолонкиСУБД = Новый Массив();
		КолонкиЗапроса = Новый Массив();
	Иначе
		ТаблицыСУБД = Элементы.ПоляКлючаТаблицаИсточник.СписокВыбора.ВыгрузитьЗначения();
		
		КолонкиСУБД = ФормаНастройкиЗаполненияПолей.ПолучитьСписокПолейТаблицыСУБДНаСервере(ПоляКлюча[ТекСтрока].ТаблицаИсточник);
		
		КолонкиЗапроса = Элементы.ПоляКлючаКолонкаЗапроса.СписокВыбора.ВыгрузитьЗначения();
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТаблицыСУБД, КолонкиСУБД, КолонкиЗапроса, ПоляКлюча, ТекущаяСтрока"
								   , ТаблицыСУБД
								   , КолонкиСУБД
								   , КолонкиЗапроса
								   , ПоляКлюча[ТекСтрока].ПоляКлюча
								   , ТекСтрока);
	
	ФормаСпискаПолейКлюча = ПолучитьФорму("Обработка.ктв_сб_СобытияОбработчик_ВыгрузитьВСКЛ.Форма.ФормаКлючевыеПоля", ПараметрыФормы, ЭтаФорма);
	ФормаСпискаПолейКлюча.ФормаНастройкиЗаполненияПолей = ФормаНастройкиЗаполненияПолей;
	ФормаСпискаПолейКлюча.Открыть();
	
КонецПроцедуры //ПоляКлючаПоляКлючаНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - Обработчик команды "СохранитьНастройку"
//
&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	ПоляКлючаПредставление = "";
	
	Для Каждого ТекСтрока Из ПоляКлюча Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТаблицаИсточник) Тогда
			ПоляКлючаПредставление = ПоляКлючаПредставление
								   + ?(ПоляКлючаПредставление = "", "", "," + Символы.ПС)
								   + ТекСтрока.ТаблицаИсточник + "." + ТекСтрока.ПолеЗначения + " = " + ТекСтрока.ПолеКлюча;
		Иначе 
			ПоляКлючаПредставление = ПоляКлючаПредставление
								   + ?(ПоляКлючаПредставление = "", "", "," + Символы.ПС)
								   + ТекСтрока.КолонкаЗапроса + " (" + ТекСтрока.ПсевдонимСУБД + ") = " + ТекСтрока.ПолеКлюча;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыНастройки = Новый Структура("Приемник, ТекущаяСтрока, ПоляКлюча, ПоляКлючаПредставление"
									   , ВладелецФормы
									   , ТекущаяСтрокаВладельца
									   , ПолучитьТекстПолейКлючаДляСохранения()
									   , ПоляКлючаПредставление);
									   
	Оповестить("ИзмененыПоляКлюча", ПараметрыНастройки, ЭтаФорма);
	
КонецПроцедуры //СохранитьНастройку()

// Процедура - Обработчик команды "СохранитьНастройкуИЗакрыть"
//
&НаКлиенте
Процедура СохранитьНастройкуИЗакрыть(Команда)
	
	СохранитьНастройку(Команда);
	
	Закрыть("ИзмененыПоляКлюча");
	
КонецПроцедуры //СохранитьНастройкуИЗакрыть()

#КонецОбласти

#Область СлужебныеПроцедуры

// Функция - Преобразует таблицу полей ключа в текст на сервере
//
&НаСервере
Функция ПолучитьТекстПолейКлючаДляСохранения()
	
	Возврат ЗначениеВСтрокуВнутр(ТаблицуВМассивСтруктур(ПоляКлюча.Выгрузить()));
	
КонецФункции //ПолучитьТекстПолейКлючаДляСохранения()

//Функция - Преобразует таблицу значений в массив структур
//
// Параметры:
//  ТЗ						 - ТаблицаЗначений	 - Таблица значений для преобразования
// 
// Возвращаемое значение:
//  Массив(Структура) - Результат преобразования
//
&НаКлиентеНаСервереБезКонтекста
Функция ТаблицуВМассивСтруктур(ТЗ) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		НоваяСтрока = Новый Структура();
		
		Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
			НоваяСтрока.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ТаблицуВМассивСтруктур()

//Функция - заполняет переданную таблицу из массива структур
//
// Параметры:
//  Таблица					 - ТаблицаЗначений,		 - Таблица для заполнения
//							   ДанныеФормыКоллекция
//  МС						 - Массив(Структура)	 - Массив структур для преобразования
// 
&НаСервере
Процедура ЗаполнитьТаблицуИзМассиваСтруктур(Знач Таблица, МС)
	
	Если НЕ ТипЗнч(МС) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если МС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(МС[0]) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Таблица) = Тип("Строка") Тогда
		Таблица = Вычислить(Таблица);
	КонецЕсли;
	
	Таблица.Очистить();
	
	Для Каждого ТекЭлемент Из МС Цикл
		Если НЕ ТипЗнч(ТекЭлемент) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		Попытка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлемент);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьТаблицуИзМассиваСтруктур()

#КонецОбласти
