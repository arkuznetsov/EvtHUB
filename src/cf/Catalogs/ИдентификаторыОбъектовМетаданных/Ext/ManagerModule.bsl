#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура обновляет данные справочника по метаданным конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если производилась запись, иначе не изменяется.
//
//  ЕстьУдаленные - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если хотя бы один элемент справочника был помечен
//                  на удаление, иначе не изменяется.
//
//  ТолькоПроверка - Булево - не производить никаких изменений, а лишь выполнить
//                   установку флажков ЕстьИзменения, ЕстьУдаленные.
//
Процедура ОбновитьДанныеСправочника(ЕстьИзменения = Ложь, ЕстьУдаленные = Ложь, ТолькоПроверка = Ложь) Экспорт
	
	ВыполнитьОбновлениеДанных(ЕстьИзменения, ЕстьУдаленные, ТолькоПроверка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет данные справочника по метаданным конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если производилась запись, иначе не изменяется.
//
//  ЕстьУдаленные - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если хотя бы один элемент справочника был помечен
//                  на удаление, иначе не изменяется.
//
//  РежимОбновления - Строка - возможные значения:
//                    "Полный" - выполнить обновление,
//                    "Частичный" - выполнить обновление (когда ОбъектыРасширений = Ложь,
//                      тогда выполнить обновление, если нет критичных изменений),
//                    "ТолькоПроверка" - не производить никаких изменений, а лишь выполнить
//                      установку флажков ЕстьИзменения, ЕстьУдаленные, ЕстьКритичныеИзменения.
//                  - Булево - если Истина, то режим обновления "ТолькоПроверка",
//                             если Ложь, то режим обновления "Полный".
//
//  ЕстьКритичныеИзменения - (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если найдены критичные изменения, иначе не изменяется.
//                    Критичные изменения (только для не помеченных на удаление):
//                    - изменении реквизита ПолноеИмя,
//                    - добавление нового элемента справочника.
//                  В общем случае, критичные изменения требуют монопольный режим.
//
//  СписокКритичныхИзменений - Строка (возвращаемое значение) - содержит полные имена
//                  объектов метаданных, которые добавлены или требуется добавить,
//                  а также объектов метаданных, полные имена которых изменены или требуется изменить.
//
Процедура ВыполнитьОбновлениеДанных(ЕстьИзменения, ЕстьУдаленные, РежимОбновления,
			ЕстьКритичныеИзменения = Ложь, СписокКритичныхИзменений = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(РежимОбновления) = Тип("Булево") Тогда
		РежимОбновления = ?(РежимОбновления, "ТолькоПроверка", "Полный");
	КонецЕсли;
	ТолькоПроверка = (РежимОбновления = "ТолькоПроверка");
	
	ЕстьТекущиеИзменения = Ложь;
	
	ОбновитьДанные(ЕстьТекущиеИзменения, ЕстьУдаленные, РежимОбновления,
		ЕстьКритичныеИзменения, СписокКритичныхИзменений);
		
	Если ЕстьТекущиеИзменения Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СвойстваКоллекцийОбъектовМетаданных()

	СвойстваКоллекцийОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ИмяВЕдЧисле",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("СинонимВЕдЧисле",           Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Идентификатор",             Новый ОписаниеТипов("УникальныйИдентификатор"));

	// Константы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("627a6fb8-872a-11e3-bb87-005056c00008");
	Строка.Имя             = "Константы";
	Строка.Синоним         = НСтр("ru = 'Константы'");
	Строка.ИмяВЕдЧисле     = "Константа";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Константа'");

	// Подсистемы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("cdf5ac50-08e8-46af-9a80-4e63fd4a88ff");
	Строка.Имя             = "Подсистемы";
	Строка.Синоним         = НСтр("ru = 'Подсистемы'");
	Строка.ИмяВЕдЧисле     = "Подсистема";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Подсистема'");
	Строка.БезДанных       = Истина;

	// Роли
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("115c4f55-9c20-4e86-a6d0-d0167ec053a1");
	Строка.Имя             = "Роли";
	Строка.Синоним         = НСтр("ru = 'Роли'");
	Строка.ИмяВЕдЧисле     = "Роль";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Роль'");
	Строка.БезДанных       = Истина;

	// ПланыОбмена
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("269651e0-4b06-4f9d-aaab-a8d2b6bc6077");
	Строка.Имя             = "ПланыОбмена";
	Строка.Синоним         = НСтр("ru = 'Планы обмена'");
	Строка.ИмяВЕдЧисле     = "ПланОбмена";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План обмена'");

	// Справочники
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("ede89702-30f5-4a2a-8e81-c3a823b7e161");
	Строка.Имя             = "Справочники";
	Строка.Синоним         = НСтр("ru = 'Справочники'");
	Строка.ИмяВЕдЧисле     = "Справочник";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Справочник'");

	// Документы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("96c6ab56-0375-40d5-99a2-b83efa3dac8b");
	Строка.Имя             = "Документы";
	Строка.Синоним         = НСтр("ru = 'Документы'");
	Строка.ИмяВЕдЧисле     = "Документ";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Документ'");

	// ЖурналыДокументов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("07938234-e29b-4cff-961a-9af07a4c6185");
	Строка.Имя             = "ЖурналыДокументов";
	Строка.Синоним         = НСтр("ru = 'Журналы документов'");
	Строка.ИмяВЕдЧисле     = "ЖурналДокументов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Журнал документов'");
	Строка.БезДанных       = Истина;

	// Отчеты
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("706cf832-0ae5-45b5-8a4a-1f251d054f3b");
	Строка.Имя             = "Отчеты";
	Строка.Синоним         = НСтр("ru = 'Отчеты'");
	Строка.ИмяВЕдЧисле     = "Отчет";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Отчет'");
	Строка.БезДанных       = Истина;

	// Обработки
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("ae480426-487e-40b2-98ba-d207777449f3");
	Строка.Имя             = "Обработки";
	Строка.Синоним         = НСтр("ru = 'Обработки'");
	Строка.ИмяВЕдЧисле     = "Обработка";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Обработка'");
	Строка.БезДанных       = Истина;

	// ПланыВидовХарактеристик
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("8b5649b9-cdd1-4698-9aac-12ba146835c4");
	Строка.Имя             = "ПланыВидовХарактеристик";
	Строка.Синоним         = НСтр("ru = 'Планы видов характеристик'");
	Строка.ИмяВЕдЧисле     = "ПланВидовХарактеристик";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов характеристик'");

	// ПланыСчетов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("4295af27-543f-4373-bcfc-c0ace9b7620c");
	Строка.Имя             = "ПланыСчетов";
	Строка.Синоним         = НСтр("ru = 'Планы счетов'");
	Строка.ИмяВЕдЧисле     = "ПланСчетов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План счетов'");

	// ПланыВидовРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("fca3e7e1-1bf1-49c8-9921-aafb4e787c75");
	Строка.Имя             = "ПланыВидовРасчета";
	Строка.Синоним         = НСтр("ru = 'Планы видов расчета'");
	Строка.ИмяВЕдЧисле     = "ПланВидовРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов расчета'");

	// РегистрыСведений
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("d7ecc1e9-c068-44dd-83c2-1323ec52dbbb");
	Строка.Имя             = "РегистрыСведений";
	Строка.Синоним         = НСтр("ru = 'Регистры сведений'");
	Строка.ИмяВЕдЧисле     = "РегистрСведений";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр сведений'");

	// РегистрыНакопления
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("74083488-b01e-4441-84a6-c386ce88cdb5");
	Строка.Имя             = "РегистрыНакопления";
	Строка.Синоним         = НСтр("ru = 'Регистры накопления'");
	Строка.ИмяВЕдЧисле     = "РегистрНакопления";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр накопления'");

	// РегистрыБухгалтерии
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("9a0d75ff-0eda-454e-b2b7-d2412ffdff18");
	Строка.Имя             = "РегистрыБухгалтерии";
	Строка.Синоним         = НСтр("ru = 'Регистры бухгалтерии'");
	Строка.ИмяВЕдЧисле     = "РегистрБухгалтерии";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр бухгалтерии'");

	// РегистрыРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("f330686a-0acf-4e26-9cda-108f1404687d");
	Строка.Имя             = "РегистрыРасчета";
	Строка.Синоним         = НСтр("ru = 'Регистры расчета'");
	Строка.ИмяВЕдЧисле     = "РегистрРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр расчета'");

	// БизнесПроцессы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("a8cdd0e0-c27f-4bf0-9718-10ec054dc468");
	Строка.Имя             = "БизнесПроцессы";
	Строка.Синоним         = НСтр("ru = 'Бизнес-процессы'");
	Строка.ИмяВЕдЧисле     = "БизнесПроцесс";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Бизнес-процесс'");
	
	// Задачи
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Идентификатор   = Новый УникальныйИдентификатор("8d9153ad-7cea-4e25-9542-a557ee59fd16");
	Строка.Имя             = "Задачи";
	Строка.Синоним         = НСтр("ru = 'Задачи'");
	Строка.ИмяВЕдЧисле     = "Задача";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Задача'");

	Для каждого Строка Из СвойстваКоллекцийОбъектовМетаданных Цикл
		Строка.ПорядокКоллекции = СвойстваКоллекцийОбъектовМетаданных.Индекс(Строка);
	КонецЦикла;
	
	СвойстваКоллекцийОбъектовМетаданных.Индексы.Добавить("Идентификатор");
	
	Возврат СвойстваКоллекцийОбъектовМетаданных;

КонецФункции

Процедура ОбновитьДанные(ЕстьИзменения, ЕстьУдаленные, РежимОбновления,
			ЕстьКритичныеИзменения, СписокКритичныхИзменений)
	
	СвойстваОбъектовМетаданных = СвойстваОбъектовМетаданных();
	СправочникМенеджер = Справочники.ИдентификаторыОбъектовМетаданных;
	
	// Найден - состояние, когда для объекта метаданных найден идентификатор.
	СвойстваОбъектовМетаданных.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	
	// Порядок обновления:
	// 1. Переименование объектов метаданных (с учетом нижестоящих подсистем).
	// 2. Обновление предопределенных идентификаторов (коллекций объектов метаданных).
	// 3. Обновление идентификаторов объектов метаданных, которые    имеют ключ  объекта метаданных.
	// 4. Обновление идентификаторов объектов метаданных, которые не имеют ключа объекта метаданных.
	// 5. В процессе 3 и 4 пометка удаления дублей идентификаторов (по полным именам).
	// 6. Добавление новых идентификаторов объектов метаданных.
	// 7. Обновление родителей идентификаторов объектов метаданных и запись обновленных.
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ИдентификаторыОбъектовМетаданных");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если РежимОбновления <> "Полный" Или МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Выгрузка = ВыгрузкаВсехИдентификаторов();
		Выгрузка.Колонки.Добавить("Обновлен", Новый ОписаниеТипов("Булево"));
		Выгрузка.Колонки.Добавить("ОбъектМетаданных");
		Выгрузка.Колонки.Удалить("НоваяСсылка");
		
		СписокПереименованийОбъектовМетаданных = "";
		
		ОбработатьИдентификаторыОбъектовМетаданных(Выгрузка, СвойстваОбъектовМетаданных,
			ЕстьУдаленные, ЕстьКритичныеИзменения, СписокПереименованийОбъектовМетаданных);
		
		СписокНовыхОбъектовМетаданных = "";
		ДобавитьИдентификаторыНовыхОбъектовМетаданных(Выгрузка, СвойстваОбъектовМетаданных,
			ЕстьКритичныеИзменения, СписокНовыхОбъектовМетаданных);
		
		СписокКритичныхИзменений = "";
		Если ЗначениеЗаполнено(СписокПереименованийОбъектовМетаданных) Тогда
			СписокКритичныхИзменений = НСтр("ru = 'Переименование идентификаторов объектов метаданных СтароеПолноеИмя -> НовоеПолноеИмя:'")
				+ Символы.ПС + СписокПереименованийОбъектовМетаданных + Символы.ПС + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СписокНовыхОбъектовМетаданных) Тогда
			СписокКритичныхИзменений = СписокКритичныхИзменений
				+ НСтр("ru = 'Добавление новых идентификаторов объектов метаданных:'")
				+ Символы.ПС + СписокНовыхОбъектовМетаданных + Символы.ПС;
		КонецЕсли;
		
		ТолькоПроверка = (РежимОбновления = "ТолькоПроверка") И РежимОбновления <> "Полный" И ЕстьКритичныеИзменения;
		
		ОбновитьИдентификаторыОбъектовМетаданных(Выгрузка, СвойстваОбъектовМетаданных, ЕстьИзменения, ТолькоПроверка);
		
		Если Не ТолькоПроверка Тогда
			Если ЗначениеЗаполнено(СписокКритичныхИзменений) Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Идентификаторы объектов метаданных.Выполнены критичные изменения'",
							"ru"),
					УровеньЖурналаРегистрации.Информация,
					,
					,
					СписокКритичныхИзменений,
					РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если СнятьМонопольныйРежим Тогда
			УстановитьМонопольныйРежим(Ложь);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузкаВсехИдентификаторов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	Идентификаторы.Родитель КАК Родитель,
	|	Идентификаторы.ПометкаУдаления КАК ПометкаУдаления,
	|	Идентификаторы.Наименование КАК Наименование,
	|	Идентификаторы.ПорядокКоллекции,
	|	Идентификаторы.Имя,
	|	Идентификаторы.Синоним,
	|	Идентификаторы.ПолноеИмя,
	|	Идентификаторы.ПолныйСиноним,
	|	Идентификаторы.БезДанных,
	|	Идентификаторы.ЗначениеПустойСсылки,
	|	Идентификаторы.КлючОбъектаМетаданных КАК ХранилищеКлюча,
	|	Идентификаторы.НоваяСсылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Колонки.Добавить("КлючОбъектаМетаданных");
	Выгрузка.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	Выгрузка.Колонки.Добавить("ЭтоКоллекция",              Новый ОписаниеТипов("Булево"));
	Выгрузка.Колонки.Добавить("ЭтоНовый",                  Новый ОписаниеТипов("Булево"));
	
	// Упорядочение идентификаторов перед обработкой.
	Для каждого Строка Из Выгрузка Цикл
		Если ТипЗнч(Строка.ХранилищеКлюча) = Тип("ХранилищеЗначения") Тогда
			Строка.КлючОбъектаМетаданных = Строка.ХранилищеКлюча.Получить();
		Иначе
			Строка.КлючОбъектаМетаданных = Неопределено;
		КонецЕсли;
		
		Строка.БезКлючаОбъектаМетаданных = Строка.КлючОбъектаМетаданных = Неопределено
		                               ИЛИ Строка.КлючОбъектаМетаданных = Тип("Неопределено");
	КонецЦикла;
	
	Выгрузка.Индексы.Добавить("Ссылка");
	Выгрузка.Индексы.Добавить("ПолноеИмя");
	
	СвойстваКоллекций = СвойстваКоллекцийОбъектовМетаданных();
	
	Для каждого СвойстваКоллекции Из СвойстваКоллекций Цикл
		ИдентификаторКоллекции = ПолучитьСсылку(СвойстваКоллекции.Идентификатор);
		Строка = Выгрузка.Найти(ИдентификаторКоллекции, "Ссылка");
		Если Строка = Неопределено Тогда
			Строка = Выгрузка.Добавить();
			Строка.Ссылка   = ИдентификаторКоллекции;
			Строка.ЭтоНовый = Истина;
		КонецЕсли;
		Строка.ЭтоКоллекция = Истина;
	КонецЦикла;
	
	Выгрузка.Сортировать("ЭтоКоллекция УБЫВ,
	                     |ПометкаУдаления ВОЗР,
	                     |БезКлючаОбъектаМетаданных ВОЗР");
	
	Возврат Выгрузка;
	
КонецФункции

Процедура ОбработатьИдентификаторыОбъектовМетаданных(Выгрузка, СвойстваОбъектовМетаданных, 
			ЕстьУдаленные, ЕстьКритичныеИзменения, СписокПереименованийОбъектовМетаданных)
	
	// Обработка идентификаторов объектов метаданных.
	Для Каждого Свойства Из Выгрузка Цикл
		
		// Проверка и обновление свойств идентификаторов коллекций объектов метаданных.
		Если Свойства.ЭтоКоллекция Тогда
			ПроверитьОбновитьСвойстваКоллекции(Свойства);
			Продолжить;
		КонецЕсли;
		
		КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных;
		ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
		
		Если ОбъектМетаданных = Неопределено Тогда
			// Если объект метаданных без ключа, то его можно найти только по полному имени.
			ОбъектМетаданных = МетаданныеНайтиПоПолномуИмени(Свойства.ПолноеИмя);
		Иначе
			// Если объект метаданных удалялся с целью реструктуризации, тогда
			// старый идентификатор нужно использовать для нового объекта метаданных,
			// а для старых объектов метаданных создать новые идентификаторы.
			Если ВРег(Лев(ОбъектМетаданных.Имя, СтрДлина("Удалить"))) =  ВРег("Удалить")
			   И ВРег(Лев(Свойства.Имя,         СтрДлина("Удалить"))) <> ВРег("Удалить") Тогда
				
				НовыйОбъектМетаданных = МетаданныеНайтиПоПолномуИмени(Свойства.ПолноеИмя);
				Если НовыйОбъектМетаданных <> Неопределено Тогда
					ОбъектМетаданных = НовыйОбъектМетаданных;
					КлючОбъектаМетаданных = Неопределено; // Чтобы выполнить обновление идентификатора.
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если объект метаданных найден по ключу или полному имени,
		// тогда нужно подготовить строку свойств объекта метаданных.
		Если ОбъектМетаданных <> Неопределено Тогда
			СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(ОбъектМетаданных.ПолноеИмя(), "ПолноеИмя");
			Если СвойстваОбъекта = Неопределено Тогда
				ОбъектМетаданных = Неопределено;
			Иначе
				Свойства.ОбъектМетаданных = ОбъектМетаданных;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектМетаданных = Неопределено ИЛИ СвойстваОбъекта.Найден Тогда
			// Если объект метаданных не найден или найден повторно
			// тогда идентификатор требуется пометить на удаление.
			СвойстваОбновлены = Ложь;
			ОбновитьСвойстваПомеченногоНаУдаление(Свойства, СвойстваОбновлены, ЕстьУдаленные);
			Если СвойстваОбновлены Тогда
				Свойства.Обновлен = Истина;
			КонецЕсли;
		Иначе
			// Обновление свойств существующих объектов метаданных, если изменились.
			СвойстваОбъекта.Найден = Истина;
			Если Свойства.Наименование              <> СвойстваОбъекта.Наименование
			 ИЛИ Свойства.ПорядокКоллекции          <> СвойстваОбъекта.ПорядокКоллекции
			 ИЛИ Свойства.Имя                       <> СвойстваОбъекта.Имя
			 ИЛИ Свойства.Синоним                   <> СвойстваОбъекта.Синоним
			 ИЛИ Свойства.ПолноеИмя                 <> СвойстваОбъекта.ПолноеИмя
			 ИЛИ Свойства.ПолныйСиноним             <> СвойстваОбъекта.ПолныйСиноним
			 ИЛИ Свойства.БезДанных                 <> СвойстваОбъекта.БезДанных
			 ИЛИ Свойства.ЗначениеПустойСсылки      <> СвойстваОбъекта.ЗначениеПустойСсылки
			 ИЛИ Свойства.ИмяПредопределенныхДанных <> ""
			 ИЛИ Свойства.ПометкаУдаления
			 ИЛИ КлючОбъектаМетаданных = Неопределено
			 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
			     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
				
				Если ВРег(Свойства.ПолноеИмя) <> ВРег(СвойстваОбъекта.ПолноеИмя) Тогда
					ЕстьКритичныеИзменения = Истина;
					СписокПереименованийОбъектовМетаданных = СписокПереименованийОбъектовМетаданных
						+ ?(ЗначениеЗаполнено(СписокПереименованийОбъектовМетаданных), "," + Символы.ПС, "")
						+ Свойства.ПолноеИмя + " -> " + СвойстваОбъекта.ПолноеИмя;
				КонецЕсли;
				
				// Установка новых свойств идентификатора объекта метаданных.
				ЗаполнитьЗначенияСвойств(Свойства, СвойстваОбъекта);
				
				Свойства.ИмяПредопределенныхДанных = "";
				
				Если КлючОбъектаМетаданных = Неопределено
				 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
				     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
					
					Свойства.КлючОбъектаМетаданных = КлючОбъектаМетаданных(СвойстваОбъекта.ПолноеИмя);
				КонецЕсли;
				
				Свойства.ПометкаУдаления = Ложь;
				Свойства.Обновлен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИдентификаторыНовыхОбъектовМетаданных(Выгрузка, СвойстваОбъектовМетаданных,
			ЕстьКритичныеИзменения, СписокНовыхОбъектовМетаданных)
	
	СвойстваОбъектов = СвойстваОбъектовМетаданных.НайтиСтроки(Новый Структура("Найден", Ложь));
	
	Для Каждого СвойстваОбъекта Из СвойстваОбъектов Цикл
		Свойства = Выгрузка.Добавить();
		ЗаполнитьЗначенияСвойств(Свойства, СвойстваОбъекта);
		Свойства.ЭтоНовый = Истина;
		Свойства.Ссылка = ПолучитьСсылку();
		Свойства.ПометкаУдаления  = Ложь;
		Свойства.ОбъектМетаданных = СвойстваОбъекта.ОбъектМетаданных;
		Свойства.КлючОбъектаМетаданных = КлючОбъектаМетаданных(Свойства.ПолноеИмя);
		ЕстьКритичныеИзменения = Истина;
		СписокНовыхОбъектовМетаданных = СписокНовыхОбъектовМетаданных
			+ ?(ЗначениеЗаполнено(СписокНовыхОбъектовМетаданных), "," + Символы.ПС, "")
			+ СвойстваОбъекта.ПолноеИмя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыОбъектовМетаданных(Выгрузка, СвойстваОбъектовМетаданных, ЕстьИзменения, ТолькоПроверка)
		
		Для Каждого Свойства Из Выгрузка Цикл
			
			// Обновление родителей идентификаторов объектов метаданных.
			Если Не Свойства.ЭтоКоллекция Тогда
				СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(Свойства.ПолноеИмя, "ПолноеИмя");
				НовыйРодитель = ПустаяСсылка();
				
				Если СвойстваОбъекта <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(СвойстваОбъекта.ПолноеИмяРодителя) Тогда
						// Коллекция объектов метаданных.
						НовыйРодитель = СвойстваОбъекта.Родитель;
					Иначе
						// Не коллекция объектов метаданных, например, подсистема.
						ОписаниеРодителя = Выгрузка.Найти(СвойстваОбъекта.ПолноеИмяРодителя, "ПолноеИмя");
						Если ОписаниеРодителя <> Неопределено Тогда
							НовыйРодитель = ОписаниеРодителя.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Свойства.Родитель <> НовыйРодитель Тогда
					Свойства.Родитель = НовыйРодитель;
					Свойства.Обновлен = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// Обновление идентификаторов объектов метаданных.
			Если Свойства.ЭтоНовый Тогда
				ТаблицаОбъект = СоздатьЭлемент();
				ТаблицаОбъект.УстановитьСсылкуНового(Свойства.Ссылка);
				
			ИначеЕсли Свойства.Обновлен Тогда
				ТаблицаОбъект = Свойства.Ссылка.ПолучитьОбъект();
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЕстьИзменения = Истина;
			Если ТолькоПроверка Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаОбъект, Свойства);
			ТаблицаОбъект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(Свойства.КлючОбъектаМетаданных);
			ТаблицаОбъект.ОбменДанными.Загрузка = Истина;
			ТаблицаОбъект.Записать();
		КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьСвойстваПомеченногоНаУдаление(Свойства, СвойстваОбновлены = Ложь, ЕстьУдаленные = Ложь)
	
	Если ТипЗнч(Свойства.КлючОбъектаМетаданных) = Тип("ХранилищеЗначения") Тогда
		КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных.Получить();
	Иначе
		КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных;
	КонецЕсли;
	
	Если НЕ Свойства.ПометкаУдаления
	 ИЛИ ЗначениеЗаполнено(Свойства.Родитель)
	 ИЛИ Лев(Свойства.Наименование, 1)  <> "?"
	 ИЛИ Лев(Свойства.Имя, 1)           <> "?"
	 ИЛИ Лев(Свойства.Синоним, 1)       <> "?"
	 ИЛИ Лев(Свойства.ПолноеИмя, 1)     <> "?"
	 ИЛИ Лев(Свойства.ПолныйСиноним, 1) <> "?"
	 ИЛИ СтрНайти(Свойства.ПолноеИмя, "(") = 0
	 ИЛИ Свойства.ЗначениеПустойСсылки  <> Неопределено
	 ИЛИ КлючОбъектаМетаданных <> Неопределено Тогда
		
		Если НЕ Свойства.ПометкаУдаления Или Лев(Свойства.ПолноеИмя, 1) <> "?" Тогда
			ЕстьУдаленные = Истина;
		КонецЕсли;
		
		// Установка новых свойств идентификатора объекта метаданных.
		Свойства.ПометкаУдаления       = Истина;
		Свойства.Родитель              = ПустаяСсылка();
		Свойства.Наименование          = ВставитьЗнакВопроса(Свойства.Наименование);
		Свойства.Имя                   = ВставитьЗнакВопроса(Свойства.Имя);
		Свойства.Синоним               = ВставитьЗнакВопроса(Свойства.Синоним);
		Свойства.ПолноеИмя             = УникальноеПолноеИмя(Свойства);
		Свойства.ПолныйСиноним         = ВставитьЗнакВопроса(Свойства.ПолныйСиноним);
		Свойства.ЗначениеПустойСсылки  = Неопределено;
		
		Если ТипЗнч(Свойства.КлючОбъектаМетаданных) = Тип("ХранилищеЗначения") Тогда
			Свойства.КлючОбъектаМетаданных = Новый ХранилищеЗначения(Неопределено);
		Иначе
			Свойства.КлючОбъектаМетаданных = Неопределено;
		КонецЕсли;
		СвойстваОбновлены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбновитьСвойстваКоллекции(Знач ТекущиеСвойства)
	
	СвойстваКоллекций = СвойстваКоллекцийОбъектовМетаданных();
	НовыеСвойства = СвойстваКоллекций.Найти(ТекущиеСвойства.Ссылка.УникальныйИдентификатор(), "Идентификатор");
	
	НаименованиеКоллекции = НовыеСвойства.Синоним;
	
	Если ТекущиеСвойства.Наименование              <> НаименованиеКоллекции
	 ИЛИ ТекущиеСвойства.ПорядокКоллекции          <> НовыеСвойства.ПорядокКоллекции
	 ИЛИ ТекущиеСвойства.Имя                       <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.Синоним                   <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.ПолноеИмя                 <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.ПолныйСиноним             <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.БезДанных                 <> Ложь
	 ИЛИ ТекущиеСвойства.ЗначениеПустойСсылки      <> Неопределено
	 ИЛИ ТекущиеСвойства.ИмяПредопределенныхДанных <> ""
	 ИЛИ ТекущиеСвойства.ПометкаУдаления           <> Ложь
	 ИЛИ ТекущиеСвойства.КлючОбъектаМетаданных     <> Неопределено Тогда
		
		// Установка новых свойств.
		ТекущиеСвойства.Наименование              = НаименованиеКоллекции;
		ТекущиеСвойства.ПорядокКоллекции          = НовыеСвойства.ПорядокКоллекции;
		ТекущиеСвойства.Имя                       = НовыеСвойства.Имя;
		ТекущиеСвойства.Синоним                   = НовыеСвойства.Синоним;
		ТекущиеСвойства.ПолноеИмя                 = НовыеСвойства.Имя;
		ТекущиеСвойства.ПолныйСиноним             = НовыеСвойства.Синоним;
		ТекущиеСвойства.БезДанных                 = Ложь;
		ТекущиеСвойства.ЗначениеПустойСсылки      = Неопределено;
		ТекущиеСвойства.ИмяПредопределенныхДанных = "";
		ТекущиеСвойства.ПометкаУдаления           = Ложь;
		ТекущиеСвойства.КлючОбъектаМетаданных     = Неопределено;
		
		ТекущиеСвойства.Обновлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция КлючОбъектаМетаданных(ПолноеИмя)
	
	ПозицияТочки = СтрНайти(ПолноеИмя, ".");
	
	КлассОМ = Лев( ПолноеИмя, ПозицияТочки-1);
	ИмяОМ   = Сред(ПолноеИмя, ПозицияТочки+1);
	
	Если ВРег(КлассОМ) = ВРег("ПланОбмена") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Константа") Тогда
		Возврат ТипЗнч(Константы);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Справочник") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Документ") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ЖурналДокументов") Тогда
		Возврат ТипЗнч(ЖурналыДокументов);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Отчет") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Обработка") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовХарактеристик") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланСчетов") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовРасчета") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрСведений") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрНакопления") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрБухгалтерии") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрРасчета") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("БизнесПроцесс") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Задача") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
	Иначе
		// Без ключа объекта метаданных.
		Возврат Тип("Неопределено");
	КонецЕсли;
	
КонецФункции 

Функция ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных)
	
	ОбъектМетаданных = Неопределено;
	
	Если ТипЗнч(КлючОбъектаМетаданных) = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючОбъектаМетаданных);
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция СвойстваОбъектовМетаданных(СвойстваКоллекций = Неопределено)
	
	МассивТиповРодителя = Новый Массив;
	МассивТиповРодителя.Добавить(ТипЗнч(ПустаяСсылка()));
	
	СвойстваОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваОбъектовМетаданных.Колонки.Добавить("Наименование",              Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмя",                 Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмяРодителя",         Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Родитель",                  Новый ОписаниеТипов(МассивТиповРодителя));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолныйСиноним",             Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ЗначениеПустойСсылки");
	СвойстваОбъектовМетаданных.Колонки.Добавить("ОбъектМетаданных");
	
	Если СвойстваКоллекций = Неопределено Тогда
		СвойстваКоллекций = СвойстваКоллекцийОбъектовМетаданных();
	КонецЕсли;
	
	Для каждого СвойстваКоллекции Из СвойстваКоллекций Цикл
		ДобавитьСвойстваОбъектовМетаданных(Метаданные[СвойстваКоллекции.Имя], СвойстваКоллекции,
			СвойстваОбъектовМетаданных);
	КонецЦикла;
	
	СвойстваОбъектовМетаданных.Индексы.Добавить("ПолноеИмя");
	
	Возврат СвойстваОбъектовМетаданных;
	
КонецФункции

Процедура ДобавитьСвойстваОбъектовМетаданных(Знач КоллекцияОбъектовМетаданных,
                                             Знач СвойстваКоллекции,
                                             Знач СвойстваОбъектовМетаданных,
                                             Знач ПолноеИмяРодителя = "",
                                             Знач ПолныйСинонимРодителя = "")
	
	Для каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если СтрНайти(СвойстваКоллекции.ИмяВЕдЧисле, "Подсистема") <> 0 Тогда
			МетаданныеНайтиПоПолномуИмени(ПолноеИмя);
		КонецЕсли;
		
		Если НЕ СвойстваКоллекции.БезДанных
		   И СтрНайти(СвойстваКоллекции.ИмяВЕдЧисле, "Регистр") = 0
		   И СтрНайти(СвойстваКоллекции.ИмяВЕдЧисле, "Константа") = 0 Тогда
			
			ИмяТипаСсылки = СвойстваКоллекции.ИмяВЕдЧисле + "Ссылка." + ОбъектМетаданных.Имя;
			ОписаниеТипа = Новый ОписаниеТипов(ИмяТипаСсылки);
			ЗначениеПустойСсылки = ОписаниеТипа.ПривестиЗначение(Неопределено);
		Иначе
			ЗначениеПустойСсылки = Неопределено;
		КонецЕсли;
		
		НоваяСтрока = СвойстваОбъектовМетаданных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваКоллекции);
		НоваяСтрока.Родитель          = ПолучитьСсылку(СвойстваКоллекции.Идентификатор);
		НоваяСтрока.Наименование      = ПредставлениеОбъектаМетаданных(ОбъектМетаданных, СвойстваКоллекции);
		НоваяСтрока.ПолноеИмя         = ПолноеИмя;
		НоваяСтрока.ПолноеИмяРодителя = ПолноеИмяРодителя;
		НоваяСтрока.Имя               = ОбъектМетаданных.Имя;
		
		НоваяСтрока.Синоним = ?(
			ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
		
		НоваяСтрока.ПолныйСиноним =
			ПолныйСинонимРодителя + СвойстваКоллекции.СинонимВЕдЧисле + ". " + НоваяСтрока.Синоним;
		
		НоваяСтрока.ЗначениеПустойСсылки = ЗначениеПустойСсылки;
		НоваяСтрока.ОбъектМетаданных     = ОбъектМетаданных;
		
		Если СвойстваКоллекции.Имя = "Подсистемы" Тогда
			ДобавитьСвойстваОбъектовМетаданных(
				ОбъектМетаданных.Подсистемы,
				СвойстваКоллекции,
				СвойстваОбъектовМетаданных,
				ПолноеИмя,
				НоваяСтрока.ПолныйСиноним + ". ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъектаМетаданных(Знач ОбъектМетаданных, Знач СвойстваКоллекции)
	
	Постфикс = "(" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
	Синоним = ?(ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
	
	МаксимальнаяДлинаСинонима = 150 - СтрДлина(Постфикс);
	Если СтрДлина(Синоним) > МаксимальнаяДлинаСинонима + 1 Тогда
		Возврат Лев(Синоним, МаксимальнаяДлинаСинонима - 2) + "..." + Постфикс;
	КонецЕсли;
	
	Возврат Синоним + " (" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
КонецФункции

Функция ВставитьЗнакВопроса(Знач Строка)
	
	Если Не СтрНачинаетсяС(Строка, "?") Тогда
		Если Не СтрНачинаетсяС(Строка, " ") Тогда
			Строка = "? " + Строка;
		Иначе
			Строка = "?" + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция УникальноеПолноеИмя(Свойства)
	
	ПолноеИмя = ВставитьЗнакВопроса(Свойства.ПолноеИмя);
	
	Если СтрНайти(ПолноеИмя, "(") = 0 Тогда
		ПолноеИмя = ПолноеИмя + " (" + Строка(Свойства.Ссылка.УникальныйИдентификатор())+ ")";
	КонецЕсли;
	
	Возврат ПолноеИмя;
	
КонецФункции

Функция МетаданныеНайтиПоПолномуИмени(ПолноеИмя)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВРег(ОбъектМетаданных.ПолноеИмя()) <> ВРег(ПолноеИмя) Тогда
		
		Если СтрЧислоВхождений(ВРег(ПолноеИмя), ВРег("Подсистема.")) > 1 Тогда
			Подсистема = НайтиПодсистемуПоПолномуИмени(ПолноеИмя);
			Если Подсистема = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Ошибка при поиске дочерней подсистемы по полному имени (при поиске ""%1"" была найдена ""%2"").
				           |Не следует называть подсистемы одинаково, либо использовать более новую версию платформы.'"),
				ПолноеИмя,
				ОбъектМетаданных.ПолноеИмя());
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Ошибка при поиске объекта метаданных по полному имени (при поиске ""%1"" был найден ""%2"").'"),
				ПолноеИмя,
				ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция НайтиПодсистемуПоПолномуИмени(ПолноеИмя, КоллекцияПодсистемы = Неопределено)
	
	Если КоллекцияПодсистемы = Неопределено Тогда
		КоллекцияПодсистемы = Метаданные.Подсистемы;
	КонецЕсли;
	
	ОстатокИмени = Сред(ПолноеИмя, СтрДлина("Подсистема.") + 1);
	Позиция = СтрНайти(ВРег(ОстатокИмени), ВРег("Подсистема."));
	Если Позиция > 0 Тогда
		ИмяПодсистемы = Лев(ОстатокИмени, Позиция - 2);
		ОстатокИмени = Сред(ПолноеИмя, Позиция + СтрДлина("Подсистема."));
	Иначе
		ИмяПодсистемы = ОстатокИмени;
		ОстатокИмени = Неопределено;
	КонецЕсли;
	
	НайденнаяПодсистема = Неопределено;
	Для каждого Подсистема Из КоллекцияПодсистемы Цикл
		Если ВРег(Подсистема.Имя) = ВРег(ИмяПодсистемы) Тогда
			НайденнаяПодсистема = Подсистема;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденнаяПодсистема = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОстатокИмени = Неопределено Тогда
		Возврат НайденнаяПодсистема;
	КонецЕсли;
	
	Возврат НайтиПодсистемуПоПолномуИмени(ОстатокИмени, НайденнаяПодсистема.Подсистемы);
	
КонецФункции

#КонецОбласти

#КонецЕсли