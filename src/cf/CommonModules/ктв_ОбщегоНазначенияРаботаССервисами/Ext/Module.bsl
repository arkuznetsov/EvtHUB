
#Область ПодключениеКСервисам

// Функция - Возвращает настройки доступа к http/web-сервису
//
// Параметры:
//  Сервис_Адрес							- СправочникСсылка.		- Описание параметров доступа к http/web-сервису
//											  ктв_сб_АдресаСервисов
//	УстановленноеСоединение                 - WebПрокси		  		- Полученный ранее объект соединения с web-сервисом для повторного использования
//	УстановленноеСоединение_Использование	- Булево				- Флаг необходимости повторного использования объекта соединения с web-сервисом 
// 
// Возвращаемое значение:
// 	Структура					- Структура настроек подключения к сервису, в т.ч.:
//		Сервис_ТипСервиса						- ПеречислениеСсылка.	- Тип сервиса SOAP/HTTP
//												  ктв_сб_ТипСервиса
//		Сервис_Сервер							- Строка			- Адрес сервера http-сервиса
//		Сервис_АдресРесурса						- Строка			- Адрес ресурса http/web-сервиса
//		Сервис_ПространствоИмен					- Строка			- Пространство имен web-сервиса
//		Сервис_ИмяСервиса						- Строка			- Имя web-сервиса
//		Сервис_ИмяТочкиПодключения				- Строка			- Имя точки подключения web-сервиса
//		Сервис_Пользователь						- Строка			- Имя пользователя сервиса
//		Сервис_Пароль							- Строка			- Пароль пользователя сервиса
//		УстановленноеСоединение                 - WebПрокси		    - Полученный ранее объект соединения с web-сервисом для повторного использования
//		УстановленноеСоединение_Использование	- Булево			- Флаг необходимости повторного использования объекта соединения с web-сервисом 
//
Функция ПолучитьНастройкиСоединения(Сервис_Адрес, УстановленноеСоединение_Использование = Ложь, УстановленноеСоединение = Неопределено) Экспорт
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("Сервис_ТипСервиса"						, Сервис_Адрес.ТипСервиса);
	СтруктураНастроек.Вставить("Сервис_Сервер"							, Сервис_Адрес.Сервер);
	СтруктураНастроек.Вставить("Сервис_АдресРесурса"					, Сервис_Адрес.АдресРесурса);
	СтруктураНастроек.Вставить("Сервис_ПространствоИмен"				, Сервис_Адрес.ПространствоИмен);
	СтруктураНастроек.Вставить("Сервис_ИмяСервиса"						, Сервис_Адрес.ИмяСервиса);
	СтруктураНастроек.Вставить("Сервис_ИмяТочкиПодключения"				, Сервис_Адрес.ИмяТочкиПодключения);
	СтруктураНастроек.Вставить("Сервис_Пользователь"					, Сервис_Адрес.Пользователь);
	СтруктураНастроек.Вставить("Сервис_Пароль"							, Сервис_Адрес.Пароль);
	СтруктураНастроек.Вставить("УстановленноеСоединение_Использование"	, УстановленноеСоединение_Использование);
	СтруктураНастроек.Вставить("УстановленноеСоединение"				, УстановленноеСоединение);
	
	Возврат СтруктураНастроек;
	
КонецФункции //ПолучитьНастройкиСоединения()

// Функция - Получить соединение
//
// Параметры:
// 	СтруктураНастроек						- Структура			- Структура настроек подключения к http-сервису, в т.ч.:
//		Сервис_ТипСервиса						- ПеречислениеСсылка.	- Тип сервиса SOAP/HTTP
//												  ктв_сб_ТипСервиса
//		Сервис_Сервер							- Строка			- Адрес сервера http-сервиса
//		Сервис_АдресРесурса						- Строка			- Адрес ресурса http/web-сервиса
//		Сервис_ПространствоИмен					- Строка			- Пространство имен web-сервиса
//		Сервис_ИмяСервиса						- Строка			- Имя web-сервиса
//		Сервис_ИмяТочкиПодключения				- Строка			- Имя точки подключения web-сервиса
//		Сервис_Пользователь						- Строка			- Имя пользователя сервиса
//		Сервис_Пароль							- Строка			- Пароль пользователя сервиса
//		УстановленноеСоединение                 - WebПрокси		    - Полученный ранее объект соединения с web-сервисом для повторного использования
//		УстановленноеСоединение_Использование	- Булево			- Флаг необходимости повторного использования объекта соединения с web-сервисом 
// 
// Возвращаемое значение:
//  Структура - 
//		ТипСервиса						- ПеречислениеСсылка.			- Тип сервиса SOAP/HTTP
//										  ктв_сб_ТипСервиса
//		Соединение						- WSПрокси, HTTPСоединение		- Установленное соединение с web/http-сервисом
//
Функция ПолучитьСоединение(СтруктураНастроек) Экспорт
	
	ОписаниеСоединения = Новый Структура("ТипСервиса,
										 |Соединение",
										 СтруктураНастроек.Сервис_ТипСервиса,
										 Неопределено);
	
	СоздаватьПодключение = Ложь;
	
	Если СтруктураНастроек.УстановленноеСоединение_Использование Тогда
		Если ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.СОАП Тогда
			СоздаватьПодключение = НЕ (ТипЗнч(СтруктураНастроек.УстановленноеСоединение) = Тип("WSПрокси"));
		ИначеЕсли ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.ХТТП Тогда
			СоздаватьПодключение = НЕ (ТипЗнч(СтруктураНастроек.УстановленноеСоединение) = Тип("HTTPСоединение"));
		КонецЕсли;
	Иначе
		СоздаватьПодключение = Истина;
	КонецЕсли;
	
	Если СоздаватьПодключение Тогда
		
		Соединение = Неопределено;
		
		Если ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.СОАП Тогда
			//Создаем соединение с web-сервисом указанным в настройках
			МестоположениеWSDL = СтруктураНастроек.Сервис_АдресРесурса + "?wsdl";
		
			Попытка
			
				Определения = Новый WSОпределения(МестоположениеWSDL,
												  СтруктураНастроек.Сервис_Пользователь,
												  СтруктураНастроек.Сервис_Пароль);
				
				Соединение = Новый WSПрокси(Определения,
											СтруктураНастроек.Сервис_ПространствоИмен,
											СтруктураНастроек.Сервис_ИмяСервиса,
											СтруктураНастроек.Сервис_ИмяТочкиПодключения);
										
				Соединение.Пользователь	= СтруктураНастроек.Сервис_Пользователь;
				Соединение.Пароль		= СтруктураНастроек.Сервис_Пароль;
			
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		ИначеЕсли ОписаниеСоединения.ТипСервиса = Перечисления.ктв_сб_ТипСервиса.ХТТП Тогда
			
			//Подключаем http-сервис указанный в настройках подключения к базе
			Попытка
				Соединение = Новый HTTPСоединение(СтруктураНастроек.Сервис_Сервер, , СтруктураНастроек.Сервис_Пользователь, СтруктураНастроек.Сервис_Пароль);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		КонецЕсли;
		
		ОписаниеСоединения.Соединение = Соединение;
		
		Если СтруктураНастроек.УстановленноеСоединение_Использование Тогда
			СтруктураНастроек.Вставить("УстановленноеСоединение", Соединение);
		КонецЕсли;
			
	Иначе
		ОписаниеСоединения.Соединение = СтруктураНастроек.УстановленноеСоединение;
	КонецЕсли;
	
	Возврат ОписаниеСоединения;
	
КонецФункции

Функция ПолучитьРезультатОбработкиХТТПСервиса(Соединение, СтрокаЗапроса, ПараметрыЗапроса = Неопределено, ДанныеОтвета = Неопределено, ТекстОшибки = "") Экспорт
	
	ЗаписьПараметрыЗапроса = Новый ЗаписьJSON();
	ЗаписьПараметрыЗапроса.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(ЗаписьПараметрыЗапроса, ПараметрыЗапроса, НастройкиСериализации); //СписокПолныхИменОбъектов, НастройкиСериализации);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрыЗапросаДляОтправки = ЗаписьПараметрыЗапроса.Закрыть();
	
	ЗапросКСервису = Новый HTTPЗапрос(СтрокаЗапроса); //СтруктураНастроек.Сервис_АдресРесурса + "/CheckMetadataObjectsExistance");
	ЗапросКСервису.Заголовки.Вставить("Content-Type", "application/text; charset=utf-8");
	ЗапросКСервису.УстановитьТелоИзСтроки(ПараметрыЗапросаДляОтправки);
		
	ТекстОтвета = "";
		
	Попытка
		ОтветСервиса = Соединение.ОтправитьДляОбработки(ЗапросКСервису);
		ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
		
	Если НЕ ОтветСервиса.КодСостояния = 200 Тогда
		ТекстОшибки = СокрЛП(ОтветСервиса.КодСостояния) + ": <" + ТекстОтвета + ">";
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОтвета) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЧтениеДанныхОтвета = Новый ЧтениеJSON();
	ЧтениеДанныхОтвета.УстановитьСтроку(ТекстОтвета);
		
	СвойстваСоЗначениемДата = Новый Массив();
	//СвойстваСоЗначениемДата.Добавить("Дата");
		
	Попытка
		ДанныеОтвета = ПрочитатьJSON(ЧтениеДанныхОтвета, Ложь, СвойстваСоЗначениемДата, ФорматДатыJSON.ISO);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции //ПолучитьРезультатОбработкиХТТПСервиса()

Функция ПолучитьОтветХТТПСервиса(Соединение, СтрокаЗапроса, ДанныеОтвета = Неопределено, ТекстОшибки = "") Экспорт
	
	ЗапросКСервису = Новый HTTPЗапрос(СтрокаЗапроса);
	ЗапросКСервису.Заголовки.Вставить("Content-Type", "application/text; charset=utf-8");
		
	ТекстОтвета = "";
		
	Попытка
		ОтветСервиса = Соединение.Получить(ЗапросКСервису);
		ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
		
	Если НЕ ОтветСервиса.КодСостояния = 200 Тогда
		ТекстОшибки = СокрЛП(ОтветСервиса.КодСостояния) + ": <" + ТекстОтвета + ">";
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеДанныхОтвета = Новый ЧтениеJSON();
	ЧтениеДанныхОтвета.УстановитьСтроку(ТекстОтвета);
		
	СвойстваСоЗначениемДата = Новый Массив();
	//СвойстваСоЗначениемДата.Добавить("Дата");
		
	Попытка
		ДанныеОтвета = ПрочитатьJSON(ЧтениеДанныхОтвета, Ложь, СвойстваСоЗначениемДата, ФорматДатыJSON.ISO);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

#КонецОбласти
