
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБМЕНА ДАННЫМИ С ВНЕШНИМИ ИБ
//
#Область СлужебныеПроцедуры

//Функция - Преобразует таблицу значений в массив структур
//
// Параметры:
//  ТЗ						 - ТаблицаЗначений	 - Таблица значений для преобразования
// 
// Возвращаемое значение:
//  Массив(Структура) - Результат преобразования
//
Функция ТаблицуВМассивСтруктур(ТЗ) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		НоваяСтрока = Новый Структура();
		
		Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
			НоваяСтрока.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ТаблицуВМассивСтруктур()

//Функция - преобразует массив структур в таблицу значений
//
// Параметры:
//  МС						 - Массив(Структура)	 - Массив структур для преобразования
//  УстанавливатьТипыКолонок - Булево				 - Истина - Будут проверены типы всех значений в МС
//														и установлен тип значений колонок результирующей таблицы,
//													   ложь - колонки результирующей таблицы будут созданы без указания типа
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Результат преобразования
//
Функция ТаблицаИзМассиваСтруктур(МС, УстанавливатьТипыКолонок = Истина) Экспорт
	
	Результат = Новый ТаблицаЗначений();
	
	Если НЕ ТипЗнч(МС) = Тип("Массив") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если МС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(МС[0]) = Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Колонки = Новый Структура();
	
	Если УстанавливатьТипыКолонок Тогда
		Для Каждого ТекЭлемент Из МС Цикл
			Если НЕ ТипЗнч(ТекЭлемент) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ТекКолонка Из ТекЭлемент Цикл
				Если Колонки.Свойство(ТекКолонка.Ключ) Тогда
					Если Колонки[ТекКолонка.Ключ].Найти(ТипЗнч(ТекКолонка.Значение)) = 0 Тогда
						Колонки[ТекКолонка.Ключ].Добавить(ТипЗнч(ТекКолонка.Значение));
					КонецЕсли;
				Иначе
					МассивТипов = Новый Массив();
					МассивТипов.Добавить(ТипЗнч(ТекКолонка.Значение));
					Колонки.Вставить(ТекКолонка.Ключ, Новый Массив());
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекКолонка Из МС[0] Цикл
			Колонки.Вставить(ТекКолонка.Ключ, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекКолонка Из Колонки Цикл
		Если УстанавливатьТипыКолонок Тогда
			Результат.Колонки.Добавить(ТекКолонка.Ключ, Новый ОписаниеТипов(ТекКолонка.Значение, , Новый КвалификаторыСтроки(255)));
		Иначе
			Результат.Колонки.Добавить(ТекКолонка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МС Цикл
		Если НЕ ТипЗнч(ТекЭлемент) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ТаблицаИзМассиваСтруктур()

//Функция - Рекурсивно преобразовывает переданное значение в соответствии с разрешенными для JSON типами
//
// Параметры:
//  Значение - Произвольный	 - Исходное значение
// 
// Возвращаемое значение:
//   Строка, Число, Дата, Булево, Массив, Структура, Соответствие - Результат преобразования
//
Функция ПреобразоватьЗначениеДляJSON(Знач Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка")
	 ИЛИ ТипЗнч(Значение) = Тип("Число")
	 ИЛИ ТипЗнч(Значение) = Тип("Булево")
	 ИЛИ ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		ВремМассив = Новый Массив();
		Для Каждого ТекЗначение Из Значение Цикл
			ВремМассив.Добавить(ктв_ОбщегоНазначенияПреобразованиеЗначений.ПреобразоватьЗначениеДляJSON(ТекЗначение));
		КонецЦикла;
		Возврат ВремМассив;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура") Тогда
		ВремСтруктура = Новый Структура();
		Для Каждого ТекЭлемент Из Значение Цикл
			ВремСтруктура.Вставить(ТекЭлемент.Ключ, ктв_ОбщегоНазначенияПреобразованиеЗначений.ПреобразоватьЗначениеДляJSON(ТекЭлемент.Значение));
		КонецЦикла;
		Возврат ВремСтруктура;
	ИначеЕсли ТипЗнч(Значение) = Тип("Соответствие")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированноеСоответствие") Тогда
		ВремСоответствие = Новый Соответствие();
		Для Каждого ТекЭлемент Из Значение Цикл
			ВремКлюч = ?(ТипЗнч(ТекЭлемент.Ключ) = Тип("Строка"), ТекЭлемент.Ключ, СокрЛП(ТекЭлемент.Ключ));
			Попытка
				ВремСоответствие.Вставить(ВремКлюч, ктв_ОбщегоНазначенияПреобразованиеЗначений.ПреобразоватьЗначениеДляJSON(ТекЭлемент.Значение));
			Исключение
			КонецПопытки;
		КонецЦикла;
		Возврат ВремСоответствие;
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ВремМассив = Новый Массив();
		Для Каждого ТекЭлемент Из Значение Цикл
			ВремЭлемент = Новый Структура("Значение, Представление, Пометка, Картинка"
										, ктв_ОбщегоНазначенияПреобразованиеЗначений.ПреобразоватьЗначениеДляJSON(ТекЭлемент.Значение)
										, ТекЭлемент.Представление
										, ТекЭлемент.Пометка
										, "");
			ВремМассив.Добавить(ВремЭлемент);
		КонецЦикла;
		Возврат ВремМассив;
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		ВремМассив = Новый Массив();
		Для Каждого ТекЭлемент Из Значение Цикл
			Для Каждого ТекКолонка Из Значение.Колонки Цикл
				ВремЭлемент = Новый Структура();
				ВремЭлемент.Вставить(ТекКолонка.Имя, ктв_ОбщегоНазначенияПреобразованиеЗначений.ПреобразоватьЗначениеДляJSON(ТекЭлемент[ТекКолонка.Имя]));
			КонецЦикла;
			ВремМассив.Добавить(ВремЭлемент);
		КонецЦикла;
		Возврат ВремМассив;
	Иначе
		ПолноеИмя = "";
		ВремЗначение = СокрЛП(Значение);
		МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
		Если НЕ МетаОбъект = Неопределено Тогда
			ПолноеИмя = МетаОбъект.ПолноеИмя();
		КонецЕсли;
		Если Лев(ПолноеИмя, 10) = "Справочник" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |ИмяПредопределенныхДанных,
										   |Ид,
										   |Код,
										   |Наименование,
										   |Представление,
										   |ПометкаУдаления"
										 , "Справочник"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , Справочники[Сред(ПолноеИмя, 12)].ПолучитьИмяПредопределенного(Значение.Ссылка) //Значение.ИмяПредопределенныхДанных
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаКода = 0, "", Значение.Код)
										 , ?(МетаОбъект.ДлинаНаименования = 0, "", Значение.Наименование)
										 , СокрЛП(Значение)
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 22) = "ПланВидовХарактеристик" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |ИмяПредопределенныхДанных,
										   |Ид,
										   |Код,
										   |Наименование,
										   |Представление,
										   |ПометкаУдаления"
										 , "ПланВидовХарактеристик"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , ПланыВидовХарактеристик[Сред(ПолноеИмя, 24)].ПолучитьИмяПредопределенного(Значение.Ссылка) //Значение.ИмяПредопределенныхДанных
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаКода = 0, "", Значение.Код)
										 , ?(МетаОбъект.ДлинаНаименования = 0, "", Значение.Наименование)
										 , СокрЛП(Значение)
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 10) = "ПланСчетов" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |ИмяПредопределенныхДанных,
										   |Ид,
										   |Код,
										   |Наименование,
										   |Представление,
										   |ПометкаУдаления"
										 , "ПланСчетов"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , ПланыСчетов[Сред(ПолноеИмя, 12)].ПолучитьИмяПредопределенного(Значение.Ссылка) //Значение.ИмяПредопределенныхДанных
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаКода = 0, "", Значение.Код)
										 , ?(МетаОбъект.ДлинаНаименования = 0, "", Значение.Наименование)
										 , СокрЛП(Значение)
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 16) = "ПланВидовРасчета" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |ИмяПредопределенныхДанных,
										   |Ид,
										   |Код,
										   |Наименование,
										   |Представление,
										   |ПометкаУдаления"
										 , "ПланВидовРасчета"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , ПланыВидовРасчета[Сред(ПолноеИмя, 18)].ПолучитьИмяПредопределенного(Значение.Ссылка) //Значение.ИмяПредопределенныхДанных
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаКода = 0, "", Значение.Код)
										 , ?(МетаОбъект.ДлинаНаименования = 0, "", Значение.Наименование)
										 , СокрЛП(Значение)
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 10) = "ПланОбмена" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |ЭтотУзел,
										   |Ид,
										   |Код,
										   |Наименование,
										   |Представление,
										   |ПометкаУдаления"
										 , "ПланОбмена"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , (Значение = ПланыОбмена[Сред(ПолноеИмя, 12)].ЭтотУзел())
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаКода = 0, "", Значение.Код)
										 , ?(МетаОбъект.ДлинаНаименования = 0, "", Значение.Наименование)
										 , СокрЛП(Значение)
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 12) = "Перечисление" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |Значение,
										   |Представление"
										 , "Перечисление"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , Перечисления[МетаОбъект.Имя].Индекс(Значение)
										 , СокрЛП(Значение));
		ИначеЕсли Лев(ПолноеИмя, 8) = "Документ" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |Ид,
										   |Номер,
										   |Дата,
										   |Представление,
										   |ПометкаУдаления"
										 , "Документ"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаНомера = 0, "", Значение.Номер)
										 , Значение.Дата
										 , СокрЛП(Значение)
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 13) = "БизнесПроцесс" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |Ид,
										   |Номер,
										   |Дата,
										   |Представление,
										   |Стартован,
										   |Завершен,
										   |ПометкаУдаления"
										 , "Документ"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаНомера = 0, "", Значение.Номер)
										 , Значение.Дата
										 , СокрЛП(Значение)
										 , Значение.Стартован
										 , Значение.Завершен
										 , Значение.ПометкаУдаления);
		ИначеЕсли Лев(ПолноеИмя, 6) = "Задача" Тогда
			ВремЗначение = Новый Структура("Вид,
										   |Имя,
										   |ПолноеИмя,
										   |Ид,
										   |Номер,
										   |Дата,
										   |Наименование,
										   |Представление,
										   |Выполнена,
										   |ПометкаУдаления"
										 , "Документ"
										 , МетаОбъект.Имя
										 , ПолноеИмя
										 , СокрЛП(Значение.Ссылка.УникальныйИдентификатор())
										 , ?(МетаОбъект.ДлинаНомера = 0, "", Значение.Номер)
										 , Значение.Дата
										 , ?(МетаОбъект.ДлинаНаименования = 0, "", Значение.Наименование)
										 , СокрЛП(Значение)
										 , Значение.Выполнена
										 , Значение.ПометкаУдаления);
		КонецЕсли;
									 
		Возврат ВремЗначение;
		
	КонецЕсли;
	
	Возврат СокрЛП(Значение);
	
КонецФункции //ПреобразоватьЗначениеДляJSON()

//Функция - Возвращает HTTP-ответ, включающий переданные данные, преобразованные в JSON
//
// Параметры:
//  ДанныеОтвета		- Произвольный		- данные, которые необходимо включить в HTTP-ответ 
// 
// Возвращаемое значение:
//   HTTPСервисОтвет - HTTP-ответ, включающий переданные данные, преобразованные в JSON
//
Функция СформироватьОтветJSON(ДанныеОтвета) Экспорт
	
	ЗаписьДанныхОтвета = Новый ЗаписьJSON();
	ЗаписьДанныхОтвета.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьДанныхОтвета, ДанныеОтвета, НастройкиСериализации);
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(ЗаписьДанныхОтвета.Закрыть());
	
	Возврат Ответ;
	
КонецФункции //СформироватьОтветJSON()

#КонецОбласти
