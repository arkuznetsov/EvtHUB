
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Запрос_Текст", Запрос_Текст);
	
	Если Параметры.Свойство("Запрос_Параметры") Тогда
		ЗаполнитьТаблицуИзМассиваСтруктур("Запрос_Параметры", Параметры.Запрос_Параметры)
	КонецЕсли;
	
	Если Параметры.Свойство("ПроизвольныеВыражения") Тогда
		ЗаполнитьТаблицуИзМассиваСтруктур("ПроизвольныеВыражения", Параметры.ПроизвольныеВыражения)
	КонецЕсли;
	
КонецПроцедуры //ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - Обработчик события "ПриИзменении" поля "Запрос_Текст" формы
//
&НаКлиенте
Процедура Запрос_ТекстПриИзменении(Элемент)
	
	Запрос_ОбновитьПараметрыНаСервере();
	
КонецПроцедуры //Запрос_ТекстПриИзменении()

// Процедура - Обработчик события "ПриНачалеРедактирования" таблицы "Запрос_Параметры" формы
//
&НаКлиенте
Процедура Запрос_ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПривестиТипЗначенияПараметра(Элементы.Запрос_Параметры.ТекущиеДанные);
	
КонецПроцедуры //Запрос_ПараметрыПриНачалеРедактирования()

// Процедура - Обработчик события "ПриИзменении" поля "Запрос_ПараметрыПараметр_СпособЗаполнения" формы
//
&НаКлиенте
Процедура Запрос_ПараметрыПараметр_СпособЗаполненияПриИзменении(Элемент)
	
	ПривестиТипЗначенияПараметра(Элементы.Запрос_Параметры.ТекущиеДанные);
	
КонецПроцедуры //Запрос_ПараметрыПараметр_СпособЗаполненияПриИзменении()

// Процедура - Обработчик события "ПриАктивизацииСтрок" поля "НастройкаСоединения" формы
//
&НаКлиенте
Процедура ПроизвольныеВыраженияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроизвольныеВыражения_ТекущаяСтрока = Элементы.ПроизвольныеВыражения.ТекущаяСтрока
	   И ТипЗнч(ПроизвольныеВыражения_ТекущаяСтрока)= Тип("Число")
	   И ПроизвольныеВыражения_ТекущаяСтрока < ПроизвольныеВыражения.Количество() Тогда
		ПредыдущаяСтрока = ПроизвольныеВыражения.Получить(ПроизвольныеВыражения_ТекущаяСтрока);
		ПредыдущаяСтрока.Код = ПроизвольныеВыражения_Код;
	КонецЕсли;
	
	ПроизвольныеВыражения_Код = ТекущиеДанные.Код;
	
	ПроизвольныеВыражения_ТекущаяСтрока = Элементы.ПроизвольныеВыражения.ТекущаяСтрока;
	
КонецПроцедуры //ПроизвольныеВыраженияПриАктивизацииСтроки()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - Обработчик команды "Запрос_ОткрытьКонструктор"
//
&НаКлиенте
Процедура Запрос_ОткрытьКонструктор(Команда)
	
	Попытка
		Конструктор = Новый КонструкторЗапроса(Запрос_Текст);
	Исключение
		Конструктор = Новый КонструкторЗапроса();
	КонецПопытки;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Запрос_ОткрытьКонструкторОкончание", ЭтаФорма);
	
	Конструктор.Показать(ОповещениеОЗакрытии);
	
КонецПроцедуры //Запрос_ОткрытьКонструктор()

// Процедура - Продолжение обработчика команды "Запрос_ОткрытьКонструктор"
//				после закрытия конструктора запросов
//
// Параметры:
//  Текст						 - Строка		 - Текст запроса
//  ДополнительныеПараметры		 - Структура	 - Параметры переданные из команды "Запрос_ОткрытьКонструктор"
//
&НаКлиенте
Процедура Запрос_ОткрытьКонструкторОкончание(Текст, ДополнительныеПараметры) Экспорт
	
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос_Текст = Текст;
	
	Запрос_ОбновитьПараметрыНаСервере();
	
КонецПроцедуры //Запрос_ОткрытьКонструкторОкончание()

// Процедура - Обработчик команды "Запрос_ОбновитьПараметры"
//
&НаКлиенте
Процедура Запрос_ОбновитьПараметры(Команда)
	
	Запрос_ОбновитьПараметрыНаСервере();
	
КонецПроцедуры //Запрос_ОбновитьПараметры()

// Процедура - Обновляет параметры запроса из текста запроса
//
&НаСервере
Процедура Запрос_ОбновитьПараметрыНаСервере()
	
	Если ПустаяСтрока(Запрос_Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Схема = Новый СхемаЗапроса();
	Попытка
		Схема.УстановитьТекстЗапроса(Запрос_Текст);
	Исключение
		Возврат;
	КонецПопытки;
	
	НайденныеПараметры = Схема.НайтиПараметры();
	
	Для Каждого ТекПараметр Из НайденныеПараметры Цикл
		
		СтрокиПараметров = Запрос_Параметры.НайтиСтроки(Новый Структура("Параметр_Имя", ТекПараметр.Имя));
		
		Если СтрокиПараметров.Количество() = 0 Тогда
			СтрокаПараметра = Запрос_Параметры.Добавить();
			СтрокаПараметра.Параметр_Имя				= ТекПараметр.Имя;
			СтрокаПараметра.Параметр_СпособЗаполнения	= "Значение";
		Иначе
			СтрокаПараметра = СтрокиПараметров[0];
		КонецЕсли;
		
		СтрокаПараметра.Параметр_Тип = ТекПараметр.ТипЗначения;
		
		Если ВРег(СтрокаПараметра.Параметр_СпособЗаполнения) = ВРег("Значение") Тогда
			СтрокаПараметра.Параметр_Значение = СтрокаПараметра.Параметр_Тип.ПривестиЗначение(СтрокаПараметра.Параметр_Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //Запрос_ОбновитьПараметрыНаСервере()

// Процедура - Обработчик команды "Запрос_УдалитьНеиспользуемыеПараметры"
//
&НаКлиенте
Процедура Запрос_УдалитьНеиспользуемыеПараметры(Команда)
	
	Запрос_УдалитьНеиспользуемыеПараметрыНаСервере();
	
КонецПроцедуры //Запрос_УдалитьНеиспользуемыеПараметры()

// Процедура - Удаляет параметры, отсутствующие в тексте запроса
//
&НаСервере
Процедура Запрос_УдалитьНеиспользуемыеПараметрыНаСервере()
	
	Если ПустаяСтрока(Запрос_Текст) Тогда
		Запрос_Параметры.Очистить();
		Возврат;
	КонецЕсли;
	
	Схема = Новый СхемаЗапроса();
	Попытка
		Схема.УстановитьТекстЗапроса(Запрос_Текст);
	Исключение
		Возврат;
	КонецПопытки;
	
	НайденныеПараметры = Схема.НайтиПараметры();
	
	УдаляемыеПараметры = Новый Массив();
	
	Для Каждого ТекСтрокаПараметра Из Запрос_Параметры Цикл
		
		Если НЕ НайденныеПараметры.Найти(ТекСтрокаПараметра.Параметр_Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УдаляемыеПараметры.Добавить(ТекСтрокаПараметра);
	КонецЦикла;
	
	Для Каждого ТекСтрокаПараметра Из УдаляемыеПараметры Цикл
		Запрос_Параметры.Удалить(ТекСтрокаПараметра);
	КонецЦикла;
		
КонецПроцедуры //Запрос_УдалитьНеиспользуемыеПараметрыНаСервере()

// Процедура - Обработчик команды "ПроизвольныеВыражения_Сохранить"
//
&НаКлиенте
Процедура ПроизвольныеВыражения_Сохранить(Команда)
	
	ТекущиеДанные = Элементы.ПроизвольныеВыражения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Код = ПроизвольныеВыражения_Код;
	
КонецПроцедуры //ПроизвольныеВыражения_Сохранить()

// Процедура - Обработчик команды "СохранитьНастройкиИЗакрыть"
//
&НаКлиенте
Процедура СохранитьНастройкиИЗакрыть(Команда)
	
	Оповестить("ИзмененыНастройки", ЭтаФорма.ВладелецФормы, ЭтаФорма);

	Закрыть("ИзмененыНастройки");
	
КонецПроцедуры //СохранитьНастройкиИЗакрыть()
	
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Возвращает список колонок запроса
// 
// Возвращаемое значение:
//		Массив (Структура) - Список колонок запроса и их типов
//			Имя					- Строка				- Имя колонки запроса
//			ТипЗначения			- ОписаниеТипов			- Тип колонки запроса
//
&НаКлиенте
Функция ПолучитьКолонкиЗапроса() Экспорт
	
	Возврат ПолучитьКолонкиЗапросаНаСервере();
	
КонецФункции //ПолучитьКолонкиЗапроса()

// Функция - Возвращает список колонок запроса
// 
// Возвращаемое значение:
//		Массив (Структура) - Список колонок запроса и их типов
//			Имя					 - Строка				 - Имя колонки запроса
//			ТипЗначения			 - ОписаниеТипов		 - Тип колонки запроса
//
&НаСервере
Функция ПолучитьКолонкиЗапросаНаСервере()
	
	КолонкиЗапроса = Новый Массив();
	
	Схема = Новый СхемаЗапроса();
	Попытка
		Схема.УстановитьТекстЗапроса(Запрос_Текст);
	Исключение
		Возврат КолонкиЗапроса;
	КонецПопытки;
	
	й = Схема.ПакетЗапросов.Количество() - 1;
	
	Пока й >= 0 Цикл
		
		ТекЗапрос = Схема.ПакетЗапросов.Получить(й);
		
		Если НЕ ТипЗнч(ТекЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			й = й - 1;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекЗапрос.ТаблицаДляПомещения) Тогда
			й = й - 1;
			Продолжить;
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Если НЕ ТипЗнч(ТекЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		Возврат КолонкиЗапроса;
	КонецЕсли;
	
	Для Каждого ТекКолонка Из ТекЗапрос.Колонки Цикл
		
		КолонкиЗапроса.Добавить(Новый Структура("Имя, ТипЗначения", ТекКолонка.Псевдоним, ТекКолонка.ТипЗначения));
		
	КонецЦикла;
	
	Возврат КолонкиЗапроса;
	
КонецФункции //ПолучитьКолонкиЗапросаНаСервере()

// Функция - Возвращает тест запроса, таблицы параметров и произвольных выражений
// 
// Возвращаемое значение:
//		Структура		- Текст запроса, таблицы параметров и произвольных выражений
//			Запрос_Текст			 - Строка				 - Текст запроса
//			Запрос_Параметры		 - Массив (Структура)	 - Параметры запроса
//			ПроизвольныеВыражения	 - Массив (Структура)	 - Произвольные выражения
//
&НаКлиенте
Функция ПолучитьЗапросСПараметрами() Экспорт
	
	Возврат ПолучитьЗапросСПараметрамиНаСервере();
	
КонецФункции //ПолучитьЗапросСПараметрами()

// Функция - Возвращает тест запроса, таблицы параметров и произвольных выражений
// 
// Возвращаемое значение:
//		Структура		- Текст запроса, таблицы параметров и произвольных выражений
//			Запрос_Текст			 - Строка				 - Текст запроса
//			Запрос_Параметры		 - Массив (Структура)	 - Параметры запроса
//			ПроизвольныеВыражения	 - Массив (Структура)	 - Произвольные выражения
//
&НаСервере
Функция ПолучитьЗапросСПараметрамиНаСервере()
	
	Возврат Новый Структура("Запрос_Текст, Запрос_Параметры, ПроизвольныеВыражения",
							Запрос_Текст,
							ТаблицуВМассивСтруктур(Запрос_Параметры.Выгрузить()),
							ТаблицуВМассивСтруктур(ПроизвольныеВыражения.Выгрузить()));
	
КонецФункции //ПолучитьЗапросСПараметрамиНаСервере()

// Функция - Устанавливает значения реквизитов формы из переданных настроек
//
// Параметры:
//	Настройки						 - Структура		- Текст запроса, таблицы параметров и произвольных выражений
//			Запрос_Текст			 - Строка				 - Текст запроса
//			Запрос_Параметры		 - Массив (Структура)	 - Параметры запроса
//			ПроизвольныеВыражения	 - Массив (Структура)	 - Произвольные выражения
// 
&НаКлиенте
Процедура УстановитьЗапросСПараметрами(Настройки) Экспорт
	
	УстановитьЗапросСПараметрамиНаСервере(Настройки);
	
КонецПроцедуры //УстановитьЗапросСПараметрами()

// Функция - Устанавливает значения реквизитов формы из переданных настроек
//
// Параметры:
//	Настройки						 - Структура		- Текст запроса, таблицы параметров и произвольных выражений
//			Запрос_Текст			 - Строка				 - Текст запроса
//			Запрос_Параметры		 - Массив (Структура)	 - Параметры запроса
//			ПроизвольныеВыражения	 - Массив (Структура)	 - Произвольные выражения
// 
&НаСервере
Процедура УстановитьЗапросСПараметрамиНаСервере(Настройки)
	
	Если Настройки.Свойство("Запрос_Текст") Тогда
		Запрос_Текст = Настройки.Запрос_Текст;
	КонецЕсли;
			
	Если Настройки.Свойство("Запрос_Параметры") Тогда
		ЗаполнитьТаблицуИзМассиваСтруктур("Запрос_Параметры", Настройки.Запрос_Параметры)
	КонецЕсли;
	
	Если Настройки.Свойство("ПроизвольныеВыражения") Тогда
		ЗаполнитьТаблицуИзМассиваСтруктур("ПроизвольныеВыражения", Настройки.ПроизвольныеВыражения)
	КонецЕсли;
	
КонецПроцедуры //УстановитьЗапросСПараметрамиНаСервере()

#КонецОбласти

#Область СлужебныеПроцедуры

// Процедура - Устанавливает тип значения параметра запроса, режим выбора из списка и список доступных значений
//
// Параметры:
//  ТекущиеДанные				 - ДанныеФормыЭлементКоллекции		 - Редактируемая строка параметров запроса
//
&НаКлиенте
Процедура ПривестиТипЗначенияПараметра(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Запрос_ПараметрыПараметр_Значение.ВыбиратьТип = НЕ (ТекущиеДанные.Параметр_Тип.Типы().Количество() = 1) И ТекущиеДанные.Параметр_СпособЗаполнения = 0;
	
	Если ВРег(ТекущиеДанные.Параметр_СпособЗаполнения) = ВРег("Список") Тогда
		
		Элементы.Запрос_ПараметрыПараметр_Значение.РежимВыбораИзСписка = Ложь;
		
		ОписаниеСписка = Новый ОписаниеТипов("СписокЗначений");
	
		ТекущиеДанные.Параметр_Значение = ОписаниеСписка.ПривестиЗначение(ТекущиеДанные.Параметр_Значение);
		ТекущиеДанные.Параметр_Значение.ТипЗначения = ТекущиеДанные.Параметр_Тип;
		
	ИначеЕсли ВРег(ТекущиеДанные.Параметр_СпособЗаполнения) = ВРег("Выражение") Тогда
		
		Элементы.Запрос_ПараметрыПараметр_Значение.РежимВыбораИзСписка = Истина;
		Элементы.Запрос_ПараметрыПараметр_Значение.СписокВыбора.Очистить();
		
		ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	
		ТекущиеДанные.Параметр_Значение = ОписаниеСтроки.ПривестиЗначение(ТекущиеДанные.Параметр_Значение);
		
		Для Каждого ТекВыражение Из ПроизвольныеВыражения Цикл
			Элементы.Запрос_ПараметрыПараметр_Значение.СписокВыбора.Добавить(ТекВыражение.Имя);
		КонецЦикла;
		
	Иначе
		
		Элементы.Запрос_ПараметрыПараметр_Значение.РежимВыбораИзСписка = Ложь;
		
		ТекущиеДанные.Параметр_Значение = ТекущиеДанные.Параметр_Тип.ПривестиЗначение(ТекущиеДанные.Параметр_Значение);
		
	КонецЕсли;
	
КонецПроцедуры //ПривестиТипЗначенияПараметра()

//Функция - Преобразует таблицу значений в массив структур
//
// Параметры:
//  ТЗ						 - ТаблицаЗначений	 - Таблица значений для преобразования
// 
// Возвращаемое значение:
//  Массив(Структура) - Результат преобразования
//
&НаСервереБезКонтекста
Функция ТаблицуВМассивСтруктур(ТЗ) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		НоваяСтрока = Новый Структура();
		
		Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
			НоваяСтрока.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ТаблицуВМассивСтруктур()

//Функция - заполняет переданную таблицу из массива структур
//
// Параметры:
//  Таблица					 - ТаблицаЗначений,		 - Таблица для заполнения
//							   ДанныеФормыКоллекция
//  МС						 - Массив(Структура)	 - Массив структур для преобразования
// 
&НаСервере
Процедура ЗаполнитьТаблицуИзМассиваСтруктур(Знач Таблица, МС)
	
	Если НЕ ТипЗнч(МС) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если МС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(МС[0]) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Таблица) = Тип("Строка") Тогда
		Таблица = ЭтаФорма[Таблица];
	КонецЕсли;
	
	Таблица.Очистить();
	
	Для Каждого ТекЭлемент Из МС Цикл
		Если НЕ ТипЗнч(ТекЭлемент) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлемент);
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьТаблицуИзМассиваСтруктур()

#КонецОбласти
