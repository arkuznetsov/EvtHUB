&НаКлиенте
Перем ФормаРедактированияЗапроса Экспорт; //Хранит ссылку на форму редактора запросов

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОбработкаНастройкиАдресВХранилище") Тогда
		ОбработкаНастройкиАдресВХранилище = Параметры.ОбработкаНастройкиАдресВХранилище;
	
		Настройки = ПолучитьИзВременногоХранилища(ОбработкаНастройкиАдресВХранилище);
	
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			
			Настройки.Свойство("Домен"			, Домен);
			Настройки.Свойство("Пользователь"	, Пользователь);
			Настройки.Свойство("Пароль"			, Пароль);
			
			Попытка
				ЗаполнитьТаблицуИзМассиваСтруктур("ЗаполнениеПолей", Настройки.ЗаполнениеПолей);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ЗаполнениеПолейАтрибутАД.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокАтрибутовПользователейАД());
	Элементы.ЗаполнениеПолейАтрибутАД.СписокВыбора.СортироватьПоЗначению();
	
КонецПроцедуры //ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаРедактированияЗапроса();
	
	ОбновитьСписокКолонокЗапроса();
	
	ОбновитьСписокПроизвольныхВыражений();
	
КонецПроцедуры //ПриОткрытии()

// Процедура - Обработка оповещения
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНастройки" И Параметр = ЭтаФорма Тогда
		ОбновитьСписокКолонокЗапроса();
		ОбновитьСписокПроизвольныхВыражений();
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - Обработчик события "ПриНачалеРедактирования" таблицы "ЗаполнениеПолей" формы
//
&НаКлиенте
Процедура ЗаполнениеПолейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	
КонецПроцедуры //ЗаполнениеПолейПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - Обработчик команды "СохранитьНастройку"
//
&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	Настройка = ПодготовитьНастройкиДляСохранения(ФормаРедактированияЗапроса().ПолучитьЗапросСПараметрами(), Ложь);
	
	ПоместитьВоВременноеХранилище(Настройка, ОбработкаНастройкиАдресВХранилище);
	
	Оповестить("ИзмененыНастройки", ЭтаФорма.ВладелецФормы, ЭтаФорма);
	
КонецПроцедуры //СохранитьНастройку()

// Процедура - Обработчик команды "СохранитьНастройкуИЗакрыть"
//
&НаКлиенте
Процедура СохранитьНастройкуИЗакрыть(Команда)
	
	СохранитьНастройку(Команда);
	
	Закрыть("ИзмененыНастройки");
	
КонецПроцедуры //СохранитьНастройкуИЗакрыть()

// Процедура - Обработчик команды "РедактироватьЗапрос" - открывает редактор запроса
//
&НаКлиенте
Процедура РедактироватьЗапрос(Команда)
	
	ФормаРедактированияЗапроса.Открыть();
	
КонецПроцедуры //РедактироватьЗапрос()

// Процедура - Обработчик команды "ПоказатьТекстЗапросаАД" - показывает текст исполняемого запроса
//
&НаКлиенте
Процедура ПоказатьТекстЗапросаАД(Команда)
	
	НастройкиПолученияДанных = ФормаРедактированияЗапроса().ПолучитьЗапросСПараметрами();
	
	ТекстЗапроса = ПолучитьТекстЗапросаАДНаСервере(НастройкиПолученияДанных);
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ВремТекст = Новый ТекстовыйДокумент();
	ВремТекст.УстановитьТекст(ТекстЗапроса);
	ВремТекст.Показать("Текст запроса Active Directory");
	
КонецПроцедуры //ПоказатьТекстЗапросаАД()

// Процедура - Обработчик команды "СохранитьНастройкиВФайл"
//
&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр				= "Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";
	Диалог.Расширение			= "txt";
	Диалог.МножественныйВыбор	= Ложь;
	
	ОповещениеВыбораФайла = Новый ОписаниеОповещения("СохранитьНастройкиВФайлОбработка", ЭтаФорма);
	
	Диалог.Показать(ОповещениеВыбораФайла);
	
КонецПроцедуры //СохранитьНастройкиВФайл()

// Процедура - Продолжение обработчика команды "СохранитьНастройкиВФайл"
//				после выполнения выбора файла для сохранения
//
// Параметры:
//  ВыбранныеФайлы		 - Массив		 - Имена выбранных файлов
//  Параметры			 - Структура	 - Параметры переданные из команды "СохранитьНастройкиВФайл"
//
&НаКлиенте
Процедура СохранитьНастройкиВФайлОбработка(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ПодготовитьНастройкиДляСохранения(ФормаРедактированияЗапроса().ПолучитьЗапросСПараметрами(), Истина);
	
	ВремТекст = Новый ТекстовыйДокумент();
	ВремТекст.УстановитьТекст(ПолучитьТекстНастроекДляСохранения(Настройки));
	
	ВремТекст.Записать(ВыбранныеФайлы[0]);
	
КонецПроцедуры //СохранитьНастройкиВФайлОбработка()

// Процедура - Обработчик команды "ЗагрузитьНастройкиИзФайла"
//
&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр				= "Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";
	Диалог.Расширение			= "txt";
	Диалог.МножественныйВыбор	= Ложь;
	
	ОповещениеВыбораФайла = Новый ОписаниеОповещения("ЗагрузитьНастройкиИзФайлаОбработка", ЭтаФорма);
	
	Диалог.Показать(ОповещениеВыбораФайла);
	
КонецПроцедуры //ЗагрузитьНастройкиИзФайла()

// Процедура - Продолжение обработчика команды "ЗагрузитьНастройкиИзФайла"
//				после выполнения выбора файла для загрузки
//
// Параметры:
//  ВыбранныеФайлы		 - Массив		 - Имена выбранных файлов
//  Параметры			 - Структура	 - Параметры переданные из команды "ЗагрузитьНастройкиИзФайла"
//
&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайлаОбработка(ВыбранныеФайлы, Параметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремТекст = Новый ТекстовыйДокумент();
	ВремТекст.Прочитать(ВыбранныеФайлы[0]);
	
	Настройки = ПолучитьНастройкиИзТекста(ВремТекст.ПолучитьТекст());
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Настройки.Свойство("Домен"			, Домен);
		Настройки.Свойство("Пользователь"	, Пользователь);
		Настройки.Свойство("Пароль"			, Пароль);
			
		Попытка
			ЗаполнитьТаблицуИзМассиваСтруктур("ЗаполнениеПолей", Настройки.ЗаполнениеПолей);
		Исключение
		КонецПопытки;
		
		ФормаРедактированияЗапроса().УстановитьЗапросСПараметрами(Настройки);
			
	КонецЕсли;
	
КонецПроцедуры //ЗагрузитьНастройкиИзФайлаОбработка()

// Процедура - Обработчик команды "ВыгрузитьДанные"
//
&НаКлиенте
Процедура ОбновитьДанныеАД(Команда) Экспорт
	
	ТекстОшибки = "";
	
	НастройкиПолученияДанных = ФормаРедактированияЗапроса().ПолучитьЗапросСПараметрами();

	ОбновитьДанныеАДНаСервере(НастройкиПолученияДанных, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры //ОбновитьДанныеАД()

#КонецОбласти

#Область ПроцедурыПодготовкиЗаполненияПолей

// Процедура - Обновляет список колонок запроса для выбора
//
&НаКлиенте
Процедура ОбновитьСписокКолонокЗапроса()
	
	Элементы.ЗаполнениеПолейКолонкаЗапроса.СписокВыбора.Очистить();
	
	КолонкиЗапроса = ФормаРедактированияЗапроса().ПолучитьКолонкиЗапроса();
	
	Для Каждого ТекКолонка Из КолонкиЗапроса Цикл
		Элементы.ЗаполнениеПолейКолонкаЗапроса.СписокВыбора.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	
КонецПроцедуры //ОбновитьСписокКолонокЗапроса()

// Процедура - Обновляет список произвольных выражений
//
&НаКлиенте
Процедура ОбновитьСписокПроизвольныхВыражений()
	
	Элементы.ЗаполнениеПолейВыражение.СписокВыбора.Очистить();
	
	Выражения = ФормаРедактированияЗапроса().ПолучитьПроизвольныеВыражения();
	
	Для Каждого ТекВыражение Из Выражения Цикл
		Элементы.ЗаполнениеПолейВыражение.СписокВыбора.Добавить(ТекВыражение.Имя);
	КонецЦикла;
	
КонецПроцедуры //ОбновитьСписокПроизвольныхВыражений()

#КонецОбласти

#Область ПроцедурыОбработкиДанных

// Процедура - Выполняет поиск и изменение записей Active Directory
//
// Параметры:
//  НастройкиПолученияДанных			 - Структура				 - Настройки выполнения запроса к 1С
//  ТекстОшибки							 - Строка					 - Описание возникшей ошибки
//
&НаСервере
Процедура ОбновитьДанныеАДНаСервере(НастройкиПолученияДанных, ТекстОшибки = "")
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СоответствиеПолей = ТаблицуВМассивСтруктур(ЗаполнениеПолей.Выгрузить());
	
	ТекстОшибки = "";
	
	ПроцессорЗапросов = Обработки.ктв_сб_ПроцессорЗапросов.Создать();
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Источник", Неопределено);
	
	ОбработаноСтрокВсего = 0;
	
	Попытка
		РезультатЗапроса = ПроцессорЗапросов.ВыполнитьЗапрос(НастройкиПолученияДанных.Запрос_Текст
															, НастройкиПолученияДанных.Запрос_Параметры
															, 
															, НастройкиПолученияДанных.ПроизвольныеВыражения
															, ДопПараметры
															, Ложь
															, ТекстОшибки);
	Исключение
		ТекстОшибки = "Ошибка запроса 1С: ";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = "Ошибка запроса 1С: " + ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКВыгрузке = РезультатЗапроса.Выгрузить();
	
	ЗапросыАД = ОбработкаОбъект.ПодготовитьДанныеДляВыгрузки(ТаблицаКВыгрузке, СоответствиеПолей, НастройкиПолученияДанных.ПроизвольныеВыражения, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = "Ошибка подготовки запросов Active Directory: " + ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	Результат = ОбработкаОбъект.ОбработатьЗаписиАД(ЗапросыАД, Домен, Пользователь, Пароль, ТекстОшибки);
	
	Если НЕ Результат Тогда
		ТекстОшибки = "Ошибка обработки записей Active Directory: " + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры //ОбновитьДанныеАДНаСервере()

#КонецОбласти

#Область СлужебныеПроцедуры

// Функция - Получает список атрибутов пользователей Active Directory
// 
// Возвращаемое значение:
//   Массив (Строка)		- Массив имен атрибутов пользователей Active Directory
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокАтрибутовПользователейАД()
	
	Атрибуты = Новый Массив();
	Атрибуты.Добавить("ADsPath");
	Атрибуты.Добавить("sAMAccountName");
	Атрибуты.Добавить("userPrincipalName");
	Атрибуты.Добавить("displayName");
	Атрибуты.Добавить("distinguishedName");
	Атрибуты.Добавить("employeeID"); //Табельный номер
	Атрибуты.Добавить("manager"); //Руководитель
	Атрибуты.Добавить("department"); //Отдел
	Атрибуты.Добавить("title"); //Должность
	Атрибуты.Добавить("physicaldeliveryofficename"); //Адреса местонахождения
	Атрибуты.Добавить("mobile"); //Номер мобильного телефона
	Атрибуты.Добавить("telephoneNumber"); //Номер стационарного телефона+екстеншен
	Атрибуты.Добавить("profilePath");
	Атрибуты.Добавить("l");
	Атрибуты.Добавить("countryCode");
	Атрибуты.Добавить("co");
	Атрибуты.Добавить("c");
	Атрибуты.Добавить("st");
	Атрибуты.Добавить("streetAddress");
	Атрибуты.Добавить("postalCode");
	Атрибуты.Добавить("otherTelephone");
	Атрибуты.Добавить("facsimileTelephoneNumber");
	Атрибуты.Добавить("HomeDirectory");
	Атрибуты.Добавить("HomeDrive");
	Атрибуты.Добавить("scriptPath");
	Атрибуты.Добавить("msExchHomeServerName");
	Атрибуты.Добавить("msExchHideFromAddressLists");
	Атрибуты.Добавить("msExchIMPhysicalURL");
	Атрибуты.Добавить("description");
	Атрибуты.Добавить("company");

	Возврат Атрибуты;
	
КонецФункции //ПолучитьСписокАтрибутовПользователейАД()

// Функция - Получает форму редактирования запросов
// 
// Возвращаемое значение:
//		УправляемаяФорма - Форма редактирования запроса
//
&НаКлиенте
Функция ФормаРедактированияЗапроса() Экспорт
	
	Если ФормаРедактированияЗапроса = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Запрос_Текст, Запрос_Параметры, ПроизвольныеВыражения", "", Неопределено, Неопределено);
		
		Попытка
			Настройки = ПолучитьИзВременногоХранилища(ОбработкаНастройкиАдресВХранилище);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Настройки = Новый Структура();
		КонецПопытки;
		
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			
			Если Настройки.Свойство("Запрос_Текст") Тогда
				СтруктураПараметров.Запрос_Текст = Настройки.Запрос_Текст;
			КонецЕсли;
				
			Если Настройки.Свойство("Запрос_Параметры") Тогда
				СтруктураПараметров.Запрос_Параметры = Настройки.Запрос_Параметры;
			КонецЕсли;
			
			Если Настройки.Свойство("ПроизвольныеВыражения") Тогда
				СтруктураПараметров.ПроизвольныеВыражения = Настройки.ПроизвольныеВыражения;
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаРедактированияЗапроса = ПолучитьФорму("Обработка.ктв_сб_ПроцессорЗапросов.Форма.Форма", СтруктураПараметров, ЭтаФорма);
	КонецЕсли;
	
	Возврат ФормаРедактированияЗапроса;
	
КонецФункции //ФормаРедактированияЗапроса()

// Процедура - Подготавливает настройки обработки к сохранению
//
// Параметры:
//  ДополнительныеНастройки			 - Структура		 - Дополнительные настройки, которые необходимо сохранить
//  СохранениеВФайл					 - Булево			 - Истина - Настройки сохраняются в файл (не нужно сохранять настройки,
//															специфичные для ИБ); Ложь - настройки сохраняются в ИБ
//
&НаСервере
Функция ПодготовитьНастройкиДляСохранения(ДополнительныеНастройки = Неопределено, СохранениеВФайл = Ложь)
	
	Настройка = Новый Структура();
	Если НЕ СохранениеВФайл Тогда
		Настройка.Вставить("Домен"			, Домен);
		Настройка.Вставить("Пользователь"	, Пользователь);
		Настройка.Вставить("Пароль"			, Пароль);
	КонецЕсли;
	
	Настройка.Вставить("ЗаполнениеПолей"				, ТаблицуВМассивСтруктур(ЗаполнениеПолей.Выгрузить()));
	
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Структура") Тогда
		Для Каждого ТекНастройка Из ДополнительныеНастройки Цикл
			Настройка.Вставить(ТекНастройка.Ключ, ТекНастройка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции //ПодготовитьНастройкиДляСохранения()

// Функция - Преобразует настройки в текст на сервере
//
&НаСервереБезКонтекста
Функция ПолучитьТекстНастроекДляСохранения(Настройки)
	
	Возврат ЗначениеВСтрокуВнутр(Настройки);
	
КонецФункции //ПолучитьТекстНастроекДляСохранения()

// Функция - Преобразует текст в настройки на сервере
//
&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзТекста(ТекстНастроек)
	
	Возврат ЗначениеИзСтрокиВнутр(ТекстНастроек);
	
КонецФункции //ПолучитьНастройкиИзТекста()

//Функция - Преобразует реквизит типа "ТаблицаЗначений" в массив структур
//
// Параметры:
//  ТЗ						 - Строка	 - Путь к реквизиту
// 
// Возвращаемое значение:
//  Массив(Структура) - Результат преобразования
//
&НаСервере
Функция ТаблицуВМассивСтруктурНаСервере(ТЗ) Экспорт
	
	Таблица = Вычислить(ТЗ);
	
	Возврат ТаблицуВМассивСтруктур(Таблица.Выгрузить());
	
КонецФункции //ТаблицуВМассивСтруктурНаСервере()

//Функция - Преобразует таблицу значений в массив структур
//
// Параметры:
//  ТЗ						 - ТаблицаЗначений	 - Таблица значений для преобразования
// 
// Возвращаемое значение:
//  Массив(Структура) - Результат преобразования
//
&НаКлиентеНаСервереБезКонтекста
Функция ТаблицуВМассивСтруктур(ТЗ) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		
		НоваяСтрока = Новый Структура();
		
		Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
			НоваяСтрока.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции //ТаблицуВМассивСтруктур()

//Функция - заполняет переданную таблицу из массива структур
//
// Параметры:
//  Таблица					 - ТаблицаЗначений,		 - Таблица для заполнения
//							   ДанныеФормыКоллекция
//  МС						 - Массив(Структура)	 - Массив структур для преобразования
// 
&НаСервере
Процедура ЗаполнитьТаблицуИзМассиваСтруктур(Знач Таблица, МС)
	
	Если НЕ ТипЗнч(МС) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если МС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(МС[0]) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Таблица) = Тип("Строка") Тогда
		ТаблицаДляЗаполнения = РеквизитФормыВЗначение(Таблица);
	Иначе
		ТаблицаДляЗаполнения = Таблица;
	КонецЕсли;
	
	ТаблицаДляЗаполнения.Очистить();
	
	Для Каждого ТекЭлемент Из МС Цикл
		Если НЕ ТипЗнч(ТекЭлемент) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		Попытка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлемент);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЦикла;
	
	Если ТипЗнч(Таблица) = Тип("Строка") Тогда
		ЗначениеВРеквизитФормы(ТаблицаДляЗаполнения, Таблица);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьТаблицуИзМассиваСтруктур()

// Функция - Получает текст запроса Active Directory
//
// Параметры:
//  НастройкиПолученияДанных		- Структура			 - Настройки получения данных из формы редактирования запроса
// 
// Возвращаемое значение:
//   Строка	- Такст запроса Active Directory
//
&НаСервере
Функция ПолучитьТекстЗапросаАДНаСервере(НастройкиПолученияДанных)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СоответствиеКолонок = ТаблицуВМассивСтруктур(ЗаполнениеПолей.Выгрузить());
	
	ТекстОшибки = "";
	
	ПроцессорЗапросов = Обработки.ктв_сб_ПроцессорЗапросов.Создать();
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Источник", Неопределено);
	
	ОбработаноСтрокВсего = 0;
	
	Попытка
		РезультатЗапроса = ПроцессорЗапросов.ВыполнитьЗапрос(НастройкиПолученияДанных.Запрос_Текст
															, НастройкиПолученияДанных.Запрос_Параметры
															, 1
															, НастройкиПолученияДанных.ПроизвольныеВыражения
															, ДопПараметры
															, Ложь
															, ТекстОшибки);
	Исключение
		ТекстОшибки = "Ошибка запроса 1С: ";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = "Ошибка запроса 1С: " + ТекстОшибки;
		Сообщить(ТекстОшибки);
		Возврат "";
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = "Ошибка запроса 1С: получен пустой результат запроса" + ТекстОшибки;
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
	ТаблицаКВыгрузке = РезультатЗапроса.Выгрузить();
	
	ВсегоСтрок = ТаблицаКВыгрузке.Количество();
	ОбработаноСтрок = 0;
	
	Попытка
		ОшибкиПодготовкиДанных = "";
		ЗапросыАД = ОбработкаОбъект.ПодготовитьДанныеДляВыгрузки(ТаблицаКВыгрузке
															   , СоответствиеКолонок
															   , НастройкиПолученияДанных.ПроизвольныеВыражения
															   , ОшибкиПодготовкиДанных);
		
	Исключение
		ТекстОшибки = "Ошибка подготовки запросов к Active Directory: ";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(ТекстОшибки);
		Возврат "";
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ОшибкиПодготовкиДанных) Тогда
		ТекстОшибки = "Ошибка подготовки запросов к Active Directory: ";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкиПодготовкиДанных;
		Сообщить(ТекстОшибки);
		Возврат "";
	КонецЕсли;
		
	Возврат ?(ВсегоСтрок = 0, "", ЗапросыАД[0].Запрос);
	
КонецФункции //ПолучитьТекстЗапросаАДНаСервере()

#КонецОбласти
