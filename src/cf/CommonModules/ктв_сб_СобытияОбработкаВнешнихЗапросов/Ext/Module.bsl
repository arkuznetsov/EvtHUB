
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАПРОСОВ К СЕРВИСУ EventHUB
//
#Область ОбработкаЗапросовОбменаСобытиями

// Функция - Возвращает список зарегистрированных событий
//
// Параметры:
//  ВозвращатьВнешниеОбработки	 - Булево	 - Истина - в ответ будут включены внешние обработки проверки возникновения событий
// 
// Возвращаемое значение:
//   Массив (Структура) - Массив описаний зарегистрированных событий
//
Функция ПолучитьСписокЗарегистрированныхСобытий(ВозвращатьВнешниеОбработки = Ложь) Экспорт
	
	ЗапросСобытий = Новый Запрос("ВЫБРАТЬ
	                             |	События.Код,
	                             |	События.Наименование,
	                             |	События.Ид,
	                             |	События.Обработка,
	                             |	События.Комментарий
	                             |ИЗ
	                             |	Справочник.ктв_сб_События КАК События
	                             |ГДЕ
	                             |	НЕ События.ПометкаУдаления");
	
	Результат = ЗапросСобытий.Выполнить();
	
	МассивСобытий = Новый Массив();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеСобытия = Новый Структура("Код,
										  |Наименование,
										  |Ид,
										  |ОбработкаВнешняя,
										  |Обработка,
										  |Комментарий"
										, Выборка.Код
										, Выборка.Наименование
										, Выборка.Ид
										, Ложь
										, ""
										, Выборка.Комментарий);
		ВремОбработка = Выборка.Обработка.Получить();
		Если ТипЗнч(ВремОбработка) = Тип("Строка") Тогда
			ОписаниеСобытия.Обработка = ВремОбработка;
		ИначеЕсли ТипЗнч(ВремОбработка) = Тип("ДвоичныеДанные") Тогда
			ОписаниеСобытия.ОбработкаВнешняя	= Истина;
			ОписаниеСобытия.Обработка			= ?(ВозвращатьВнешниеОбработки, Base64Строка(ВремОбработка), "<ВнешняяОбработка>");
		КонецЕсли;
		
		МассивСобытий.Добавить(ОписаниеСобытия);
	КонецЦикла;
	
	Возврат МассивСобытий;

КонецФункции //ПолучитьСписокЗарегистрированныхСобытий()

// Функция - Регистрирует переданные события и запускает обработку событий
//
// Параметры:
//  МассивСобытий	 - Масив (Структура)	 - Массив описаний событий, которые необходимо зарегистрировать и обработать
//  ОписаниеОшибок	 - Строка				 - Описание ошибок, возникших в процессе регистрации событий
// 
// Возвращаемое значение:
//   Булево - Истина - события зарегистрированы, Ложь - возникли ошибки
//
Функция ЗарегистрироватьСобытия(МассивСобытий, ОписаниеОшибок = "") Экспорт
	
	ОбязательныеПоля = Новый Структура("Источник_Ид, Источник_Наименование, ИдТочки");
	//ОписаниеСобытия = Новый Структура("Источник_Ид, Источник_Наименование, Приемник_Ид, Приемник_Наименование, Дата, Момент, Источник, Параметры");
	
	ОписаниеОшибок = "";
	
	Для й = 0 По МассивСобытий.ВГраница() Цикл
		Если НЕ ТипЗнч(МассивСобытий[й]) = Тип("Структура") Тогда
			ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", Символы.ПС) + "Описание события (" + СокрЛП(й) + ") имеет тип """ + СокрЛП(ТипЗнч(МассивСобытий[й])) + """, ожидается тип ""Структура""!";
			Продолжить;
		КонецЕсли;
		Для Каждого ТекПоле Из ОбязательныеПоля Цикл
			Если НЕ МассивСобытий[й].Свойство(ТекПоле.Ключ) Тогда
				ОписаниеОшибок = ОписаниеОшибок + ?(ОписаниеОшибок = "", "", Символы.ПС) + "В описании события (" + СокрЛП(й) + ") отсутствует поле """ + ТекПоле.Ключ + """!";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ОписаниеОшибок = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекОписание Из МассивСобытий Цикл
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.НайтиПоРеквизиту("Ид", ТекОписание.ИдТочки);
		ИдОбъектаМетаданныхТочки = ктв_сб_События.ПолучитьИдентификаторОбъектаМетаданных(ТипЗнч(ТочкаВозникновения));
		
		Событие = Справочники.ктв_сб_События.ПустаяСсылка();
		Если ЗначениеЗаполнено(ТекОписание.Приемник_Ид) Тогда
			Событие = Справочники.ктв_сб_События.НайтиПоРеквизиту("Ид", ТекОписание.Приемник_Ид);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Событие) Тогда
			Событие = Справочники.ктв_сб_События.НайтиПоРеквизиту("Ид", ТекОписание.Источник_Ид);
		КонецЕсли;
		
		Если ТочкаВозникновения.Пустая() ИЛИ Событие.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		СобытиеИОбработчики = ктв_сб_События.ПолучитьОбработчикиСобытий(ТочкаВозникновения, Событие);
		
		Если СобытиеИОбработчики.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ктв_сб_События.НачатьОбработкуСобытия(ТочкаВозникновения
										 , ТекОписание.ИдСобытия
										 , ИдОбъектаМетаданныхТочки
										 , ТочкаВозникновения
										 , ТекОписание.Дата
										 , ТекОписание.Момент
										 , Событие
										 , ктв_сб_События.ТекущийПользователь()
										 , СобытиеИОбработчики[Событие]
										 , ТекОписание.Параметры);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции //ЗарегистрироватьСобытия()

// Функция - Возвращает список точек возникновения событий
//
// Параметры:
//  ТекущаяТочка - Булево	 - Возвращать только точку возникновеня событий, соответствующую текущей ИБ
// 
// Возвращаемое значение:
//  Массив (Структура) - Массив описаний зарегистрированных точек возникновения событий
//
Функция ПолучитьСписокТочекВозникновенияСобытий(ТекущаяТочка = Ложь) Экспорт
	
	ЗапросТочек = Новый Запрос("ВЫБРАТЬ
	                           |	ТочкиВозникновенияСобытий.Код КАК Код,
	                           |	ТочкиВозникновенияСобытий.Наименование КАК Наименование,
	                           |	ТочкиВозникновенияСобытий.Ид КАК Ид,
	                           |	ВЫБОР
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.СОАП)
	                           |			ТОГДА ""SOAP""
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.ХТТП)
	                           |			ТОГДА ""HTTP""
	                           |		ИНАЧЕ """"
	                           |	КОНЕЦ КАК СервисСобытий_ТипСервиса,
	                           |	ВЫБОР
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.ХТТП)
	                           |			ТОГДА АдресаСервисов.Сервер
	                           |		ИНАЧЕ """"
	                           |	КОНЕЦ КАК СервисСобытий_Сервер,
	                           |	ВЫБОР
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.СОАП)
	                           |				ИЛИ АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.ХТТП)
	                           |			ТОГДА АдресаСервисов.АдресРесурса
	                           |		ИНАЧЕ """"
	                           |	КОНЕЦ КАК СервисСобытий_АдресРесурса,
	                           |	ВЫБОР
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.СОАП)
	                           |			ТОГДА АдресаСервисов.ПространствоИмен
	                           |		ИНАЧЕ """"
	                           |	КОНЕЦ КАК СервисСобытий_ПространствоИмен,
	                           |	ВЫБОР
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.СОАП)
	                           |			ТОГДА АдресаСервисов.ИмяСервиса
	                           |		ИНАЧЕ """"
	                           |	КОНЕЦ КАК СервисСобытий_ИмяСервиса,
	                           |	ВЫБОР
	                           |		КОГДА АдресаСервисов.ТипСервиса = ЗНАЧЕНИЕ(Перечисление.ктв_сб_ТипСервиса.СОАП)
	                           |			ТОГДА АдресаСервисов.ИмяТочкиПодключения
	                           |		ИНАЧЕ """"
	                           |	КОНЕЦ КАК СервисСобытий_ИмяТочкиПодключения,
	                           |	ТочкиВозникновенияСобытий.Предопределенный КАК Предопределенный,
	                           |	ТочкиВозникновенияСобытий.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	                           |	ТочкиВозникновенияСобытий.Комментарий КАК Комментарий
	                           |ИЗ
	                           |	Справочник.ктв_сб_СобытияТочкиВозникновения КАК ТочкиВозникновенияСобытий
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ктв_сб_АдресаСервисов КАК АдресаСервисов
	                           |		ПО ТочкиВозникновенияСобытий.СервисСобытий_Адрес = АдресаСервисов.Ссылка
	                           |ГДЕ
	                           |	НЕ ТочкиВозникновенияСобытий.ПометкаУдаления
	                           |	И (&ТекущаяТочка
	                           |				И ТочкиВозникновенияСобытий.Предопределенный
	                           |			ИЛИ НЕ &ТекущаяТочка)");
								 
	ЗапросТочек.УстановитьПараметр("ТекущаяТочка", ТекущаяТочка);
	
	Результат = ЗапросТочек.Выполнить();
	
	МассивТочек = Новый Массив();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеТочки = Новый Структура("Код,
										|Наименование,
										|Ид,
										|СервисСобытий_ТипСервиса,
										|СервисСобытий_Сервер,
										|СервисСобытий_АдресРесурса,
										|СервисСобытий_ПространствоИмен,
										|СервисСобытий_ИмяСервиса,
										|СервисСобытий_ИмяТочкиПодключения,
										|Предопределенный,
										|Комментарий"
									  , Выборка.Код
									  , Выборка.Наименование
									  , Выборка.Ид
									  , Выборка.СервисСобытий_ТипСервиса
									  , Выборка.СервисСобытий_Сервер
									  , Выборка.СервисСобытий_АдресРесурса
									  , Выборка.СервисСобытий_ПространствоИмен
									  , Выборка.СервисСобытий_ИмяСервиса
									  , Выборка.СервисСобытий_ИмяТочкиПодключения
									  , Выборка.Предопределенный
									  , Выборка.Комментарий);
		
		МассивТочек.Добавить(ОписаниеТочки);
	КонецЦикла;
	
	Возврат МассивТочек;
	
КонецФункции //ПолучитьСписокТочекВозникновенияСобытий()

#КонецОбласти

