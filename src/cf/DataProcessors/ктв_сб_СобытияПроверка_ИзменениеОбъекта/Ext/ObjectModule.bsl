
#Область ПрограммныйИнтерфейс

// Функция - Подтверждает, что обработка является обработкой обслуживания
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ЭтоОбработкаПроверкиСобытия() Экспорт
	
	Возврат Истина;
	
КонецФункции //ЭтоОбработкаПроверкиСобытия()

// Функция - Получает форму обработчиков команд, где расположены процедуры-обработчики команд
// 			 из списка действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  Строка - Имя формы обработчиков комманд
//
Функция ПолучитьФормуОбработчиковКоманд() Экспорт
	
	Возврат "Форма";
	
КонецФункции //ПолучитьФормуОбработчиковКоманд()

// Функция - Получает список действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  СписокЗначений - Список действий
//
Функция ПолучитьСписокДействийКнопкиОткрытия() Экспорт
	
	СписокДействий = Новый СписокЗначений();
	
	Возврат СписокДействий;
	
КонецФункции //ПолучитьСписокДействийКнопкиОткрытия()

// Функция - Выполняет проверку условий регистрации события
//
// Параметры:
//  Источник			 - Объект, НаборЗаписей						- Объект - источник возникновения события
//  Событие				 - СправочникСсылка.ктв_сб_События				- Проверяемое событие
//  ПараметрыПодписки	 - Структура								- Параметры обработчика подписки на событие, в котором выполняется проверка
//  ПараметрыСобытия	 - Структура								 - Параметры события для сохранения
// 
// Возвращаемое значение:
//  Булево - Истина - событие произошло (проверка выполнена успешно)
//
Функция ПроверитьНаступлениеСобытия(Источник, Событие, ПараметрыПодписки, ПараметрыСобытия) Экспорт
	
	//СоответствиеОбработчиков = Новый Соответствие();
	//СоответствиеОбработчиков.Вставить("Объект.ПриКопировании"								, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПриКопировании"));
	//СоответствиеОбработчиков.Вставить("Объект.ПередЗаписью"								, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПередЗаписью"));
	//СоответствиеОбработчиков.Вставить("ДокументОбъект.ПередЗаписью"						, Новый Структура("ВидОбъекта, МоментПроверки", "Документ"			, "ПередЗаписью"));
	//СоответствиеОбработчиков.Вставить("Объект.ПриЗаписи"									, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПриЗаписи"));
	//СоответствиеОбработчиков.Вставить("Объект.ПередУдалением"								, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПередУдалением"));
	//СоответствиеОбработчиков.Вставить("Объект.ОбработкаЗаполнения"						, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ОбработкаЗаполнения"));
	//СоответствиеОбработчиков.Вставить("Объект.ОбработкаПроверкиЗаполнения"				, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ОбработкаПроверкиЗаполнения"));
	//СоответствиеОбработчиков.Вставить("ДокументОбъект.ОбработкаПроведения"				, Новый Структура("ВидОбъекта, МоментПроверки", "Документ"			, "ОбработкаПроведения"));
	//СоответствиеОбработчиков.Вставить("ДокументОбъект.ОбработкаУдаленияПроведения"		, Новый Структура("ВидОбъекта, МоментПроверки", "Документ"			, "ОбработкаУдаленияПроведения"));
	//СоответствиеОбработчиков.Вставить("БизнесПроцессОбъект.ОбработкаИнтерактивнойАктивации"	, Новый Структура("ВидОбъекта, МоментПроверки", "БизнесПроцесс"		, "ОбработкаИнтерактивнойАктивации"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ОбработкаИнтерактивнойАктивации"		, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ОбработкаИнтерактивнойАктивации"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ОбработкаПроверкиВыполнения"			, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ОбработкаПроверкиВыполнения"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ПередВыполнением"						, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ПередВыполнением"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ПередИнтерактивнымВыполнением"		, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ПередИнтерактивнымВыполнением"));
	//СоответствиеОбработчиков.Вставить("Задачам.ПриВыполнении"								, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ПриВыполнении"));
	//СоответствиеОбработчиков.Вставить("НаборЗаписей.ОбработкаПроверкиЗаполнения"			, Новый Структура("ВидОбъекта, МоментПроверки", "НаборЗаписей"		, "ОбработкаПроверкиЗаполнения"));
	//СоответствиеОбработчиков.Вставить("НаборЗаписей.ПередЗаписью"							, Новый Структура("ВидОбъекта, МоментПроверки", "НаборЗаписей"		, "ПередЗаписью"));
	//СоответствиеОбработчиков.Вставить("НаборЗаписей.ПриЗаписи"							, Новый Структура("ВидОбъекта, МоментПроверки", "НаборЗаписей"		, "ПриЗаписи"));
	//СоответствиеОбработчиков.Вставить("РегистрСведенийНаборЗаписей.ОбработкаЗаполнения"	, Новый Структура("ВидОбъекта, МоментПроверки", "РегистрСведений"	, "ОбработкаЗаполнения"));
	
	МоментПроверки = Неопределено;
	ПараметрыПодписки.Свойство("МоментПроверки", МоментПроверки);
	
	ИдОбъектаМетаданных = Неопределено;
	ПараметрыПодписки.Свойство("ИдОбъектаМетаданных", ИдОбъектаМетаданных);
	
	Если МоментПроверки = "ПередЗаписью" Тогда
		ИзмененныеРеквизиты = ПолучитьИзмененияРеквизитов(Источник, Событие);
		Источник.ДополнительныеСвойства.Вставить("ктв_сб_События_ОбъектИзменен", Ложь);
		Если ИзмененныеРеквизиты.Количество() > 0 Тогда
			Источник.ДополнительныеСвойства.ктв_сб_События_ОбъектИзменен = Истина;
			Источник.ДополнительныеСвойства.Вставить("ктв_сб_События_ИзмененныеРеквизиты", ИзмененныеРеквизиты);
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли МоментПроверки = "ПриЗаписи" Тогда
		ОбъектИзменен = Ложь;
		ПередатьДляОбработки = Ложь;
		Источник.ДополнительныеСвойства.Свойство("ктв_сб_События_ОбъектИзменен", ОбъектИзменен);
		Источник.ДополнительныеСвойства.Свойство("ктв_сб_События_ПередатьДляОбработки", ПередатьДляОбработки);
		Если ОбъектИзменен = Истина Тогда
			ПараметрыСобытия.Вставить("ИзмененныеРеквизиты", Источник.ДополнительныеСвойства.ктв_сб_События_ИзмененныеРеквизиты);
			Если ПередатьДляОбработки = Истина Тогда
				ПараметрыСобытия.Вставить("ДанныеОбъекта", СерриализоватьОбъект(Источник));
			КонецЕсли;
		КонецЕсли;
		Возврат ОбъектИзменен;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции //ПроверитьНаступлениеСобытия()

#КонецОбласти

#Область СлужебныеПроцедуры

// Функция - Проверяет наличие функциональности дополнительных реквизитов и сведений
//   ИдентификаторОбъекта 			СправочникСсылка.							- Объект для которого проверяется наличие доолнительных реквизитов
//									ИдентификаторыОбъектовМетаданных			  если не указан, то возвращается наличие функциональности
//																				  доп. реквизитов для конфигурации в целом
//   ДопРеквизиты					Массив (ПланВидовХарактеристикСсылка.		- В параметре возвращается массив доп реквизитов
//									ДополнительныеРеквизитыИСведения)
// 
// Возвращаемое значение:
//   Булево - Истина - Есть функциональностть доп. реквизитов
//
Функция ЕстьДопРеквизиты(ИдентификаторОбъекта = Неопределено, ДопРеквизиты = Неопределено) Экспорт
	
	Если Метаданные.Справочники.Найти("НаборыДополнительныхРеквизитовИСведений") = Неопределено
	 ИЛИ Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если ИдентификаторОбъекта = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(ИдентификаторОбъекта.ПолноеИмя);
	
	Если МетаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборДопРеквизитов = Неопределено;
	Попытка
		НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[СтрЗаменить(ИдентификаторОбъекта.ПолноеИмя, ".", "_")]
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если НаборДопРеквизитов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивНазначений = Новый Массив();
		
	Если НаборДопРеквизитов.ЭтоГруппа Тогда
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Выбрать(НаборДопРеквизитов);
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			МассивНазначений.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		МассивНазначений.Добавить(НаборДопРеквизитов);
	КонецЕсли;
	
	ДопРеквизиты = Новый Массив();
	Для Каждого ТекНазначение Из МассивНазначений Цикл
		
		Для Каждого ТекСтрока Из ТекНазначение.ДополнительныеРеквизиты Цикл
			Если НЕ ДопРеквизиты.Найти(ТекСтрока.Свойство) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДопРеквизиты.Добавить(ТекСтрока.Свойство);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если МетаОбъект.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции //ЕстьДопРеквизиты()

// Функция - Получает список измененных реквизитов объекта
//
// Параметры:
//  Источник			 - Объект, НаборЗаписей			 - Объект - источник возникновения события
// 
// Возвращаемое значение:
//  Структура - Список измененных реквизитов объекта
//
Функция ПолучитьИзмененияРеквизитов(Источник, Событие)
	
	Настройка = Событие.ОбработкаНастройки.Получить();
	
	Источник.ДополнительныеСвойства.Вставить("ктв_сб_События_ПередатьДляОбработки", Ложь);
	
	СохраненныеРеквизитыОбъектов = Новый Соответствие();
	Если Настройка.Свойство("РеквизитыОбъектов") Тогда
		СохраненныеРеквизитыОбъектов = Настройка.РеквизитыОбъектов;
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Массив();
	ИсключаемыеРеквизиты = Новый Массив();
	
	МетаОбъект = Источник.Метаданные();
	
	ИдентификаторОбъекта = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", МетаОбъект.ПолноеИмя());
		
	Если ТипЗнч(СохраненныеРеквизитыОбъектов) = Тип("Соответствие") Тогда
	
		ПараметрыОбъекта = СохраненныеРеквизитыОбъектов[ИдентификаторОбъекта];
		
		Если НЕ ПараметрыОбъекта = Неопределено Тогда
			Если ПараметрыОбъекта.Свойство("ПередатьДляОбработки") Тогда
				Источник.ДополнительныеСвойства.ктв_сб_События_ПередатьДляОбработки = ПараметрыОбъекта.ПередатьДляОбработки;
			КонецЕсли;
				
			ПроверяемыеРеквизиты = ПараметрыОбъекта.ПроверяемыеРеквизиты;
			ИсключаемыеРеквизиты = ПараметрыОбъекта.ИсключаемыеРеквизиты;
		КонецЕсли;
		
	КонецЕсли;
	
	СохраненныйДокумент = Источник.Ссылка;
	
	ИзмененныеРеквизиты = Новый Соответствие();
	
	Для Каждого ТекРеквизит Из МетаОбъект.СтандартныеРеквизиты Цикл
		Если НЕ ИсключаемыеРеквизиты.Найти(ТекРеквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ПроверяемыеРеквизиты.Количество() = 0) И ПроверяемыеРеквизиты.Найти(ТекРеквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник[ТекРеквизит.Имя] = СохраненныйДокумент[ТекРеквизит.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененныеРеквизиты.Вставить(ТекРеквизит.Имя, Новый Структура("СтароеЗначение, НовоеЗначение", СокрЛП(СохраненныйДокумент[ТекРеквизит.Имя]), СокрЛП(Источник[ТекРеквизит.Имя])));
		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если НЕ ИсключаемыеРеквизиты.Найти(ТекРеквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ПроверяемыеРеквизиты.Количество() = 0) И ПроверяемыеРеквизиты.Найти(ТекРеквизит.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник[ТекРеквизит.Имя] = СохраненныйДокумент[ТекРеквизит.Имя] Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененныеРеквизиты.Вставить(ТекРеквизит.Имя, Новый Структура("СтароеЗначение, НовоеЗначение", СокрЛП(СохраненныйДокумент[ТекРеквизит.Имя]), СокрЛП(Источник[ТекРеквизит.Имя])));
		
	КонецЦикла;
	
	ДопРеквизиты = Новый Массив();
	
	ЕстьДопРеквизиты = ЕстьДопРеквизиты(ИдентификаторОбъекта, ДопРеквизиты);
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		
		Если ЕстьДопРеквизиты И ТекТЧ.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ИсключаемыеРеквизиты.Найти("__ТЧ_" + ТекТЧ.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ПроверяемыеРеквизиты.Количество() = 0) И ПроверяемыеРеквизиты.Найти("__ТЧ_" + ТекТЧ.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрок = Макс(СохраненныйДокумент[ТекТЧ.Имя].Количество(), Источник[ТекТЧ.Имя].Количество());
		
		Для й = 0 По КоличествоСтрок - 1 Цикл
			
			Если й + 1 > СохраненныйДокумент[ТекТЧ.Имя].Количество() Тогда
				ИзмененныеРеквизиты.Вставить("__ТЧ_" + ТекТЧ.Имя + "_" + Формат(й + 1, "ЧГ=0"), Новый Структура("СтароеЗначение, НовоеЗначение", "<>", "<строка добавлена>"));
				Продолжить;
			ИначеЕсли й + 1 > Источник[ТекТЧ.Имя].Количество() Тогда
				ИзмененныеРеквизиты.Вставить("__ТЧ_" + ТекТЧ.Имя + "_" + Формат(й + 1, "ЧГ=0"), Новый Структура("СтароеЗначение, НовоеЗначение", "<строка удалена>", "<>"));
				Продолжить;
			КонецЕсли;
					
			Для Каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				
				Если НЕ ИсключаемыеРеквизиты.Найти("__ТЧ_" + ТекТЧ.Имя + "_" + ТекРеквизит.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
		
				Если (НЕ ПроверяемыеРеквизиты.Количество() = 0) И ПроверяемыеРеквизиты.Найти("__ТЧ_" + ТекТЧ.Имя) = Неопределено И ПроверяемыеРеквизиты.Найти("__ТЧ_" + ТекТЧ.Имя + "_" + ТекРеквизит.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
		
				Если Источник[ТекТЧ.Имя][й][ТекРеквизит.Имя] = СохраненныйДокумент[ТекТЧ.Имя][й][ТекРеквизит.Имя] Тогда
					Продолжить;
				КонецЕсли;
				
				ИзмененныеРеквизиты.Вставить("__ТЧ_" + ТекТЧ.Имя + "_" + Формат(й + 1, "ЧГ=0") + "_" + ТекРеквизит.Имя, Новый Структура("СтароеЗначение, НовоеЗначение", СокрЛП(СохраненныйДокумент[ТекТЧ.Имя][й][ТекРеквизит.Имя]), СокрЛП(Источник[ТекТЧ.Имя][й][ТекРеквизит.Имя])));
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ДопРеквизиты Цикл
		Если НЕ ИсключаемыеРеквизиты.Найти(СокрЛП(ТекРеквизит.УникальныйИдентификатор())) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (НЕ ПроверяемыеРеквизиты.Количество() = 0) И ПроверяемыеРеквизиты.Найти(СокрЛП(ТекРеквизит.УникальныйИдентификатор())) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтароеЗначение = Неопределено;
		НовоеЗначение = Неопределено;
		
		СтрокиЗначений = СохраненныйДокумент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекРеквизит));
		Если СтрокиЗначений.Количество() > 0 Тогда
			СтароеЗначение = СтрокиЗначений[0].Значение;
		КонецЕсли;
		
		СтрокиЗначений = Источник.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекРеквизит));
		Если СтрокиЗначений.Количество() > 0 Тогда
			НовоеЗначение = СтрокиЗначений[0].Значение;
		КонецЕсли;
		
		Если НовоеЗначение = СтароеЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененныеРеквизиты.Вставить(ТекРеквизит, Новый Структура("СтароеЗначение, НовоеЗначение", СокрЛП(СтароеЗначение), СокрЛП(НовоеЗначение)));
		
	КонецЦикла;
	
	Возврат ИзмененныеРеквизиты;
	
КонецФункции //ПолучитьИзмененияРеквизитов()

// Функция - Получает объект, серриализованный в XML
//
// Параметры:
//  Источник			 - Объект, НаборЗаписей			 - Объект - источник возникновения события
// 
// Возвращаемое значение:
//  Строка - Объект, серриализованный в XML
//
Функция СерриализоватьОбъект(Источник)
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ктв_сб_События_ПередатьДляОбработки") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.ктв_сб_События_ПередатьДляОбработки = Истина Тогда
		Возврат "";
	КонецЕсли;
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку("UTF-8");
	
	ЗаписатьXML(Запись, Источник);
	
	Возврат Запись.Закрыть();
	
КонецФункции //СерриализоватьОбъект()

#КонецОбласти
