////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обработка событий (EventHUB)". (Основной модуль)
//
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныеПроцедуры

// Функция - Получает идентификатор объекта метаданных
//
// Параметры:
//  ОписаниеОбъектаМетаданных	 - Тип, Строка, ОбъектМетаданных	 - Описание объекта для получения идентификатора
// 
// Возвращаемое значение:
//  СправочникСсылка.ИдентификаторыОбъектовМетаданных - Элемент справочника, идентификатор объекта
//
Функция ПолучитьИдентификаторОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
	
	ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
	Если ТипОписанияОбъектаМетаданных = Тип("Тип") Тогда
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
		Если ОбъектМетаданных = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда
		ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных;
	Иначе
		ПолноеИмяОбъектаМетаданных = ОписаниеОбъектаМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмяОбъектаМетаданных);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка,
	|	Идентификаторы.КлючОбъектаМетаданных,
	|	Идентификаторы.ПолноеИмя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ПолноеИмя = &ПолноеИмя
	|	И НЕ Идентификаторы.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Выгрузка = Результат.Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выгрузка[0].Ссылка;
	
КонецФункции //ПолучитьИдентификаторОбъектаМетаданных()

// Функция - Получает текущего пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Элемент справочника "Пользователи", соответствующий текущему пользователю
//
Функция ТекущийПользователь() Экспорт
	
	ТекущийПользователь = Неопределено;
	
	Попытка
		ТекущийПользователь = Вычислить("Пользователи.ТекущийПользователь()");
		Возврат ТекущийПользователь;
	Исключение
	КонецПопытки;
	
	Попытка
		ТекущийПользователь = Вычислить("ПользователиКлиентСервер.ТекущийПользователь()");
		Возврат ТекущийПользователь;
	Исключение
	КонецПопытки;
	
	Попытка
		ТекущийПользователь = Вычислить("ОбщегоНазначения.ТекущийПользователь()");
		Возврат ТекущийПользователь;
	Исключение
	КонецПопытки;
	
	Возврат ТекущийПользователь;
	
КонецФункции //ТекущийПользователь()

#КонецОбласти 

#Область РегистрацияСобытий

// Функция - Получить обработчики событий
//
// Параметры:
//  ТипИсточникаИлиТочкаВозникновения - СправочникСсылка.ИдентификаторыОбъектовМетаданных,	- Источник возникновения события, либо тип объекта системы,
//			   							СправочникСсылка.ктв_сб_СобытияТочкиВозникновения		  либо внешний источник
//  События							  - Массив(СправочникСсылка.ктв_сб_События)				- Массив событий для получения обработчиков, если НЕОПРЕДЕЛЕНО, то возвращаются все события,
//																							  для которых были зарегистрированы обработчики
// 
// Возвращаемое значение:
//  Соответствие - Ключ - Событие, Значение - массив обработчиков события
//
Функция ПолучитьОбработчикиСобытий(ТипИсточникаИлиТочкаВозникновения, События = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СобытияНазначенныеОбработчики.Событие КАК Событие,
	                      |	СобытияНазначенныеОбработчики.ТипИсточникаИлиТочкаВозникновения,
	                      |	СобытияНазначенныеОбработчики.Обработчик,
	                      |	СобытияНазначенныеОбработчики.ОтложеннаяОбработка,
	                      |	СобытияНазначенныеОбработчики.ОжидатьЗавершения,
	                      |	СобытияНазначенныеОбработчики.ОбрабатыватьНаСервере,
	                      |	СобытияНазначенныеОбработчики.ОбрабатыватьНаКлиенте,
	                      |	СобытияНазначенныеОбработчики.Приоритет КАК Приоритет
	                      |ИЗ
	                      |	РегистрСведений.ктв_сб_СобытияНазначенныеОбработчики КАК СобытияНазначенныеОбработчики
	                      |ГДЕ
	                      |	СобытияНазначенныеОбработчики.ТипИсточникаИлиТочкаВозникновения = &ТипИсточникаИлиТочкаВозникновения
	                      |	И (СобытияНазначенныеОбработчики.Событие В (&События)
	                      |			ИЛИ &ВсеСобытия = ИСТИНА)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Приоритет
	                      |ИТОГИ ПО
	                      |	Событие");
	
	МассивСобытий = Новый Массив();
	ВсеСобытия = Ложь;
	
	Если ТипЗнч(События) = Тип("Массив") Тогда
		МассивСобытий = События;
	ИначеЕсли ТипЗнч(События) = Тип("СправочникСсылка.ктв_сб_События") Тогда
		МассивСобытий.Добавить(События);
	Иначе
		ВсеСобытия = Истина;
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("События"		, МассивСобытий);
	Запрос.УстановитьПараметр("ВсеСобытия"	, ВсеСобытия);
	Запрос.УстановитьПараметр("ТипИсточникаИлиТочкаВозникновения"	, ТипИсточникаИлиТочкаВозникновения);
	
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	СобытияИОбработчики = Новый Соответствие();
	
	ВыборкаСобытий = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСобытий.Следующий() Цикл
	
		МассивОбработчиков = Новый Массив();
		
		ВыборкаОбработчиков = ВыборкаСобытий.Выбрать();
		
		Пока ВыборкаОбработчиков.Следующий() Цикл
		
			ОбработчикСобытия = Новый Структура("Обработчик,
												|ОтложеннаяОбработка,
												|ОжидатьЗавершения,
												|ОбрабатыватьНаСервере,
												|ОбрабатыватьНаКлиенте");
			ЗаполнитьЗначенияСвойств(ОбработчикСобытия, ВыборкаОбработчиков);
			
		    МассивОбработчиков.Добавить(ОбработчикСобытия);
			
		КонецЦикла; 
		
		СобытияИОбработчики.Вставить(ВыборкаСобытий.Событие, МассивОбработчиков);
		
	КонецЦикла; 
	
	Возврат СобытияИОбработчики;
	
КонецФункции //ПолучитьОбработчикиСобытий()

// Функция - Выполняет проверку условий регистрации события
//
// Параметры:
//  Источник - Объект, НаборЗаписей									- Объект - источник возникновения события
//  Событие				 - СправочникСсылка.ктв_сб_События			- Проверяемое событие
//  ПараметрыПодписки	 - Структура								- Параметры обработчика подписки на событие, в котором выполняется проверка
//  ПараметрыСобытия	 - Структура								- После выполнения содержит параметры, связанные с событием, установленные в обработке проверки
//  ТекстОшибки			 - Строка									- Описание возникшей ошибки
// 
// Возвращаемое значение:
//  Булево - Истина - событие наступило, Ложь - в противном случае
//
Функция ПроверитьНаступлениеСобытия(Источник, Событие, ПараметрыПодписки, ПараметрыСобытия = Неопределено, ТекстОшибки = "") Экспорт
	
	Результат = Ложь;
	
	Если ПараметрыПодписки.Свойство("Отказ") Тогда
		Если ПараметрыПодписки.Отказ Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыСобытия) = Тип("Структура") Тогда
		ПараметрыСобытия = Новый Структура();
	КонецЕсли;
	
	ВремОбработка = Событие.Обработка.Получить();
	ВремОбработка = ?(ТипЗнч(ВремОбработка) = Тип("Строка"), ВремОбработка, ПолучитьНавигационнуюСсылку(Событие, "Обработка"));
	
	ОбработкаОбъект = ктв_сб_ОбработкиОбслуживания.ПолучитьОбработкуОбъект(ВремОбработка);
	
	ТекстОшибки = "";
	
	Попытка
		Результат = ОбработкаОбъект.ПроверитьНаступлениеСобытия(Источник, Событие, ПараметрыПодписки, ПараметрыСобытия);
		Если ПараметрыСобытия.Свойство("ТекстОшибки") Тогда
			ТекстОшибки = "при проверке возникновения события """ + СокрЛП(Событие)
						+ """ для источника """ + СокрЛП(Источник)
						+ """ в подписке """ + ПараметрыПодписки.МоментПроверки
						+ """ возникла ошибка: " + Символы.ПС
						+ ПараметрыСобытия.ТекстОшибки;
			ПараметрыСобытия.Удалить("ТекстОшибки");
		КонецЕсли;
	Исключение
		ТекстОшибки = "при проверке возникновения события """ + СокрЛП(Событие)
					+ """ для источника """ + СокрЛП(Источник)
					+ """ в подписке """ + ПараметрыПодписки.МоментПроверки
					+ """ возникла ошибка: " + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции //ПроверитьНаступлениеСобытия()

// Функция - Выполняет проверку условий регистрации событий и регистрирует события если условия выполняются
//			 Вызывается из обработчиков подписок на события
//
// Параметры:
//  Источник - СправочникСсылка.ИдентификаторыОбъектовМетаданных,	- Источник возникновения события, либо тип объекта системы,
//			   СправочникСсылка.ктв_сб_СобытияТочкиВозникновения		  либо внешний источник
//  ПараметрыПодписки	 - Структура								- Параметры обработчика подписки на событие, в котором которого выполняется проверка
//
Процедура ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки)
	
	Если ПараметрыПодписки.Свойство("Отказ") Тогда
		Если ПараметрыПодписки.Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если ТипЗнч(Источник) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных")
	// ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.ИдентификаторыОбъектовРасширений")
	// ИЛИ ТипЗнч(Источник) = Тип("СправочникОбъект.ВерсииРасширений") Тогда
	//	Возврат;
	//КонецЕсли;
	
	ИдОбъектаМетаданных = Неопределено;
	//Оптимизация: Проверяем, был ли получен ранее идентификатор метаданных, если нет то получаем
	//и помещаем в доп. свойства объекта
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ктв_сб_События_ИдОбъектаМетаданных", ИдОбъектаМетаданных) Тогда
		ИдОбъектаМетаданных = ктв_сб_События.ПолучитьИдентификаторОбъектаМетаданных(ТипЗнч(Источник));
		Источник.ДополнительныеСвойства.Вставить("ктв_сб_События_ИдОбъектаМетаданных", ИдОбъектаМетаданных);
	КонецЕсли;
	
	//Помещаем идентификатор метаданных в структуру параметров подписки для возможного использования в обработчике
	Если НЕ ТипЗнч(ПараметрыПодписки) = Тип("Структура") Тогда
		ПараметрыПодписки = Новый Структура();
	КонецЕсли;
	ПараметрыПодписки.Вставить("ИдОбъектаМетаданных", ИдОбъектаМетаданных);
	
	СобытияДляПроверки = Неопределено;
	//Оптимизация: Проверяем, был ли получен ранее список событий для проверки, если нет то получаем
	//и помещаем в доп. свойства объекта
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ктв_сб_События_СобытияДляПроверки", СобытияДляПроверки) Тогда
		СобытияДляПроверки = ктв_сб_События.ПолучитьОбработчикиСобытий(ИдОбъектаМетаданных);
		Источник.ДополнительныеСвойства.Вставить("ктв_сб_События_СобытияДляПроверки", СобытияДляПроверки);
	КонецЕсли;
	
	Для Каждого ТекСобытие Из СобытияДляПроверки Цикл
	
		ЕстьАктивныеОбработчики = Ложь;
		
		Для Каждого ТекОбработчик Из ТекСобытие.Значение Цикл
			Если ТекОбработчик.ОбрабатыватьНаСервере ИЛИ ТекОбработчик.ОбрабатыватьНаКлиенте Тогда
				ЕстьАктивныеОбработчики = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьАктивныеОбработчики Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСобытия = Новый Структура();
		//Передаем ссылку на источник события вместе с параметрами события, если он является ссылочным типом.
		//В обработчике проверки возникновения события ссылка может быть переопределена
		ВремИсточник = Неопределено;
		Попытка
			ВремИсточник = Источник.Ссылка;
		Исключение
		КонецПопытки;
		ПараметрыСобытия.Вставить("Источник", ВремИсточник);
		
		//Передаем текущего пользователя вместе с параметрами события.
		//В обработчике проверки возникновения события пользователь может быть переопределен
		ПараметрыСобытия.Вставить("Пользователь", ктв_сб_События.ТекущийПользователь());
		
		ТекстОшибки = "";
		
		РезультатПроверки = ктв_сб_События.ПроверитьНаступлениеСобытия(Источник, ТекСобытие.Ключ, ПараметрыПодписки, ПараметрыСобытия, ТекстОшибки);
		
		Если РезультатПроверки = Ложь И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.ЭтаИБ;
		ИдСобытия = СокрЛП(Новый УникальныйИдентификатор());
		ДатаСобытия = ТекущаяУниверсальнаяДата();
		МоментСобытия = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ктв_сб_События.НачатьОбработкуСобытия(ТочкаВозникновения
										 , ИдСобытия
										 , ИдОбъектаМетаданных
										 , ПараметрыСобытия.Источник
										 , ДатаСобытия
										 , МоментСобытия
										 , ТекСобытие.Ключ
										 , ПараметрыСобытия.Пользователь
										 , ТекСобытие.Значение
										 , ПараметрыСобытия
										 , ТекстОшибки);
							   
	КонецЦикла;
	
КонецПроцедуры //ПроверитьЗарегистрироватьВозникшиеСобытия()

#КонецОбласти

#Область ОбработкаСобытий

// Процедура - Регистрирует обработчики события и запускает их выполнение
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.
//							ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка							- Уникальный идентификатор события
//	ТипИсточника		 - СправочникСсылка.				- Тип источника возникновения события
//							ИдентификаторыОбъектовМетаданных  (тип объекта системы)
//  Источник			 - ЛюбаяСсылка						- Источник возникновения события
//  Дата				 - Дата								- Дата и время возникновения события
//  Момент				 - Число							- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События		- Возникшее событие
//  Пользователь		 - СправочникСсылка.Пользователи	- Пользователь, от имени которого регистрируется событие
//  Обработчики			 - Массив (Структура)				- Массив описаний (структура) обработчиков события
//  ПараметрыСобытия	 - Структура						- Параметры, сформированные при возникновении события
//  ТекстОшибки			 - Структура						- описание ошибки, возникшей в момент проверки наступления события
//
Процедура НачатьОбработкуСобытия(ТочкаВозникновения
							   , ИдСобытия
							   , ТипИсточника
							   , Источник
							   , ДатаСобытия
							   , МоментСобытия
							   , Событие
							   , Пользователь
							   , Обработчики
							   , ПараметрыСобытия
							   , ТекстОшибки = "") Экспорт
	
	//Регистрируем событие в регистре сведений ктв_сб_События
	НаборЗаписей = РегистрыСведений.ктв_сб_События.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ТочкаВозникновения);
	НаборЗаписей.Отбор.Ид.Установить(ИдСобытия);
		
	Запись = НаборЗаписей.Добавить();
	Запись.ТочкаВозникновения	= ТочкаВозникновения;
	Запись.Ид					= ИдСобытия;
	Запись.Дата					= ДатаСобытия;
	Запись.Момент				= МоментСобытия;
	Запись.Событие				= Событие;
	Запись.ТипИсточника			= ТипИсточника;
	Запись.Источник				= Источник;
	Запись.Пользователь			= Пользователь;
	Запись.Параметры			= Новый ХранилищеЗначения(ПараметрыСобытия);
	
	//Если при проверке возникновения события возникла ошибка,
	//то регистрируем ее в регистре сведений ктв_сб_События
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда	
		Запись.Ошибка			= Истина;
		Запись.ТекстОшибки		= ТекстОшибки;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ТекстОшибкиЗаписи = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	//Если при проверке возникновения события возникла ошибка, прекращаем обработку
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда	
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ктв_сб_СобытияОбработка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ТочкаВозникновения);
	НаборЗаписей.Отбор.Ид.Установить(ИдСобытия);
	
	НаборЗаписейНаКлиенте = РегистрыСведений.ктв_сб_СобытияОбработкаНаКлиенте.СоздатьНаборЗаписей();
	НаборЗаписейНаКлиенте.Отбор.ТочкаВозникновения.Установить(ТочкаВозникновения);
	НаборЗаписейНаКлиенте.Отбор.Ид.Установить(ИдСобытия);
	
	//Первый проход: Регистрируем обработчики событий для обработки
	Для Каждого ТекОбработчик Из Обработчики Цикл
	
		Если ТекОбработчик.ОбрабатыватьНаКлиенте Тогда
			МассивПользователей = ПолучитьПользователей(ТочкаВозникновения
													  , ИдСобытия
													  , Источник
													  , ДатаСобытия
													  , МоментСобытия
													  , Событие
													  , ТекОбработчик.Обработчик
													  , ПараметрыСобытия);
			
			Для Каждого ТекПользователь Из МассивПользователей Цикл
				Запись = НаборЗаписейНаКлиенте.Добавить();
				Запись.ТочкаВозникновения	= ТочкаВозникновения;
				Запись.Ид					= ИдСобытия;
				Запись.Событие				= Событие;
				Запись.Обработчик			= ТекОбработчик.Обработчик;
				Запись.Пользователь			= ТекПользователь;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекОбработчик.ОбрабатыватьНаСервере Тогда


			Запись = НаборЗаписей.Добавить();
			Запись.ТочкаВозникновения	= ТочкаВозникновения;
			Запись.Ид					= ИдСобытия;
			Запись.Событие				= Событие;
			Запись.Обработчик			= ТекОбработчик.Обработчик;
		КонецЕсли;
		
	КонецЦикла;
		
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
		
	Если НаборЗаписейНаКлиенте.Количество() > 0 Тогда
		НаборЗаписейНаКлиенте.Записать();
	КонецЕсли;
	
	//Второй проход: Выполняем обработку событий на сервере
	Для Каждого ТекОбработчик Из Обработчики Цикл
	
		Если НЕ ТекОбработчик.ОбрабатыватьНаСервере Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТекОбработчик.ОтложеннаяОбработка Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТекОбработчик.ОжидатьЗавершения Тогда
			ВыполнитьОбработчикСобытия(ТочкаВозникновения
									 , ИдСобытия
									 , Источник
									 , ДатаСобытия
									 , МоментСобытия
									 , Событие
									 , ТекОбработчик.Обработчик
									 , ПараметрыСобытия);
		Иначе
			ВыполнитьОбработчикСобытияВФоне(ТочкаВозникновения
										  , ИдСобытия
										  , Источник
										  , ДатаСобытия
										  , МоментСобытия
										  , Событие
										  , ТекОбработчик.Обработчик
										  , ПараметрыСобытия);
		КонецЕсли;
									  
	КонецЦикла;
	
КонецПроцедуры //НачатьОбработкуСобытия()

// Функция - Получает список пользователей, для которых будет выполнен обработчик события на клиенте
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.				- Точка (ИБ), где возникло событие
//							ктв_сб_СобытияТочкиВозникновения
//  ИдСобыти			 - Строка							- Уникальный идентификатор события
//  Источник			 - ЛюбаяСсылка						- Источник возникновения события
//  Дата				 - Дата								- Дата и время возникновения события
//  Момент				 - Число							- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События		- Возникшее событие
//  Обработчик			 - СправочникСсылка.				- Обработчик события
//							ктв_сб_СобытияОбработчики
//  ПараметрыСобытия	 - Структура						- Параметры, сформированные при возникновении события//
//
// Возвращаемое значение:
//  Массив(СправочникСсылка.Пользователи) - Массив пользователей
//
Функция ПолучитьПользователей(ТочкаВозникновения = Неопределено
							  , ИдСобытия
							  , Источник
							  , Дата
							  , Момент
							  , Событие
							  , Обработчик
							  , ПараметрыСобытия) Экспорт
	
	Если НЕ ТипЗнч(ТочкаВозникновения) = Тип("СправочникСсылка.ктв_сб_СобытияТочкиВозникновения") Тогда
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.ЭтаИБ;
	КонецЕсли;
	
	ВремОбработка = Обработчик.Обработка.Получить();
	ВремОбработка = ?(ТипЗнч(ВремОбработка) = Тип("Строка"), ВремОбработка, ПолучитьНавигационнуюСсылку(Обработчик, "Обработка"));
	
	ОбработкаОбъект = ктв_сб_ОбработкиОбслуживания.ПолучитьОбработкуОбъект(ВремОбработка);
	
	Попытка
		
		Результат = Новый Массив();
		
		Результат = ОбработкаОбъект.ПолучитьПользователей(ТочкаВозникновения, ИдСобытия, Источник, Дата, Момент, Событие, Обработчик, ПараметрыСобытия);
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции //ПолучитьПользователей()

// Процедура - Выполняет обработчик события
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.				- Точка (ИБ), где возникло событие
//							ктв_сб_СобытияТочкиВозникновения
//  ИдСобытия			 - Строка							- Уникальный идентификатор события
//  Источник			 - ЛюбаяСсылка						- Источник возникновения события
//  Дата				 - Дата								- Дата и время возникновения события
//  Момент				 - Число							- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События		- Возникшее событие
//  Обработчик			 - СправочникСсылка.				- Обработчик события
//							ктв_сб_СобытияОбработчики
//  ПараметрыСобытия	 - Структура						- Параметры, сформированные при возникновении события
//
Процедура ВыполнитьОбработчикСобытия(ТочкаВозникновения = Неопределено
								   , ИдСобытия
								   , Источник
								   , Дата
								   , Момент
								   , Событие
								   , Обработчик
								   , ПараметрыСобытия) Экспорт
	
	Если НЕ ТипЗнч(ТочкаВозникновения) = Тип("СправочникСсылка.ктв_сб_СобытияТочкиВозникновения") Тогда
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.ЭтаИБ;
	КонецЕсли;
	
	ВремОбработка = Обработчик.Обработка.Получить();
	ВремОбработка = ?(ТипЗнч(ВремОбработка) = Тип("Строка"), ВремОбработка, ПолучитьНавигационнуюСсылку(Обработчик, "Обработка"));
	
	ОбработкаОбъект = ктв_сб_ОбработкиОбслуживания.ПолучитьОбработкуОбъект(ВремОбработка);
	
	ТекстОшибки = "";
	
	Попытка
		
		Результат = Неопределено;
		
		Результат = ОбработкаОбъект.ОбработатьСобытие(ТочкаВозникновения, ИдСобытия, Источник, Дата, Момент, Событие, Обработчик, ПараметрыСобытия);
		
		Если ПараметрыСобытия.Свойство("ТекстОшибки") Тогда
			ТекстОшибки = ПараметрыСобытия.ТекстОшибки;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ПараметрыСобытия.Свойство("ТекстОшибки") Тогда
			ПараметрыСобытия.ТекстОшибки = ПараметрыСобытия.ТекстОшибки + Символы.ПС + ТекстОшибки;
		Иначе
			ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
		КонецЕсли;
	КонецПопытки;
	
	ктв_сб_События.ЗаписатьРезультатОбработкиСобытия(ТочкаВозникновения
												, ИдСобытия
												, Событие
												, Обработчик
												, Результат
												, (НЕ ТекстОшибки = "")
												, ТекстОшибки);
	
КонецПроцедуры //ВыполнитьОбработчикСобытия()

// Процедура - Запускает выполнение обработчика события в фоне
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.
//							ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка							- Уникальный идентификатор события
//  Источник			 - ЛюбаяСсылка						- Источник возникновения события
//  Дата				 - Дата								- Дата и время возникновения события
//  Момент				 - Число							- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События		- Возникшее событие
//  Обработчик			 - СправочникСсылка.				- Обработчик события
//							ктв_сб_СобытияОбработчики
//  ПараметрыСобытия	 - Структура						- Параметры, сформированные при возникновении события
//
Процедура ВыполнитьОбработчикСобытияВФоне(ТочкаВозникновения = Неопределено
										, ИдСобытия
										, Источник
										, Дата
										, Момент
										, Событие
										, Обработчик
										, ПараметрыСобытия) Экспорт
	
	Если НЕ ТипЗнч(ТочкаВозникновения) = Тип("СправочникСсылка.ктв_сб_СобытияТочкиВозникновения") Тогда
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.ЭтаИБ;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Массив();
	ПараметрыОбработчика.Добавить(ТочкаВозникновения);
	ПараметрыОбработчика.Добавить(ИдСобытия);
	ПараметрыОбработчика.Добавить(Источник);
	ПараметрыОбработчика.Добавить(Дата);
	ПараметрыОбработчика.Добавить(Момент);
	ПараметрыОбработчика.Добавить(Событие);
	ПараметрыОбработчика.Добавить(Обработчик);
	ПараметрыОбработчика.Добавить(ПараметрыСобытия);
	
	ФоновыеЗадания.Выполнить("ктв_сб_События.ВыполнитьОбработчикСобытия",
							 ПараметрыОбработчика,
							 ИдСобытия + "_" + Обработчик.Ид,
							 СокрЛП(Событие) + " (" + СокрЛП(Источник) + ") - " + СокрЛП(Обработчик));
	
КонецПроцедуры //ВыполнитьОбработчикСобытияВФоне()

// Процедура - Записывает результат обработки события
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.
//							ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка							- Уникальный идентификатор события
//  Событие				 - СправочникСсылка.ктв_сб_События		- Возникшее событие
//  Обработчик			 - СправочникСсылка.				- Обработчик события
//							ктв_сб_СобытияОбработчики
//  Обработано			 - Булево							- Истина - Обработка события выполнена; Ложь - в противном случае
//  Ошибка				 - Булево							- Истина - В процессе выполнения обработки произошла ошибка; Ложь - в противном случае
//  ТекстОшибки			 - Строка							- Текст ошибки
//
Процедура ЗаписатьРезультатОбработкиСобытия(ТочкаВозникновения = Неопределено
										  , ИдСобытия
										  , Событие = Неопределено
										  , Обработчик
										  , Обработано = Неопределено
										  , Ошибка = Ложь
										  , ТекстОшибки = "") Экспорт
	
	Если НЕ ТипЗнч(ТочкаВозникновения) = Тип("СправочникСсылка.ктв_сб_СобытияТочкиВозникновения") Тогда
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.ЭтаИБ;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ктв_сб_СобытияОбработка.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ТочкаВозникновения);
	НаборЗаписей.Отбор.Ид.Установить(ИдСобытия);
	НаборЗаписей.Отбор.Обработчик.Установить(Обработчик);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.ТочкаВозникновения	= ТочкаВозникновения;
	Запись.Ид					= ИдСобытия;
	Запись.Событие				= ?(Событие = Неопределено, Запись.Событие, Событие);
	Запись.Обработчик			= Обработчик;
	
	Запись.Ошибка 				= Ошибка;
	Если Ошибка Тогда
		Запись.Обработано		= Истина;
		Запись.ТекстОшибки		= ТекстОшибки;
	Иначе
		Запись.Обработано		= ?(Обработано = Неопределено, Запись.Обработано, Обработано);
		Запись.ТекстОшибки		= "";
	КонецЕсли;
		
	НаборЗаписей.Записать();
	
КонецПроцедуры //ЗаписатьРезультатОбработкиСобытия()

// Процедура - Выполняет отложенное выполнение зарегистрированных обработчиков событий (регламентное задание)
//
Процедура СобытияОтложеннаяОбработка() Экспорт
	
	ЗапросОбработчиков = Новый Запрос("ВЫБРАТЬ
	                                  |	События.ТочкаВозникновения,
	                                  |	События.Ид,
	                                  |	События.Дата,
	                                  |	События.Момент,
	                                  |	События.Событие,
	                                  |	События.Источник,
	                                  |	События.Параметры,
	                                  |	События.Пользователь,
	                                  |	НазначенныеОбработчики.Обработчик,
	                                  |	НазначенныеОбработчики.ОжидатьЗавершения
	                                  |ИЗ
	                                  |	РегистрСведений.ктв_сб_События КАК События
	                                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ктв_сб_СобытияНазначенныеОбработчики КАК НазначенныеОбработчики
	                                  |		ПО События.Событие = НазначенныеОбработчики.Событие
	                                  |			И (События.ТипИсточника = НазначенныеОбработчики.ТипИсточникаИлиТочкаВозникновения
	                                  |				ИЛИ События.Источник = НазначенныеОбработчики.ТипИсточникаИлиТочкаВозникновения)
	                                  //|			И (НазначенныеОбработчики.ОтложеннаяОбработка) : Тут вопрос, нужно ли проверять флаг отложенной обработки или обрабатывать все "не обработанное"
	                                  |			И (НазначенныеОбработчики.ОбрабатыватьНаСервере)
	                                  |
	                                  |УПОРЯДОЧИТЬ ПО
	                                  |	События.Дата,
	                                  |	События.Момент,
	                                  |	События.Ид");
									  
	Результат = ЗапросОбработчиков.Выполнить();
	
	ВыборкаОбработчиков = Результат.Выбрать();
	
	Пока ВыборкаОбработчиков.Следующий() Цикл
		
		Если ВыборкаОбработчиков.ОжидатьЗавершения Тогда
			ВыполнитьОбработчикСобытия(ВыборкаОбработчиков.ТочкаВозникновения
									 , ВыборкаОбработчиков.Ид
									 , ВыборкаОбработчиков.Источник
									 , ВыборкаОбработчиков.Дата
									 , ВыборкаОбработчиков.Момент
									 , ВыборкаОбработчиков.Событие
									 , ВыборкаОбработчиков.Обработчик
									 , ВыборкаОбработчиков.Параметры.Получить());
		Иначе
			ВыполнитьОбработчикСобытияВФоне(ВыборкаОбработчиков.ТочкаВозникновения
										  , ВыборкаОбработчиков.Ид
										  , ВыборкаОбработчиков.Источник
										  , ВыборкаОбработчиков.Дата
										  , ВыборкаОбработчиков.Момент
										  , ВыборкаОбработчиков.Событие
										  , ВыборкаОбработчиков.Обработчик
										  , ВыборкаОбработчиков.Параметры.Получить());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //СобытияОтложеннаяОбработка()

// Процедура - Выполняет удаление событий с истекшим временем жизни и их обработчиков из журналов (регламентное задание)
//
Процедура СобытияУдалениеОбработанных() Экспорт
	
	ЗапросУдаляемых = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                               |	ЖурналСобытий.ТочкаВозникновения,
	                               |	ЖурналСобытий.Ид,
	                               |	ЖурналСобытий.Источник
	                               |ИЗ
	                               |	РегистрСведений.ктв_сб_События КАК ЖурналСобытий
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ктв_сб_События КАК События
	                               |		ПО ЖурналСобытий.Событие = События.Ссылка
	                               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                               |			СобытияОбработка.ТочкаВозникновения КАК ТочкаВозникновения,
	                               |			СобытияОбработка.Ид КАК Ид,
	                               |			МАКСИМУМ(СобытияОбработка.Ошибка) КАК Ошибка,
	                               |			СобытияОбработка.Обработано КАК Обработано
	                               |		ИЗ
	                               |			(ВЫБРАТЬ
	                               |				СобытияОбработка.ТочкаВозникновения КАК ТочкаВозникновения,
	                               |				СобытияОбработка.Ид КАК Ид,
	                               |				СобытияОбработка.Ошибка КАК Ошибка,
	                               |				СобытияОбработка.Обработано КАК Обработано
	                               |			ИЗ
	                               |				РегистрСведений.ктв_сб_СобытияОбработка КАК СобытияОбработка
	                               |			ГДЕ
	                               |				(СобытияОбработка.Ошибка
	                               |						ИЛИ НЕ СобытияОбработка.Обработано)
	                               |			
	                               |			ОБЪЕДИНИТЬ
	                               |			
	                               |			ВЫБРАТЬ
	                               |				СобытияОбработка.ТочкаВозникновения,
	                               |				СобытияОбработка.Ид,
	                               |				СобытияОбработка.Ошибка,
	                               |				СобытияОбработка.Обработано
	                               |			ИЗ
	                               |				РегистрСведений.ктв_сб_СобытияОбработкаНаКлиенте КАК СобытияОбработка
	                               |			ГДЕ
	                               |				НЕ СобытияОбработка.Обработано) КАК СобытияОбработка
	                               |		ГДЕ
	                               |			(СобытияОбработка.Ошибка
	                               |					ИЛИ НЕ СобытияОбработка.Обработано)
	                               |		
	                               |		СГРУППИРОВАТЬ ПО
	                               |			СобытияОбработка.ТочкаВозникновения,
	                               |			СобытияОбработка.Ид,
	                               |			СобытияОбработка.Обработано) КАК СобытияОбработка
	                               |		ПО ЖурналСобытий.ТочкаВозникновения = СобытияОбработка.ТочкаВозникновения
	                               |			И ЖурналСобытий.Ид = СобытияОбработка.Ид
	                               |ГДЕ
	                               |	ДОБАВИТЬКДАТЕ(ЖурналСобытий.Дата, СЕКУНДА, События.ВремяЖизни) < &ТекущаяДата
	                               |	И ЕСТЬNULL(События.ВремяЖизни, 0) > 0
	                               |	И НЕ ЖурналСобытий.Ошибка
	                               |	И НЕ ЕСТЬNULL(СобытияОбработка.Ошибка, ЛОЖЬ)
	                               |	И ЕСТЬNULL(СобытияОбработка.Обработано, ИСТИНА)");
									  
	ЗапросУдаляемых.УстановитьПараметр("ТекущаяДата", ТекущаяУниверсальнаяДата());
	
	Результат = ЗапросУдаляемых.Выполнить();
	
	ВыборкаУдаляемых = Результат.Выбрать();
	
	Пока ВыборкаУдаляемых.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ктв_сб_СобытияОбработкаНаКлиенте.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ВыборкаУдаляемых.ТочкаВозникновения);
		НаборЗаписей.Отбор.Ид.Установить(ВыборкаУдаляемых.Ид);
		
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ктв_сб_СобытияОбработка.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ВыборкаУдаляемых.ТочкаВозникновения);
		НаборЗаписей.Отбор.Ид.Установить(ВыборкаУдаляемых.Ид);
		
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ктв_сб_События.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ВыборкаУдаляемых.ТочкаВозникновения);
		НаборЗаписей.Отбор.Ид.Установить(ВыборкаУдаляемых.Ид);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры //СобытияУдалениеОбработанных()

// Функция - Получает список обработчиков событий, которые необходимо выполнить на стороне клиента
// 
// Возвращаемое значение:
//  Массив(Структура) - Массив описаний обработчиков событий
//
Функция ПолучитьОбработчикиСобытийДляВыполненияНаКлиенте() Экспорт
	
	ЗапросОбработчиков = Новый Запрос("ВЫБРАТЬ
	                                  |	СобытияОбработка.ТочкаВозникновения КАК ТочкаВозникновения,
	                                  |	СобытияОбработка.Ид КАК Ид,
	                                  |	События.Дата КАК Дата,
	                                  |	События.Момент КАК Момент,
	                                  |	События.Событие,
	                                  |	События.Источник,
	                                  |	СобытияОбработка.Пользователь,
	                                  |	События.Параметры,
	                                  |	СобытияОбработка.Обработчик
	                                  |ИЗ
	                                  |	РегистрСведений.ктв_сб_СобытияОбработкаНаКлиенте КАК СобытияОбработка
	                                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ктв_сб_События КАК События
	                                  |		ПО СобытияОбработка.Ид = События.Ид
	                                  |ГДЕ
	                                  |	НЕ СобытияОбработка.Обработано
	                                  |	И СобытияОбработка.Пользователь = &ТекущийПользователь
	                                  |
	                                  |УПОРЯДОЧИТЬ ПО
	                                  |	Дата,
	                                  |	Момент,
	                                  |	Ид");
	ЗапросОбработчиков.УстановитьПараметр("ТекущийПользователь", Справочники.Пользователи.ТекущийПользователь());
	
	Результат = ЗапросОбработчиков.Выполнить();
	
	МассивОбработчиков = Новый Массив();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеОбработчика = Новый Структура("ТочкаВозникновения,
											  |Ид,
											  |Дата,
											  |Момент,
											  |Событие,
											  |Источник,
											  |Пользователь,
											  |Обработчик");
		
		ЗаполнитьЗначенияСвойств(ОписаниеОбработчика, Выборка);
		Описаниеобработчика.Вставить("Параметры", Выборка.Параметры.Получить());
		
		МассивОбработчиков.Добавить(ОписаниеОбработчика);
		
	КонецЦикла;
	
	Возврат МассивОбработчиков;
	
КонецФункции //ПолучитьОбработчикиСобытийДляВыполненияНаКлиенте()

// Процедура - Записывает результат обработки события на стороне клиента
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.
//							ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка							- Уникальный идентификатор события
//  Событие				 - СправочникСсылка.ктв_сб_События		- Возникшее событие
//  Обработчик			 - СправочникСсылка.				- Обработчик события
//							ктв_сб_СобытияОбработчики
//  Пользователь		 - СправочникСсылка.Пользователи	- Пользователь для которого выполнялась обработка события
//  Обработано			 - Булево							- Истина - Обработка события выполнена; Ложь - в противном случае
//  Ошибка				 - Булево							- Истина - В процессе выполнения обработки произошла ошибка; Ложь - в противном случае
//  ТекстОшибки			 - Строка							- Текст ошибки
//
Процедура ЗаписатьРезультатОбработкиСобытияНаКлиенте(ТочкаВозникновения = Неопределено
										  , ИдСобытия
										  , Событие = Неопределено
										  , Обработчик
										  , Пользователь = Неопределено
										  , Обработано = Неопределено
										  , Ошибка = Ложь
										  , ТекстОшибки = "") Экспорт
	
	Если НЕ ТипЗнч(ТочкаВозникновения) = Тип("СправочникСсылка.ктв_сб_СобытияТочкиВозникновения") Тогда
		ТочкаВозникновения = Справочники.ктв_сб_СобытияТочкиВозникновения.ЭтаИБ;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = Справочники.Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ктв_сб_СобытияОбработкаНаКлиенте.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТочкаВозникновения.Установить(ТочкаВозникновения);
	НаборЗаписей.Отбор.Ид.Установить(ИдСобытия);
	НаборЗаписей.Отбор.Обработчик.Установить(Обработчик);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.ТочкаВозникновения	= ТочкаВозникновения;
	Запись.Ид					= ИдСобытия;
	Запись.Событие				= ?(Событие = Неопределено, Запись.Событие, Событие);
	Запись.Обработчик			= Обработчик;
	Запись.Пользователь			= Пользователь;
	
	Запись.Ошибка 				= Ошибка;
	Если Ошибка Тогда
		Запись.Обработано		= Истина;
		Запись.ТекстОшибки		= ТекстОшибки;
	Иначе
		Запись.Обработано		= ?(Обработано = Неопределено, Запись.Обработано, Обработано);
		Запись.ТекстОшибки		= "";
	КонецЕсли;
		
		
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры //ЗаписатьРезультатОбработкиСобытияНаКлиенте()

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Процедура - Обработчик подписки на событие "ПриКопировании" для всех ссылочных объектов
//
// Параметры:
//  Источник			 - ЛюбойОбъект		 - Объект в котором возникло событие
//  ОбъектКопирования	 - ЛюбойОбъект		 - Исходный элемент, который является источником копирования
//
Процедура СобытияВсеОбъектыПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"		, "ПриКопировании");
	ПараметрыПодписки.Вставить("ОбъектКопирования"	, ОбъектКопирования);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеОбъектыПриКопировании()

// Процедура - Обработчик подписки на событие "ПередЗаписью" для всех ссылочных объектов, кроме документов
//
// Параметры:
//  Источник			 - ЛюбойОбъект		 - Объект в котором возникло событие
//  Отказ				 - Булево			 - Истина - Отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияВсеОбъектыКромеДокументовПередЗаписью(Источник, Отказ) Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПередЗаписью");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеОбъектыКромеДокументовПередЗаписью()

// Процедура - Обработчик подписки на событие "ПередЗаписью" для документов
//
// Параметры:
//  Источник			 - ДокументОбъект	 - Объект в котором возникло событие
//  Отказ				 - Булево			 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"		, "ПередЗаписью");
	ПараметрыПодписки.Вставить("Отказ"				, Отказ);
	ПараметрыПодписки.Вставить("РежимЗаписи"		, РежимЗаписи);
	ПараметрыПодписки.Вставить("РежимПроведения"	, РежимПроведения);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияДокументыПередЗаписью()

// Процедура - Обработчик подписки на событие "ПриЗаписи" для всех ссылочных объектов
//
// Параметры:
//  Источник			 - ЛюбойОбъект	 - Объект в котором возникло событие
//  Отказ				 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияВсеОбъектыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПриЗаписи");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеОбъектыПриЗаписи()

// Процедура - Обработчик подписки на событие "ПередУдалением" для всех ссылочных объектов
//
// Параметры:
//  Источник			 - ЛюбойОбъект	 - Объект в котором возникло событие
//  Отказ				 - Булево		 - Истина - Отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияВсеОбъектыПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПередУдалением");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеОбъектыПередУдалением()

// Процедура - Обработчик подписки на событие "ОбработкаЗаполнения" для всех ссылочных объектов
//
// Параметры:
//  Источник			 - ЛюбойОбъект	 - Объект в котором возникло событие
//  ДанныеЗаполнения	 - Произвольный	 - Основание для заполнения
//  ТекстЗаполнения		 - Строка		 - Текст для заполнения Наименования/Кода
//  СтандартнаяОбработка - Булево		 - Признак стандартной (системной) обработки события
//
Процедура СобытияВсеОбъектыОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"			, "ОбработкаЗаполнения");
	ПараметрыПодписки.Вставить("ДанныеЗаполнения"		, ДанныеЗаполнения);
	ПараметрыПодписки.Вставить("ТекстЗаполнения"		, ТекстЗаполнения);
	ПараметрыПодписки.Вставить("СтандартнаяОбработка"	, СтандартнаяОбработка);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеОбъектыОбработкаЗаполнения()

// Процедура - Обработчик подписки на событие "ОбработкаПроверкиЗаполнения" для всех ссылочных объектов
//
// Параметры:
//  Источник			 - ЛюбойОбъект	 - Объект в котором возникло событие
//  Отказ				 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//  ПроверяемыеРеквизиты - Массив		 - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура СобытияВсеОбъектыОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"			, "ОбработкаПроверкиЗаполнения");
	ПараметрыПодписки.Вставить("Отказ"					, Отказ);
	ПараметрыПодписки.Вставить("ПроверяемыеРеквизиты"	, ПроверяемыеРеквизиты);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеОбъектыОбработкаПроверкиЗаполнения()

// Процедура - Обработчик подписки на событие "ОбработкаПроведения" для документов
//
// Параметры:
//  Источник			 - ДокументОбъект			 - Объект в котором возникло событие
//  Отказ				 - Булево					 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//  РежимПроведения		 - РежимПроведенияДокумента	 - Текущий режим проведения
//
Процедура СобытияДокументыОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ОбработкаПроведения");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	ПараметрыПодписки.Вставить("РежимПроведения", РежимПроведения);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияДокументыОбработкаПроведения()

// Процедура - Обработчик подписки на событие "ОбработкаУдаленияПроведения" для документов
//
// Параметры:
//  Источник			 - ДокументОбъект			 - Объект в котором возникло событие
//  Отказ				 - Булево					 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияДокументыОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ОбработкаУдаленияПроведения");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияДокументыОбработкаУдаленияПроведения()

// Процедура - Обработчик подписки на событие "ОбработкаИнтерактивнойАктивации" для бизнес-процессов и задач
//
// Параметры:
//  Источник			 - БизнесПроцессОбъект, ЗадачаОбъект	 - Объект в котором возникло событие
//  СтандартнаяОбработка - Булево								 - Признак стандартной (системной) обработки события
//
Процедура СобытияБизнессПроцессыЗадачиОбработкаИнтерактивнойАктивации(Источник, СтандартнаяОбработка) Экспорт
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"			, "ОбработкаИнтерактивнойАктивации");
	ПараметрыПодписки.Вставить("СтандартнаяОбработка"	, СтандартнаяОбработка);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияБизнессПроцессыЗадачиОбработкаИнтерактивнойАктивации()

// Процедура - Обработчик подписки на событие "ОбработкаПроверкиВыполнения" для задач
//
// Параметры:
//  Источник	 - ЗадачаОбъект	 - Объект в котором возникло событие
//  Результат	 - Булево		 - Истина - задача выполнена
//
Процедура СобытияЗадачиОбработкаПроверкиВыполнения(Источник, Результат) Экспорт
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ОбработкаПроверкиВыполнения");
	ПараметрыПодписки.Вставить("Результат"		, Результат);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияЗадачиОбработкаПроверкиВыполнения()

// Процедура - Обработчик подписки на событие "ПередВыполнением" для задач
//
// Параметры:
//  Источник	 - ЗадачаОбъект	 - Объект в котором возникло событие
//  Отказ		 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияЗадачиПередВыполнением(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПередВыполнением");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияЗадачиПередВыполнением()

// Процедура - Обработчик подписки на событие "ПередИнтерактивнымВыполнением" для задач
//
// Параметры:
//  Источник	 - ЗадачаОбъект	 - Объект в котором возникло событие
//  Отказ		 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияЗадачиПередИнтерактивнымВыполнением(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПередВыполнением");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияЗадачиПередИнтерактивнымВыполнением()

// Процедура - Обработчик подписки на событие "ПриВыполнении" для задач
//
// Параметры:
//  Источник	 - ЗадачаОбъект	 - Объект в котором возникло событие
//  Отказ		 - Булево		 - Истина - Отказ от продолжения обработки события, Ложь - продолжить обработку события.
//
Процедура СобытияЗадачиПриВыполнении(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПриВыполнении");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияЗадачиПриВыполнении()

// Процедура - Обработчик подписки на событие "ОбработкаПроверкиЗаполнения" для всех наборов записей
//
// Параметры:
//  Источник			 - НаборЗаписей	 - Набор записей регистра в котором возникло событие
//  Отказ				 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//  ПроверяемыеРеквизиты - Массив		 - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура СобытияВсеНаборыЗаписейОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"			, "ОбработкаПроверкиЗаполнения");
	ПараметрыПодписки.Вставить("Отказ"					, Отказ);
	ПараметрыПодписки.Вставить("ПроверяемыеРеквизиты"	, ПроверяемыеРеквизиты);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеНаборыЗаписейОбработкаПроверкиЗаполнения()

// Процедура - Обработчик подписки на событие "ПередЗаписью" для всех наборов записей, кроме регистров расчета
//
// Параметры:
//  Источник	 - НаборЗаписей	 - Набор записей регистра в котором возникло событие
//  Отказ		 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//  Замещение	 - Булево		 - Истина - заменить существующие данные, Ложь - дополнить существующие данные
//
Процедура СобытияВсеНаборыЗаписейКромеРегистраРасчетовПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПередЗаписью");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	ПараметрыПодписки.Вставить("Замещение"		, Замещение);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеНаборыЗаписейКромеРегистраРасчетовПередЗаписью()

// Процедура - Обработчик подписки на событие "ПриЗаписи" для всех наборов записей, кроме регистров расчета
//
// Параметры:
//  Источник	 - НаборЗаписей	 - Набор записей регистра в котором возникло событие
//  Отказ		 - Булево		 - Истина - отказ от продолжения обработки события, Ложь - продолжить обработку события.
//  Замещение	 - Булево		 - Истина - заменить существующие данные, Ложь - дополнить существующие данные
//
Процедура СобытияВсеНаборыЗаписейКромеРегистраРасчетовПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"	, "ПриЗаписи");
	ПараметрыПодписки.Вставить("Отказ"			, Отказ);
	ПараметрыПодписки.Вставить("Замещение"		, Замещение);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияВсеНаборыЗаписейКромеРегистраРасчетовПриЗаписи()

// Процедура - События регистры сведений обработка заполнения
//
// Параметры:
//  Источник			 - РегистрСведенийНаборЗаписей	 - Набор записей регистра в котором возникло событие
//  ДанныеЗаполнения	 - Произвольный					 - Основание для заполнения
//  СтандартнаяОбработка - Булево						 - Признак стандартной (системной) обработки события
//
Процедура СобытияРегистрыСведенийОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ПараметрыПодписки = Новый Структура();
	ПараметрыПодписки.Вставить("МоментПроверки"			, "ОбработкаЗаполнения");
	ПараметрыПодписки.Вставить("ДанныеЗаполнения"		, ДанныеЗаполнения);
	ПараметрыПодписки.Вставить("СтандартнаяОбработка"	, СтандартнаяОбработка);
	
	ПроверитьЗарегистрироватьВозникшиеСобытия(Источник, ПараметрыПодписки);
	
КонецПроцедуры //СобытияРегистрыСведенийОбработкаЗаполнения()

#КонецОбласти
