
#Область ПрограммныйИнтерфейс

// Функция - Подтверждает, что обработка является обработкой обслуживания
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ЭтоОбработкаВыполненияОбработчика() Экспорт
	
	Возврат Истина;
	
КонецФункции //ЭтоОбработкаВыполненияОбработчика()

// Функция - Получает форму обработчиков команд, где расположены процедуры-обработчики команд
// 			 из списка действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  Строка - Имя формы обработчиков комманд
//
Функция ПолучитьФормуОбработчиковКоманд() Экспорт
	
	Возврат "Форма";
	
КонецФункции //ПолучитьФормуОбработчиковКоманд()

// Функция - Получает список действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  СписокЗначений - Список действий
//
Функция ПолучитьСписокДействийКнопкиОткрытия() Экспорт
	
	СписокДействий = Новый СписокЗначений();
	
	Возврат СписокДействий;
	
КонецФункции //ПолучитьСписокДействийКнопкиОткрытия()

// Функция - Выполняет обработчик события
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка											- Уникальный идентификатор события
//  Источник			 - ЛюбаяСсылка										- Источник возникновения события
//  Дата				 - Дата												- Дата и время возникновения события
//  Момент				 - Число											- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События						- Возникшее событие
//  Обработчик			 - СправочникСсылка.ктв_сб_СобытияОбработчики			- Обработчик события
//  ПараметрыСобытия	 - Структура										- Параметры, сформированные при возникновении события
// 
// Возвращаемое значение:
//  Булево - Истина - Обработка выполнена успешно, Ложь - в противном случае
//
Функция ОбработатьСобытие(ТочкаВозникновения
						, ИдСобытия
						, Источник
						, Дата
						, Момент
						, Событие
						, Обработчик
						, ПараметрыСобытия) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыСобытия) = Тип("Структура") Тогда
		ПараметрыСобытия = Новый Структура();
	КонецЕсли;
	
	ПараметрыСобытия.Вставить("ПредставлениеИсточника", СокрЛП(Источник));
	
	Настройка = Обработчик.ОбработкаНастройки.Получить();
	Если НЕ ТипЗнч(Настройка) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресРепозитория = Неопределено;
	Если НЕ Настройка.Свойство("АдресРепозитория", АдресРепозитория) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТипЗнч(АдресРепозитория) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыСобытия.Свойство("ДанныеОбъекта") Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаОбъект = Источник.Метаданные();
	
	МассивКаталогов = СтрРазделить(МетаОбъект.ПолноеИмя(), ".");
	
	РазделительПути = ПолучитьРазделительПути();
	
	ПутьКФайлу = СокрЛП(АдресРепозитория) + ?(Прав(АдресРепозитория, 1) = РазделительПути, "", РазделительПути);
	
	Для й = 0 По МассивКаталогов.ВГраница() Цикл
		
		ПутьКФайлу = ПутьКФайлу + МассивКаталогов[й];
			
		Файл = Новый Файл(ПутьКФайлу);
			
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(ПутьКФайлу);
		КонецЕсли;
			
		ПутьКФайлу = ПутьКФайлу + РазделительПути;
			
	КонецЦикла;
	
	ПутьКФайлу = ПутьКФайлу + СокрЛП(Источник.Ссылка.УникальныйИдентификатор()) + ".xml";
	
	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст(ПараметрыСобытия.ДанныеОбъекта);
	Текст.Записать(ПутьКФайлу);
	
	ПоместитьВГИТ(СокрЛП(АдресРепозитория), СтрЗаменить(ПутьКФайлу, СокрЛП(АдресРепозитория), "."), Дата, "Изменен объект: " + СокрЛП(МетаОбъект.ПолноеИмя()) + "." + СокрЛП(Источник));
	
	Возврат Истина;
	
КонецФункции //ОбработатьСобытие()

#КонецОбласти

Процедура ПоместитьВГИТ(КаталогРабочейКопии, ИмяФайла, Знач Дата, Знач Комментарий = "")
	
	ЭтоWindows = Истина;
	ПрефиксЭкспортаПеременной = ?(ЭтоWindows, "set", "export");
	
	ИмяФайлаКомментария = ПолучитьИмяВременногоФайла("txt");
	ФайлКомментария = Новый ЗаписьТекста(ИмяФайлаКомментария, КодировкаТекста.UTF8);
	ФайлКомментария.Записать(?(ПустаяСтрока(Комментарий), ".", Комментарий));
	ФайлКомментария.Закрыть();
	
	ИмяКомандногоФайла = ПолучитьИмяВременногоФайла("bat");
	
	КомандныйФайл = Новый ТекстовыйДокумент();
	
	Если ЭтоWindows Тогда
		КомандныйФайл.ДобавитьСтроку("cd /d " + ОбернутьВКавычки(КаталогРабочейКопии));
	Иначе
		КомандныйФайл.ДобавитьСтроку("cd " + ОбернутьВКавычки(КаталогРабочейКопии));
	КонецЕсли;
	
	КомандныйФайл.ДобавитьСтроку(ПрефиксЭкспортаПеременной + "  GIT_AUTHOR_DATE=" + ОбернутьВКавычки(ДатаPOSIX(Дата)));
	КомандныйФайл.ДобавитьСтроку(ПрефиксЭкспортаПеременной + " GIT_COMMITTER_DATE=" + ОбернутьВКавычки(ДатаPOSIX(Дата)));
	//КомандныйФайл.ДобавитьСтроку("git add -A .");
	КомандныйФайл.ДобавитьСтроку("git add " + ОбернутьВКавычки(ИмяФайла) + " " + СуффиксПеренаправленияВывода(КаталогРабочейКопии + "\..\EvtLog.txt", Истина));
	
	Автор = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь());
	авторДляГит = Автор;
	Если Найти(Автор, "<") <= Найти(Автор, ">") Тогда
		авторДляГит = Автор + " <" + Автор + "@localhost>"; // e-mail может быть удобен для поиска в связанных системах //авторДляГит = Автор+" <"+Автор+">";
	КонецЕсли;
	
	КомандаКоммита = "git commit --file=" + ОбернутьВКавычки(ИмяФайлаКомментария) + " --author=" + ОбернутьВКавычки(авторДляГит) + " " + СуффиксПеренаправленияВывода(КаталогРабочейКопии + "\..\EvtLog.txt", Истина);
	КомандныйФайл.ДобавитьСтроку(КомандаКоммита);
	КомандныйФайл.ДобавитьСтроку("exit " + ?(ЭтоWindows, "/b %ERRORLEVEL%", "$#"));
	
	КомандныйФайл.Записать(ИмяКомандногоФайла, "cp866");
	
	КодВозврата = -1;
	
	ЗапуститьПриложение(ИмяКомандногоФайла, , Истина, КодВозврата);
	
КонецПроцедуры

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции

Функция ДатаPOSIX(Знач Дата)

	Возврат "" + Формат(Год(Дата), "ЧГ=0") + "-" + ФорматДвузначноеЧисло(Месяц(Дата)) + "-" + ФорматДвузначноеЧисло(День(Дата)) + " "
			+ ФорматДвузначноеЧисло(Час(Дата)) + ":" + ФорматДвузначноеЧисло(Минута(Дата)) + ":" + ФорматДвузначноеЧисло(Секунда(Дата));

КонецФункции
		
Функция ФорматДвузначноеЧисло(ЗначениеЧисло)
	С = Строка(ЗначениеЧисло);
	Если СтрДлина(С) < 2 Тогда
		С = "0" + С;
	КонецЕсли;

	Возврат С;
КонецФункции

Функция СуффиксПеренаправленияВывода(Знач ИмяФайлаПриемника, Знач УчитыватьStdErr = Истина)
	Возврат "> """ + ИмяФайлаПриемника + """" + ?(УчитыватьStdErr, " 2>&1", "");
КонецФункции

