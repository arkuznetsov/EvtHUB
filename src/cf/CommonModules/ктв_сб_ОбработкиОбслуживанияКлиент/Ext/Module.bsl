////////////////////////////////////////////////////////////////////////////////
// Библиотека подключаемых обработок обслуживания. (Клиент)
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийЭлементаВыбораОбработкиВФорме

// Процедура - Обработчик события "НачалоВыбора" элемента выбора обработки обслуживания в форме
//
// Параметры:
//  Элемент								 - ЭлементФормы				 - (служебный) Необходимо перезать значение параметра "Элемент" из вызывающей процедуры
//  ДанныеВыбора						 - СписокЗначений			 - (служебный) Необходимо перезать значение параметра "ДанныеВыбора" из вызывающей процедуры
//  СтандартнаяОбработка				 - Булево					 - (служебный) Необходимо перезать значение параметра "СтандартнаяОбработка" из вызывающей процедуры
//  Форма								 - УправляемаяФорма			 - Форма в которой выполняется выбор обработки обслуживания
//  ПутьКДаннымОбработкаАдресВХранилище	 - Строка					 - Путь к реквизиту формы, в котором хранится адрес обработки во временном хранилище
//  ПутьКДаннымОбработкаПредставление	 - Строка					 - Путь к реквизиту формы, в котором хранится представление обработки
//  ПутьКДаннымОбработкаНастройкиАдресВХранилище	 - Строка		 - Путь к реквизиту формы, в котором хранится адрес настроек обработки во временном хранилище
//  ПрефиксОбработки					 - Строка					 - Начало имени обработки для отбора обработок конфигурации
//  ИмяКонтрольнойПроцедуры				 - Строка					 - Имя функции модуля объекта обработки, вызываемой для проверки, что обработка является обработкой обслуживания
//  ПараметрыКонтрольнойПроцедуры		 - Массив					 - Парметры функции, вызываемой для проверки
//
Процедура ОбработкаОбслуживанияНачалоВыбора(Элемент
										  , ДанныеВыбора
										  , СтандартнаяОбработка
										  , Форма
										  , ПутьКДаннымОбработкаАдресВХранилище
										  , ПутьКДаннымОбработкаПредставление
										  , ПутьКДаннымОбработкаНастройкиАдресВХранилище
										  , ПрефиксОбработки
										  , ИмяКонтрольнойПроцедуры = Неопределено
										  , ПараметрыКонтрольнойПроцедуры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Параметры = Новый Структура("Форма,
								|ПутьКДаннымОбработкаАдресВХранилище,
								|ПутьКДаннымОбработкаПредставление,
								|ПутьКДаннымОбработкаНастройкиАдресВХранилище,
								|ИмяКонтрольнойПроцедуры,
								|ПараметрыКонтрольнойПроцедуры",
								Форма,
								ПутьКДаннымОбработкаАдресВХранилище,
								ПутьКДаннымОбработкаПредставление,
								ПутьКДаннымОбработкаНастройкиАдресВХранилище,
								ИмяКонтрольнойПроцедуры,
								ПараметрыКонтрольнойПроцедуры);
								
	ОповещениеВыбораОбработкиОбслуживания = Новый ОписаниеОповещения("ОбработкаОбслуживанияНачалоВыбораОбработка", ктв_сб_ОбработкиОбслуживанияКлиент, Параметры);
	
	ВремМеню = ктв_сб_ОбработкиОбслуживанияВызовСервера.ПолучитьСписокОбработокОбслуживания(ПрефиксОбработки, ИмяКонтрольнойПроцедуры, ПараметрыКонтрольнойПроцедуры);
	ВремМеню.Добавить("ВыбратьИзФайла", "Выбрать из файла...");
	
	Форма.ПоказатьВыборИзМеню(ОповещениеВыбораОбработкиОбслуживания, ВремМеню, Элемент);
	
КонецПроцедуры //ОбработкаОбслуживанияНачалоВыбора()

// Процедура - Продолжение обработчика события "НачалоВыбора" элемента выбора обработки обслуживания в форме
//				после выполнения выбора элемента из меню
//
// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений	 - Выбранный пункт меню
//  Параметры		 - Структура				 - Параметры переданные из обработчика события "НачалоВыбора"
//
Процедура ОбработкаОбслуживанияНачалоВыбораОбработка(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	ПутьКДаннымОбработкаАдресВХранилище				= Параметры.ПутьКДаннымОбработкаАдресВХранилище;
	ПутьКДаннымОбработкаПредставление				= Параметры.ПутьКДаннымОбработкаПредставление;
	ПутьКДаннымОбработкаНастройкиАдресВХранилище	= Параметры.ПутьКДаннымОбработкаНастройкиАдресВХранилище;
	
	Если ВыбранныйЭлемент.Значение = "ВыбратьИзФайла" Тогда
		ОповещениеВыбораФайлаОбработкиОбслуживания = Новый ОписаниеОповещения("ОбработкаОбслуживанияНачалоВыбораОбработкаВыбораФайла", ктв_сб_ОбработкиОбслуживанияКлиент, Параметры);
		НачатьПомещениеФайла(ОповещениеВыбораФайлаОбработкиОбслуживания, , , Истина, Форма.УникальныйИдентификатор);
	Иначе
		Форма[ПутьКДаннымОбработкаАдресВХранилище]			= ПоместитьВоВременноеХранилище(ВыбранныйЭлемент.Значение, Форма.УникальныйИдентификатор);
		Форма[ПутьКДаннымОбработкаПредставление]			= ВыбранныйЭлемент.Представление;
		Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище] = ПоместитьВоВременноеХранилище(Новый Структура(), Форма.УникальныйИдентификатор);
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОбслуживанияНачалоВыбораОбработка()

// Процедура - Продолжение обработчика события "НачалоВыбора" элемента выбора обработки обслуживания в форме
//				после выполнения выбора файла внешней обработки
//
// Параметры:
//  Результат			 - Булево	 - Истина - файл выбран
//  Адрес				 - Строка	 - Адрес временного хранилища выбранного файла
//  ВыбранноеИмяФайла	 - Строка	 - Имя файла
//  Параметры		 - Структура				 - Параметры переданные из обработчика события "НачалоВыбора"
//
Процедура ОбработкаОбслуживанияНачалоВыбораОбработкаВыбораФайла(Результат, Адрес, ВыбранноеИмяФайла, Параметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	ПутьКДаннымОбработкаАдресВХранилище				= Параметры.ПутьКДаннымОбработкаАдресВХранилище;
	ПутьКДаннымОбработкаПредставление				= Параметры.ПутьКДаннымОбработкаПредставление;
	ПутьКДаннымОбработкаНастройкиАдресВХранилище	= Параметры.ПутьКДаннымОбработкаНастройкиАдресВХранилище;
	ИмяКонтрольнойПроцедуры							= Параметры.ИмяКонтрольнойПроцедуры;
	ПараметрыКонтрольнойПроцедуры					= Параметры.ПараметрыКонтрольнойПроцедуры;
	
	Если НЕ ктв_сб_ОбработкиОбслуживанияВызовСервера.ЭтоОбработкаОбслуживания(Адрес, ИмяКонтрольнойПроцедуры, ПараметрыКонтрольнойПроцедуры) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбранный файл не является обработкой обслуживания!", , ПутьКДаннымОбработкаПредставление);
		Возврат;
	КонецЕсли;
	
	ОписаниеОбработки = ктв_сб_ОбработкиОбслуживанияВызовСервера.ПолучитьОписаниеОбработкиОбслуживания(Адрес);
	
	Форма[ПутьКДаннымОбработкаАдресВХранилище]			= Адрес;
	Форма[ПутьКДаннымОбработкаПредставление]			= ОписаниеОбработки.ПредставлениеОбработки;
	Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище]	= ПоместитьВоВременноеХранилище(Новый Структура(), Форма.УникальныйИдентификатор);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры //ОбработкаОбслуживанияНачалоВыбораОбработкаВыбораФайла()

// Процедура - Обработчик события "Очистка" элемента выбора обработки обслуживания в форме
//
// Параметры:
//  Элемент								 - ЭлементФормы				 - (служебный) Необходимо перезать значение параметра "Элемент" из вызывающей процедуры
//  СтандартнаяОбработка				 - Булево					 - (служебный) Необходимо перезать значение параметра "СтандартнаяОбработка" из вызывающей процедуры
//  Форма								 - УправляемаяФорма			 - Форма в которой выполняется выбор обработки обслуживания
//  ПутьКДаннымОбработкаАдресВХранилище	 - Строка					 - Путь к реквизиту формы, в котором хранится адрес обработки во временном хранилище
//  ПутьКДаннымОбработкаПредставление	 - Строка					 - Путь к реквизиту формы, в котором хранится представление обработки
//
Процедура ОбработкаОбслуживанияОчистка(Элемент
									 , СтандартнаяОбработка
									 , Форма
									 , ПутьКДаннымОбработкаАдресВХранилище
									 , ПутьКДаннымОбработкаПредставление) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Форма[ПутьКДаннымОбработкаАдресВХранилище] = "";
	Форма[ПутьКДаннымОбработкаПредставление] = "";
	
КонецПроцедуры //ОбработкаОбслуживанияОчистка()

// Процедура - Обработчик события "Открытие" элемента выбора обработки обслуживания в форме
//
// Параметры:
//  Элемент										 - ЭлементФормы				 - (служебный) Необходимо перезать значение параметра "Элемент" из вызывающей процедуры
//  СтандартнаяОбработка						 - Булево					 - (служебный) Необходимо перезать значение параметра "СтандартнаяОбработка" из вызывающей процедуры
//  Форма										 - УправляемаяФорма			 - Форма в которой выполняется выбор обработки обслуживания
//  ПутьКДаннымОбработкаАдресВХранилище			 - Строка					 - Путь к реквизиту формы, в котором хранится адрес обработки во временном хранилище
//  ПутьКДаннымОбработкаНастройкиАдресВХранилище - Строка					 - Путь к реквизиту формы, в котором хранится адрес настроек обработки во временном хранилище
//
Процедура ОбработкаОбслуживанияОткрытие(Элемент
									  , СтандартнаяОбработка
									  , Форма
									  , ПутьКДаннымОбработкаАдресВХранилище
									  , ПутьКДаннымОбработкаНастройкиАдресВХранилище) Экспорт
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Форма[ПутьКДаннымОбработкаАдресВХранилище]) Тогда
		Возврат;
	КонецЕсли; 
	
	ОписаниеОбработки = ктв_сб_ОбработкиОбслуживанияВызовСервера.ПолучитьОписаниеОбработкиОбслуживания(Форма[ПутьКДаннымОбработкаАдресВХранилище]);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОбработки.ИмяОбработки) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ОписаниеОбработки.СписокДействийКнопкиОткрытия) = Тип("СписокЗначений") Тогда
		ОписаниеОбработки.СписокДействийКнопкиОткрытия = Новый СписокЗначений();
	КонецЕсли;
	
	ПервыйЭлемент = Неопределено;							
	Если ОписаниеОбработки.СписокДействийКнопкиОткрытия.Количество() = 0 Тогда
		ПервыйЭлемент = ОписаниеОбработки.СписокДействийКнопкиОткрытия.Добавить("ОткрытьФорму_Форма", "Открыть основную форму обработки");
	Иначе
		ПервыйЭлемент = ОписаниеОбработки.СписокДействийКнопкиОткрытия[0];
	КонецЕсли;
	
	Параметры = Новый Структура("Форма,
								|ОписаниеОбработки,
								|ПутьКДаннымОбработкаАдресВХранилище,
								|ПутьКДаннымОбработкаНастройкиАдресВХранилище",
								Форма,
								ОписаниеОбработки,
								ПутьКДаннымОбработкаАдресВХранилище,
								ПутьКДаннымОбработкаНастройкиАдресВХранилище);
								
	Если ОписаниеОбработки.СписокДействийКнопкиОткрытия.Количество() = 1 Тогда
		ктв_сб_ОбработкиОбслуживанияКлиент.ОбработкаОбслуживанияВыборДействияКнопкиОткрытия(ПервыйЭлемент, Параметры);
	Иначе
		ОповещениеВыбораДействияКнопкиОткрытия = Новый ОписаниеОповещения("ОбработкаОбслуживанияВыборДействияКнопкиОткрытия", ктв_сб_ОбработкиОбслуживанияКлиент, Параметры);
	
		Форма.ПоказатьВыборИзМеню(ОповещениеВыбораДействияКнопкиОткрытия, ОписаниеОбработки.СписокДействийКнопкиОткрытия, Элемент);
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОбслуживанияОткрытие()

// Процедура - Продолжение обработчика события "Открытие" элемента выбора обработки обслуживания в форме
//				после выполнения выбора элемента из меню
//
// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений	 - Выбранный пункт меню
//  Параметры		 - Структура				 - Параметры переданные из обработчика события "Открытие"
//
Процедура ОбработкаОбслуживанияВыборДействияКнопкиОткрытия(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма											= Параметры.Форма;
	ОписаниеОбработки								= Параметры.ОписаниеОбработки;
	ПутьКДаннымОбработкаАдресВХранилище				= Параметры.ПутьКДаннымОбработкаАдресВХранилище;
	ПутьКДаннымОбработкаНастройкиАдресВХранилище	= Параметры.ПутьКДаннымОбработкаНастройкиАдресВХранилище;
	
	Если Лев(ВыбранныйЭлемент.Значение, 13) = "ОткрытьФорму_" Тогда
		
		ПараметрыОткрытия = Новый Структура("ОбработкаНастройкиАдресВХранилище", Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище]);
		
		ФормаОбработки = ктв_сб_ОбработкиОбслуживанияКлиент.ПолучитьФормуОбработкиОбслуживания(Форма[ПутьКДаннымОбработкаАдресВХранилище], ОписаниеОбработки.ИмяОбработки, Сред(ВыбранныйЭлемент.Значение, 14), ПараметрыОткрытия, Форма);
		
		Если ФормаОбработки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФормаОбработки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ФормаОбработки.Открыть();
		
	ИначеЕсли Лев(ВыбранныйЭлемент.Значение, 17) = "ВыполнитьКоманду_" Тогда
		
		ПараметрыОткрытия = Новый Структура("ОбработкаНастройкиАдресВХранилище", Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище]);
		
		ФормаОбработки = ктв_сб_ОбработкиОбслуживанияКлиент.ПолучитьФормуОбработкиОбслуживания(Форма[ПутьКДаннымОбработкаАдресВХранилище], ОписаниеОбработки.ИмяОбработки, ОписаниеОбработки.ФормаОбработчиковКоманд, ПараметрыОткрытия, Форма);
		
		Попытка
			Выполнить("ФормаОбработки." + Сред(ВыбранныйЭлемент.Значение, 18));
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОбслуживанияВыборДействияКнопкиОткрытия()

#КонецОбласти

#Область РаботаСФормамиОбработокОбслуживания

// Функция - Получить форму обработки обслуживания
//
// Параметры:
//  АдресОбработки		 - Строка							- Имя встроенной обработки или адрес обработки во временном хранилище
//  ИмяОбработки		 - Строка							- Имя по которым будет подключена внешняя обработка
//  ИмяФормы			 - Строка							- Имя получаемой формы обработки обслуживания
//  ПараметрыОткрытия	 - Структура						- Параметры, передаваемые в форму обработки при создании
//  Владелец			 - УправляемаяФорма, ЭлементФормы	- Владелец формы обработки
// 
// Возвращаемое значение:
//  УправляемаяФорма - Созданная форма обработки обслуживания
//
Функция ПолучитьФормуОбработкиОбслуживания(АдресОбработки, ИмяОбработки = "", ИмяФормы = "", ПараметрыОткрытия = Неопределено, Владелец = Неопределено) Экспорт
	
	ОписаниеОбработки = ктв_сб_ОбработкиОбслуживанияВызовСервера.ПолучитьОписаниеОбработкиОбслуживания(АдресОбработки, ИмяОбработки);
	
	ИмяФормы = ?(ИмяФормы = "", ОписаниеОбработки.ФормаОбработчиковКоманд, ИмяФормы);
	
	ПутьКФорме = ?(ОписаниеОбработки.ЭтоВнешняяОбработка, "ВнешняяОбработка.", "Обработка.") + ОписаниеОбработки.ИмяОбработки + "." + ИмяФормы;
	
	ФормаНастройки = Неопределено;
	Попытка
		ФормаНастройки = ПолучитьФорму(ПутьКФорме, ПараметрыОткрытия, Владелец);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат ФормаНастройки;
	
КонецФункции //ПолучитьФормуОбработкиОбслуживания()

#КонецОбласти
