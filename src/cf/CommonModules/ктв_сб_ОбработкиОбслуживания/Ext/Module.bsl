////////////////////////////////////////////////////////////////////////////////
// Библиотека подключаемых обработок обслуживания. (Основной модуль)
//
////////////////////////////////////////////////////////////////////////////////


// Функция - Получает список обработок обслуживания в конфигурации
//
// Параметры:
//  ПрефиксОбработки				 - Строка				 - Начало имени обработки для отбора обработок конфигурации
//  ИмяКонтрольнойПроцедуры			 - Строка				 - Имя функции модуля объекта обработки, вызываемой для проверки, что обработка является обработкой обслуживания
//  ПараметрыКонтрольнойПроцедуры	 - Массив				 - Парметры функции, вызываемой для проверки
// 
// Возвращаемое значение:
//  СписокЗначений					 - Список обработок обслуживания
//
Функция ПолучитьСписокОбработокОбслуживания(ПрефиксОбработки = Неопределено
										  , ИмяКонтрольнойПроцедуры = Неопределено
										  , ПараметрыКонтрольнойПроцедуры = Неопределено) Экспорт
	
	ДлинаПрефикса = 0;
	Если ТипЗнч(ПрефиксОбработки) = Тип("Строка") Тогда
		ДлинаПрефикса = СтрДлина(СокрЛП(ПрефиксОбработки));
	КонецЕсли;
	
	СписокОбработок = Новый СписокЗначений();
	
	Для Каждого ВремОбработка Из Метаданные.Обработки Цикл
		
		Если ДлинаПрефикса > 0 И НЕ НРег(Лев(ВремОбработка.Имя, ДлинаПрефикса)) = НРег(ПрефиксОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремОбработкаОбъект = Обработки[ВремОбработка.Имя].Создать();
		
		Если НЕ ЭтоОбработкаОбслуживания(ВремОбработкаОбъект, ИмяКонтрольнойПроцедуры, ПараметрыКонтрольнойПроцедуры) Тогда
			Продолжить;
		КонецЕсли;
		
		МакетКартинкиОбработки = ВремОбработкаОбъект.Метаданные().Макеты.Найти("Картинка");
		Если НЕ МакетКартинкиОбработки = Неопределено И СокрЛП(МакетКартинкиОбработки.ТипМакета) = "ДвоичныеДанные" Тогда
			КартинкаОбработки = Новый Картинка(ВремОбработкаОбъект.ПолучитьМакет("Картинка"));
		Иначе
			КартинкаОбработки = Новый Картинка();
		КонецЕсли;
		
		СписокОбработок.Добавить(ВремОбработка.Имя, ВремОбработка.Представление(), , КартинкаОбработки);
	КонецЦикла;
	
	Возврат СписокОбработок;
	
КонецФункции //ПолучитьСписокОбработокОбслуживания()

// Функция - Получает обработку объект по адресу в хранилище, или имени встроенной обработки
//
// Параметры:
//  АдресОбработки	 - Строка				 - Имя встроенной обработки или адрес обработки во временном хранилище
//  ИмяОбработки	 - Строка				 - Имя обработки, используемое при подключении внешней обработки
// 
// Возвращаемое значение:
//  ОбработкаОбъект, Неопределено			 - Созданная обработка
//
Функция ПолучитьОбработкуОбъект(АдресОбработки, ИмяОбработки = "", ЭтоВнешняяОбработка = Ложь) Экспорт
	
	ТипОбработки = "";
	ЭтоВнешняяОбработка = Ложь;
	Если ЭтоАдресВременногоХранилища(АдресОбработки) Тогда
		ВремОбработка = ПолучитьИзВременногоХранилища(АдресОбработки);
		Если ВремОбработка = Неопределено Тогда
			Возврат Неопределено;
		ИначеЕсли ТипЗнч(ВремОбработка) = Тип("Строка") Тогда //если "Строка", то это имя встроенной обработки
			ТипОбработки = "встроенная";
			ИмяОбработки = ВремОбработка;
		Иначе //если "ХранилищеЗначения", то это внешняя обработка
			ЭтоВнешняяОбработка = Истина;
			ТипОбработки = "внешняя";
		КонецЕсли;
	ИначеЕсли НЕ Найти(АдресОбработки, "e1cib/data/") = 0 Тогда //Это навигационная ссылка на реквизит хранения обработки
		ЭтоВнешняяОбработка = Истина;
		ТипОбработки = "внешняя";
	Иначе
		ВремОбработка = АдресОбработки;
		ИмяОбработки = АдресОбработки;
		ТипОбработки = "встроенная";
	КонецЕсли;
	
	Если ТипОбработки = "встроенная" Тогда
		Попытка
			ВремОбработкаОбъект = Обработки[ВремОбработка].Создать();
			ИмяОбработки = ВремОбработка;
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	ИначеЕсли ТипОбработки = "внешняя" Тогда
		Попытка
			ВремОбработка = ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки);
			ИмяОбработки = ВремОбработка;
			ВремОбработкаОбъект = ВнешниеОбработки.Создать(ВремОбработка);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВремОбработкаОбъект;
	
КонецФункции //ПолучитьОбработкуОбъект()

// Функция - Проверяет, что обработка является обработкой обслуживания
//
// Параметры:
//  АдресОбработки					 - Строка, ОбработкаОбъект	 - Имя встроенной обработки, или адрес внешней обработки во временном хранилище, или ранее созданная обработка 
//  ИмяКонтрольнойПроцедуры			 - Строка					 - Имя функции модуля объекта обработки, вызываемой для проверки, что обработка является обработкой обслуживания
//  ПараметрыКонтрольнойПроцедуры	 - Массив					 - Парметры функции, вызываемой для проверки
// 
// Возвращаемое значение:
//   Булево							 - Истина - обработка является обработкой обслуживания, Ложь - в противном случае
//
Функция ЭтоОбработкаОбслуживания(АдресОбработки, ИмяКонтрольнойПроцедуры = Неопределено, ПараметрыКонтрольнойПроцедуры = Неопределено) Экспорт
	
	Если ТипЗнч(АдресОбработки) = Тип("Строка") Тогда
		ВремОбработкаОбъект = ПолучитьОбработкуОбъект(АдресОбработки);
		Если ВремОбработкаОбъект = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Попытка
			ВремОбработкаОбъект = АдресОбработки.ЭтотОбъект;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	СтрокаВызоваКонтрольнойПроцедуры = "";
	Если ТипЗнч(ИмяКонтрольнойПроцедуры) = Тип("Строка") И СтрДлина(СокрЛП(ИмяКонтрольнойПроцедуры)) > 0 Тогда
		
		СтрокаВызоваКонтрольнойПроцедуры = ИмяКонтрольнойПроцедуры + "(";
		
		Если ТипЗнч(ПараметрыКонтрольнойПроцедуры) = Тип("Массив") Тогда
			Для й = 0 По ПараметрыКонтрольнойПроцедуры.ВГраница() Цикл
				СтрокаВызоваКонтрольнойПроцедуры = СтрокаВызоваКонтрольнойПроцедуры
												 + ?(Прав(СтрокаВызоваКонтрольнойПроцедуры, 1) = "(", "", ", ")
												 + "ПараметрыКонтрольнойПроцедуры[" + СокрЛП(й) + "]";
			КонецЦикла;
		КонецЕсли;
		
		СтрокаВызоваКонтрольнойПроцедуры = СтрокаВызоваКонтрольнойПроцедуры + ")";
	КонецЕсли;
	
	Если СтрДлина(СтрокаВызоваКонтрольнойПроцедуры) > 2 Тогда
		Попытка
			КонтрольВыполнен = Вычислить("ВремОбработкаОбъект." + СтрокаВызоваКонтрольнойПроцедуры);
			Если НЕ КонтрольВыполнен Тогда
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции //ЭтоОбработкаОбслуживания()

// Функция - Получает описание обработки обслуживания
//
// Параметры:
//  АдресОбработки	 - Строка				 - Имя встроенной обработки или адрес обработки во временном хранилище
//  ИмяОбработки	 - Строка				 - Имя по которым будет подключена внешняя обработка
//  ПолучатьОбъект	 - Булево				 - Истина - в описаниии обработки будет возвращена ОбработкаОбъект
// 
// Возвращаемое значение:
//  Структура								 - Описание обработки обслуживания
//
Функция ПолучитьОписаниеОбработкиОбслуживания(АдресОбработки, ИмяОбработки = "", ПолучатьОбъект = Ложь) Экспорт
	
	ОписаниеОбработки = Новый Структура("ИмяОбработки,
										|ПредставлениеОбработки,
										|ЭтоВнешняяОбработка,
										|ОбработкаОбъект,
										|СписокДействийКнопкиОткрытия,
										|ФормаОбработчиковКоманд",
										ИмяОбработки,
										"",
										Ложь,
										Неопределено,
										Неопределено,
										"Форма");
	
	ВремОбработкаОбъект = ктв_сб_ОбработкиОбслуживания.ПолучитьОбработкуОбъект(АдресОбработки, ОписаниеОбработки.ИмяОбработки, ОписаниеОбработки.ЭтоВнешняяОбработка);
	
	Если ПолучатьОбъект Тогда
		ОписаниеОбработки.ОбработкаОбъект = ВремОбработкаОбъект;
	КонецЕсли;
	
	Если ВремОбработкаОбъект = Неопределено Тогда
		Возврат ОписаниеОбработки;
	КонецЕсли;
	
	ОписаниеОбработки.ПредставлениеОбработки = ВремОбработкаОбъект.Метаданные().Представление();
	
	Попытка
		Выполнить("ОписаниеОбработки.СписокДействийКнопкиОткрытия = ВремОбработкаОбъект.ПолучитьСписокДействийКнопкиОткрытия();");
	Исключение
	КонецПопытки;
	
	Попытка
		Выполнить("ОписаниеОбработки.ФормаОбработчиковКоманд = ВремОбработкаОбъект.ПолучитьФормуОбработчиковКоманд();");
	Исключение
	КонецПопытки;
	
	Возврат ОписаниеОбработки;
	
КонецФункции //ПолучитьОписаниеОбработкиОбслуживания()

// Процедура - Должна вызываться из обработчика формы "ПриСозданииНаСервере" для подготовки формы к работе с обработкой обслуживания
//
// Параметры:
//  Отказ										 - Булево					 - Флаг отказа от обработки
//  СтандартнаяОбработка						 - Булево					 - Флаг стандартной обработки
//  Форма										 - УправляемаяФорма			 - Форма объекта из которой вызывается процедура
//  СсылкаНаОбъект								 - СправочникСсылка			 - Ссылка на объект для которого выполняется процедура
//  ПутьКДаннымОбработка						 - Строка					 - Путь к реквизиту объекта, в котором хранится обработка
//  ПутьКДаннымОбработкаАдресВХранилище			 - Строка					 - Путь к реквизиту формы, в котором хранится адрес обработки во временном хранилище
//  ПутьКДаннымОбработкаПредставление			 - Строка					 - Путь к реквизиту формы, в котором хранится представление обработки
//  ИмяЭлементаВыбораОбработкиНаФорме			 - Строка					 - Имя элемента формы, в котором выполняется выбор обработки обслуживания
//  ПутьКДаннымОбработкаНастройки				 - Строка					 - Путь к реквизиту объекта, в котором хранятся настройки обработки
//  ПутьКДаннымОбработкаНастройкиАдресВХранилище - Строка					 - Путь к реквизиту формы, в котором хранится адрес настроек обработки во временном хранилище
//
Процедура ОбъектПриСозданииНаСервере(Отказ
								   , СтандартнаяОбработка
								   , Форма
								   , СсылкаНаОбъект
								   , ПутьКДаннымОбработка
								   , ПутьКДаннымОбработкаАдресВХранилище
								   , ПутьКДаннымОбработкаПредставление
								   , ИмяЭлементаВыбораОбработкиНаФорме
								   , ПутьКДаннымОбработкаНастройки
								   , ПутьКДаннымОбработкаНастройкиАдресВХранилище) Экспорт
	
	Если Отказ ИЛИ СсылкаНаОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Форма[ПутьКДаннымОбработкаАдресВХранилище] = ПоместитьВоВременноеХранилище(СсылкаНаОбъект[ПутьКДаннымОбработка].Получить(), Форма.УникальныйИдентификатор);
	Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище] = ПоместитьВоВременноеХранилище(СсылкаНаОбъект[ПутьКДаннымОбработкаНастройки].Получить(), Форма.УникальныйИдентификатор);
	
	ВремОбработкаОбъект = ктв_сб_ОбработкиОбслуживания.ПолучитьОбработкуОбъект(Форма[ПутьКДаннымОбработкаАдресВХранилище]);
	
	Если ВремОбработкаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма[ПутьКДаннымОбработкаПредставление] = ВремОбработкаОбъект.Метаданные().Синоним;
	
КонецПроцедуры //ОбъектПриСозданииНаСервере()

// Процедура - Должна вызываться из обработчика формы "ПередЗаписьюНаСервере" для сохранения выбранной обработки обслуживания
//
// Параметры:
//  Отказ										 - Булево					 - Флаг отказа от обработки
//  ТекущийОбъект								 - СправочникОбъект			 - Объект для которого выполняется процедура
//  ПараметрыЗаписи								 - Структура				 - Дополнительные параметры записи
//  Форма										 - УправляемаяФорма			 - Форма объекта из которой вызывается процедура
//  ПутьКДаннымОбработка						 - Строка					 - Путь к реквизиту объекта, в котором хранится обработка
//  ПутьКДаннымОбработкаАдресВХранилище			 - Строка					 - Путь к реквизиту формы, в котором хранится адрес обработки во временном хранилище
//  ПутьКДаннымОбработкаНастройки				 - Строка					 - Путь к реквизиту объекта, в котором хранятся настройки обработки
//  ПутьКДаннымОбработкаНастройкиАдресВХранилище - Строка					 - Путь к реквизиту формы, в котором хранится адрес настроек обработки во временном хранилище
//
Процедура ОбъектПередЗаписьюНаСервере(Отказ
									, ТекущийОбъект
									, ПараметрыЗаписи
									, Форма
									, ПутьКДаннымОбработка
									, ПутьКДаннымОбработкаАдресВХранилище
									, ПутьКДаннымОбработкаНастройки
									, ПутьКДаннымОбработкаНастройкиАдресВХранилище) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбработки = ?(ЗначениеЗаполнено(Форма[ПутьКДаннымОбработкаАдресВХранилище]), ПолучитьИзВременногоХранилища(Форма[ПутьКДаннымОбработкаАдресВХранилище]), Неопределено);
	ТекущийОбъект[ПутьКДаннымОбработка] = Новый ХранилищеЗначения(ДанныеОбработки);
	
	ДанныеНастроек = ?(ЗначениеЗаполнено(Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище]), ПолучитьИзВременногоХранилища(Форма[ПутьКДаннымОбработкаНастройкиАдресВХранилище]), Неопределено);
	ТекущийОбъект[ПутьКДаннымОбработкаНастройки] = Новый ХранилищеЗначения(ДанныеНастроек);
	
КонецПроцедуры //ОбъектПередЗаписьюНаСервере()

