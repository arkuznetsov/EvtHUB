Перем Домен;
Перем Пользователь;
Перем Пароль;

#Область ПрограммныйИнтерфейс

// Функция - Подтверждает, что обработка является обработкой обслуживания
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ЭтоОбработкаВыполненияОбработчика() Экспорт
	
	Возврат Истина;
	
КонецФункции //ЭтоОбработкаВыполненияОбработчика()

// Функция - Получает форму обработчиков команд, где расположены процедуры-обработчики команд
// 			 из списка действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  Строка - Имя формы обработчиков комманд
//
Функция ПолучитьФормуОбработчиковКоманд() Экспорт
	
	Возврат "Форма";
	
КонецФункции //ПолучитьФормуОбработчиковКоманд()

// Функция - Получает список действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  СписокЗначений - Список действий
//
Функция ПолучитьСписокДействийКнопкиОткрытия() Экспорт
	
	СписокДействий = Новый СписокЗначений();
	СписокДействий.Добавить("ВыполнитьКоманду_ОбновитьДанныеАД(Неопределено)", "Обновить данные Active Directory", , БиблиотекаКартинок.ЗаписатьИзменения);
	СписокДействий.Добавить("ОткрытьФорму_Форма", "Настройка...", , БиблиотекаКартинок.ИзменитьФорму);
	
	Возврат СписокДействий;
	
КонецФункции //ПолучитьСписокДействийКнопкиОткрытия()

// Функция - Выполняет обработчик события
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка												- Уникальный идентификатор события
//  Источник			 - ЛюбаяСсылка											- Источник возникновения события
//  Дата				 - Дата													- Дата и время возникновения события
//  Момент				 - Число												- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События						- Возникшее событие
//  Обработчик			 - СправочникСсылка.ктв_сб_СобытияОбработчики			- Обработчик события
//  ПараметрыСобытия	 - Структура											- Параметры, сформированные при возникновении события
// 
// Возвращаемое значение:
//  Булево - Истина - Обработка выполнена успешно, Ложь - в противном случае
//
Функция ОбработатьСобытие(ТочкаВозникновения
						, ИдСобытия
						, Источник
						, Дата
						, Момент
						, Событие
						, Обработчик
						, ПараметрыСобытия) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыСобытия) = Тип("Структура") Тогда
		ПараметрыСобытия = Новый Структура();
	КонецЕсли;
	
	ПараметрыСобытия.Вставить("ПредставлениеИсточника", СокрЛП(Источник));
	
	Настройка = Обработчик.ОбработкаНастройки.Получить();
	Если НЕ ТипЗнч(Настройка) = Тип("Структура") Тогда
		ПараметрыСобытия.Вставить("ТекстОшибки", "Не заданы настройки обработчика событий!");
		Возврат Ложь;
	КонецЕсли;
	
	Домен = "";
	Настройка.Свойство("Домен", Домен);
	
	Пользователь = "";
	Настройка.Свойство("Пользователь", Пользователь);
	
	Пароль = "";
	Настройка.Свойство("Пароль", Пароль);
	
	СоответствиеПолей = "";
	Если НЕ Настройка.Свойство("ЗаполнениеПолей", СоответствиеПолей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ПроцессорЗапросов = Обработки.ктв_сб_ПроцессорЗапросов.Создать();
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Источник", Источник);
	
	Попытка
		РезультатЗапроса = ПроцессорЗапросов.ВыполнитьЗапрос(Настройка.Запрос_Текст
															, Настройка.Запрос_Параметры
															, 0
															, Настройка.ПроизвольныеВыражения
															, ДопПараметры
															, Ложь
															, ТекстОшибки);
	Исключение
		ТекстОшибки = "Ошибка запроса 1С: ";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = "Ошибка запроса 1С: " + ТекстОшибки;
		ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаКВыгрузке = РезультатЗапроса.Выгрузить();
	
	ЗапросыАД = ПодготовитьДанныеДляВыгрузки(ТаблицаКВыгрузке, СоответствиеПолей, Настройка.ПроизвольныеВыражения, ТекстОшибки);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = "Ошибка подготовки запросов Active Directory: " + ТекстОшибки;
		ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ОбработатьЗаписиАД(ЗапросыАД, Домен, Пользователь, Пароль, ТекстОшибки);
	
	Если НЕ Результат Тогда
		ТекстОшибки = "Ошибка обработки записей Active Directory: " + ТекстОшибки;
		ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ОбработатьСобытие()

#КонецОбласти

#Область ПроцедурыВыгрузкиДанных

// Функция - Дополняет текст запроса загрузки данных во внешнюю СУБД
//			 данными, полученными запросом 1С
//
// Параметры:
//  ШаблонЗапросаКСУБД				 - Строка			 - Шаблон запроса, полученный функцией "ПолучитьТекстЗапросаКСУБД"
//  ТаблицаДляОбновления			 - Строка			 - Имя таблицы, в которую будут загружаться данные
//  ТаблицаКВыгрузке				 - ТаблицаЗначений	 - Результат запроса 1С
//  СоответствиеПолей				 - ТаблицаЗначений	 - Описание сопоставления колонок запроса 1С и таблицы СУБД-приемника
//									 - Массив (Структура)
//		АтрибутАД					 - Строка			 - Имя поля записи Active Directory
//		КолонкаЗапроса				 - Строка			 - Имя колонки запроса получения данных 1С
//		ПолеПоиска					 - Булево			 - Признак ключевого поля, по которому выполняется поск записей Active Directory
//		Выражение					 - Строка			 - Выражение на языке 1С, которое будет выполнено для строки результата запроса
//														   и результат которого будет передан для записи в Active Directory
//		НеПустое		             - Булево			 - Признак того, что поле записи Active Directory не может быть пустым
//  ПроизвольныеВыражения			 - ТаблицаЗначений	 - Таблица произвольных выражений на языке 1С, для обработки выгружаемых значений
//									 - Массив (Структура)
//		Имя							 - Строка			 - Имя произвольного выражения
//		Код							 - Строка			 - Код произвольного выражения на языке 1С
//  ТекстОшибки						 - Массив			 - Текст описания возникших ошибок
// 
// Возвращаемое значение:
// 		Массив (Структура)							 - Массив запросов для изменения данных в Active Directory
//			НовыеЗначенияПолей		- Соответствие	 - Новыйе значения полей для записи в Active Directory
//			Запрос					- Строка		 - Текст запроса изменения данных в Active Directory
//  ТекстОшибки						- Массив		 - Текст описания возникших ошибок
//
Функция ПодготовитьДанныеДляВыгрузки(ТаблицаКВыгрузке
								   , СоответствиеПолей
								   , ПроизвольныеВыражения
								   , ТекстОшибки = "") Экспорт
	
	ЗапросыАД = Новый Массив();
	
	//Обрабатываем поля для которых указано выражение для вычисления значения
	Для Каждого ТекСтрока Из ТаблицаКВыгрузке Цикл
		
		НовыеЗначенияПолей = Новый Соответствие();
		
		Для Каждого ТекСоответствие Из СоответствиеПолей Цикл
			
			Если ЗначениеЗаполнено(ТекСоответствие.Выражение) Тогда
			
				ТекСтрока[ТекСоответствие.КолонкаЗапроса] = ВычислитьВыражениеДляПоля(ТекСтрока
																					, ТекСоответствие.Выражение
																					, ПроизвольныеВыражения
																					, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = "Не удалось вычислить выражение """ + СокрЛП(ТекСоответствие.Выражение)
								+ """ для поля """ + СокрЛП(ТекСоответствие.КолонкаЗапроса) + """:"
								+ Символы.ПС + ТекстОшибки;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
	
			Если ТекСоответствие.ПолеПоиска Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекСтрока[ТекСоответствие.КолонкаЗапроса]) И ТекСоответствие.НеПустое Тогда
				Продолжить;
			КонецЕсли;
			
			НовыеЗначенияПолей.Вставить(ТекСоответствие.АтрибутАД, СокрЛП(ТекСтрока[ТекСоответствие.КолонкаЗапроса]));
		КонецЦикла;
		
		ЗапросАД = ПодготовитьТекстЗапросаАД(СоответствиеПолей, ТекСтрока);
		
		ЗапросыАД.Добавить(Новый Структура("Запрос, НовыеЗначенияПолей", ЗапросАД, НовыеЗначенияПолей));
		
	КонецЦикла;
	
	Возврат ЗапросыАД;
	
КонецФункции //ПодготовитьДанныеДляВыгрузки()

// Функция - Выполняет получение записей Active Directory и их изменение 
//
// Параметры:
//  ЗапросыАД					- Массив (Структура)		 - Массив запросов для изменения данных в Active Directory
//		НовыеЗначенияПолей		- Соответствие				 - Новыйе значения полей для записи в Active Directory
//		Запрос					- Строка					 - Текст запроса изменения данных в Active Directory
//  Домен					- Строка			 - Имя домена Active Directory
//  Пользователь			- Строка			 - Пользователь домена для доступа к Active Directory
//  Пароль					- Строка			 - Пароль пользователя домена для доступа к Active Directory
//  ТекстОшибки				- Массив			 - Текст описания возникших ошибок
// 
// Возвращаемое значение:
//  	Булево			 - Истина - Записи Active Directory успешно обработаны; Ложь - в противном случае
//
Функция ОбработатьЗаписиАД(ЗапросыАД, Домен, Пользователь, Пароль, ТекстОшибки) Экспорт
	
	Попытка
		Соединение = ПолучитьСоединениеАД(Пользователь, Пароль);
	Исключение
		ТекстОшибки = "Не удалось получить соединение с Active Directory: ";
		ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого ТекЗапрос Из ЗапросыАД Цикл
		
		Попытка
			ПользователиАД = ВыполнитьЗапросЛДАП(Соединение, Домен, Пользователь, Пароль, ТекЗапрос.Запрос);
		Исключение
			ТекстОшибки = "Не удалось выполнить запрос к Active Directory: ";
			ТекстОшибки = ТекстОшибки + Символы.ПС + "[-------------------------------------------------
													 |" + ТекЗапрос.Запрос + "
													 |--------------------------------------------------]";
			ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
		Для Каждого ТекПользователь Из ПользователиАД Цикл
			Попытка
				ИзменитьПользователяАД(ТекПользователь.Ключ, Пользователь, Пароль, ТекЗапрос.НовыеЗначенияПолей);
			Исключение
				ТекстОшибки = "Не удалось изменить пользователя Active Directory """ + СокрЛП(ТекПользователь.Ключ) + """: ";
				ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции //ОбработатьЗаписиАД()

// Функция - Получает соединение для выполнения запроса к Active Directory
//
// Параметры:
//  Пользователь			- Строка			 - Пользователь домена для доступа к Active Directory
//  Пароль					- Строка			 - Пароль пользователя домена для доступа к Active Directory
// 
// Возвращаемое значение:
//  COMОбъект				- Объект-соединение для запроса данных пользователей Active Directory
//
Функция ПолучитьСоединениеАД(Пользователь, Пароль)
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Provider = "ADSDSOObject";
	Соединение.Open("Provider=ADSDSOObject;User Id=" + СтрЗаменить(Пользователь, "\", "\") + ";Password=" + Пароль + "");
	Возврат Соединение;
	
КонецФункции // ПолучитьСоединениеАД()

// Функция - Подготовить текст запроса АД
//
// Параметры:
//  СоответствиеПолей	 - ТаблицаЗначений				 - Соответствие полей данных атрибутам Active Directory
//		АтрибутАД			 - Строка					 - Имя атрибута active Directory
//		КолонкаЗапроса		 - Строка					 - Имя колонки запроса
//		ПолеПоиска			 - Булево					 - Признак того, что необходимо установить фильтр по указанному атрибуту AD со значением из полученных данных
//  ДанныеКВыгрузке		 - Структура,					 - Данные для выгрузки в Active Directory
//						   СтрокаТаблицыЗначений 
// 
// Возвращаемое значение:
//  Строка				 - Текст запроса к Active Directory
//
Функция ПодготовитьТекстЗапросаАД(СоответствиеПолей, ДанныеКВыгрузке)
	
	ТекстЗапроса = "SELECT";
	
	ТекстУсловия = "
				   |	objectCategory='person'
				   |	AND objectClass='user'";
	
	Для Каждого ТекСтрока Из СоответствиеПолей Цикл
		ТекстЗапроса = ТекстЗапроса
					 + ?(ТекстЗапроса= "SELECT", "", ",")
					 + "
					   |	" + ТекСтрока.АтрибутАД;
		
		Если ТекСтрока.ПолеПоиска Тогда
			ТекстУсловия = ТекстУсловия + ?(ПустаяСтрока(ТекстУсловия), "", "
																		|	AND ") + СокрЛП(ТекСтрока.АтрибутАД) + "='" + СокрЛП(ДанныеКВыгрузке[ТекСтрока.КолонкаЗапроса]) + "'";
		КонецЕсли;
	КонецЦикла;
	
	Если Найти(ТекстЗапроса, "ADsPath") = 0 Тогда
		ТекстЗапроса = ТекстЗапроса
					 + ?(ТекстЗапроса= "SELECT", "", ",")
					 + "
					   |	ADsPath";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
								  |FROM 'LDAP://[[ПутьЛДАП]]'
								  |";
	
	Если НЕ ТекстУсловия = "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
								  |	WHERE
								  |	" + ТекстУсловия;
	КонецЕсли;
							  
	Возврат ТекстЗапроса;
	
КонецФункции //ПодготовитьТекстЗапросаАД()

// Функция - Выполнить запрос ЛДАП
//
// Параметры:
//  Соединение				- COMОбъект			 - Объект-соединение для запроса данных пользователей Active Directory
//  Домен					- Строка			 - Имя домена Active Directory
//  Пользователь			- Строка			 - Пользователь домена для доступа к Active Directory
//  Пароль					- Строка			 - Пароль пользователя домена для доступа к Active Directory
//  ТекстЗапроса			- Строка			 - Текст запроса к Active Directory
// 
// Возвращаемое значение:
//  Соответствие (Структура)		- Список пользователей Active Directory с их атрибутами
//
Функция ВыполнитьЗапросЛДАП(Соединение, Домен, Пользователь, Пароль, ЗНАЧ ТекстЗапроса)
	
	// Подключаемся к LDAP
	ЕстьЛДАП = Ложь;
	
	СписокПровайдеров = ПолучитьCOMОбъект("ADs:");
	Для Каждого Провайдер Из СписокПровайдеров Цикл
		Если СтрЧислоВхождений(Провайдер.Name,"LDAP:")>0 Тогда
			ЕстьЛДАП =  Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьЛДАП Тогда
		ВызватьИсключение "Отсутствует провайдер LDAP.";
	КонецЕсли;	

	Попытка	

		КореньДСЕ = ПолучитьCOMОбъект("LDAP://RootDSE");
		СтруктураКонтекстаЗапроса = КореньДСЕ.Get("defaultNamingContext");
	
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение "Не удалось подключиться к контейнеру доменов по причине: Указанный домен не существует или к нему невозможно подключиться
						  | "+ ТекстОшибки;
	КонецПопытки;

	НаборЗаписей = Новый COMObject("ADODB.RecordSet");
	НаборЗаписей.ActiveConnection	= Соединение;
	НаборЗаписей.CursorType			= 3;
	НаборЗаписей.LockType			= 2;
	НаборЗаписей.PageSize			= 10000;
	
	НаборЗаписей.Open(СтрЗаменить(ТекстЗапроса, "[[ПутьЛДАП]]", СтруктураКонтекстаЗапроса));
	
	ПользователиАД = Новый Соответствие();
	
	НаборЗаписей.MoveFirst();
	Пока НЕ НаборЗаписей.EOF Цикл
		ПользовательАД = Новый Структура();
		Для Каждого ТекПоле ИЗ НаборЗаписей.Fields Цикл
			ПользовательАД.Вставить(ТекПоле.Name, ТекПоле.Value);
		КонецЦикла;
		ПользователиАД.Вставить(ПользовательАД.ADsPath, ПользовательАД);
		НаборЗаписей.MoveNext();
	КонецЦикла; 
	
	Возврат ПользователиАД;
	
КонецФункции //ВыполнитьЗапросЛДАП()

// Процедура - Изменить пользователя АД
//
// Параметры:
//  ПутьАД						 - Строка			 - Значение атрибута ADsPath пользователя домена для изменения
//  Пользователь				 - Строка			 - Пользователь домена для доступа к Active Directory
//  Пароль						 - Строка			 - Пароль пользователя домена для доступа к Active Directory
//  НовыеДанныеПользователя		 - Соответствие		 - Новые значения атрибутов AD пользователя (Ключ - имя атрибута, Значение - значение атрибута)
//
Процедура ИзменитьПользователяАД(ПутьАД, Пользователь, Пароль, НовыеДанныеПользователя)
	
	ЛДАП = ПолучитьCOMОбъект("LDAP:");
	Контейнер = ЛДАП.OpenDSObject(ПутьАД , Пользователь, Пароль, 0);
		
	Для Каждого ТекПоле Из НовыеДанныеПользователя Цикл
		Контейнер.Put(ТекПоле.Ключ, ТекПоле.Значение);
	КонецЦикла;
	Контейнер.SetInfo();
	
КонецПроцедуры //ИзменитьПользователяАД()

#КонецОбласти

#Область ВспомогательныеПроцедуры

// Функция - Вычисляет выражение на языке 1С для строки таблицы
//
// Параметры:
//  ТекущаяСтрока				 - СтрокаТаблицыЗначений	 - Строка, для которой будет вычеслено выражение
//  Выражение					 - Строка					 - Код на языке 1С
//  ПроизвольныеВыражения		 - ТаблицаЗначений			 - Таблица произвольных выражений на языке 1С, для обработки выгружаемых значений
//									 - Массив (Структура)
//		Имя							 - Строка				 - Имя произвольного выражения
//		Код							 - Строка				 - Код произвольного выражения на языке 1С
//  ТекстОшибки					 - Строка					 - Описание возникшей ошибки
// 
// Возвращаемое значение:
//		Произвольный		- Результат вычисления выражения
//
Функция ВычислитьВыражениеДляПоля(ТекущаяСтрока, Знач Выражение, ПроизвольныеВыражения = Неопределено, ТекстОшибки = "") Экспорт
	
	ЭтоПроизвольноеВыражение = Ложь;
	ВыражениеДляВычисления = Выражение;
	
	Если ТипЗнч(ПроизвольныеВыражения) = Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ПроизвольныеВыражения) = Тип("Массив") Тогда
		
		Для Каждого ТекВыражение Из ПроизвольныеВыражения Цикл
			Если ВРег(СокрЛП(ТекВыражение.Имя)) = ВРег(СокрЛП(Выражение)) Тогда
				ВыражениеДляВычисления = ТекВыражение.Код;
				ЭтоПроизвольноеВыражение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат = "";
	
	Попытка
		Выполнить(?(ЭтоПроизвольноеВыражение, "", "Результат = ") + ВыражениеДляВычисления);
	Исключение
		ТекстОшибки = ТекстОшибки + Символы.ПС
					+ "Ошибка вычисления выражения """ + СокрЛП(Выражение) + """: "
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции //ВычислитьВыражениеДляПоля()
	
// Функция - Получает значение поля distinguishedName первой найденой записи AD
//
// Параметры:
//  СтруктураПоиска			 - Структура		 - Структура полей и значений для поиска записей
//												   (Ключ - имя поля, Значение - значение для поиска)
// 
// Возвращаемое значение:
//   Строка			- значение поля distinguishedName первой найденой записи AD ("" - если записей не найдено)
//
Функция ПолучитьПолноеИмяЗаписиАД(СтруктураПоиска)
	
	СоответствиеПолей = Новый Массив();
	СоответствиеПолей.Добавить(Новый Структура("АтрибутАД, КолонкаЗапроса, ПолеПоиска", "distinguishedName", "", Ложь));
	
	НомерПоля = 1;
	Для Каждого ТекЭлемент Из СтруктураПоиска Цикл
		ИмяПоля = "Поле_" + Формат(НомерПоля, "ЧН=; ЧГ=");
		СоответствиеПолей.Добавить(Новый Структура("АтрибутАД, КолонкаЗапроса, ПолеПоиска", ТекЭлемент.Ключ, ИмяПоля, Истина));
	    УсловияПоиска = Новый Структура(ИмяПоля, ТекЭлемент.Значение);
	КонецЦикла;
	
	ТекстЗапросаАД = ПодготовитьТекстЗапросаАД(СоответствиеПолей, УсловияПоиска);
	
	Соединение = ПолучитьСоединениеАД(Пользователь, Пароль);
	
	РезультатЛДАП = ВыполнитьЗапросЛДАП(Соединение, Домен, Пользователь, Пароль, ТекстЗапросаАД);
	
	Если РезультатЛДАП.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из РезультатЛДАП Цикл
		Возврат ТекЭлемент.Значение.distinguishedName;
	КонецЦикла;
	
КонецФункции //ПолучитьПолноеИмяЗаписиАД()

#КонецОбласти
