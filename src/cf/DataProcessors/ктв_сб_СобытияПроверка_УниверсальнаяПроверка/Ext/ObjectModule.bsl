
#Область ПрограммныйИнтерфейс

// Функция - Подтверждает, что обработка является обработкой обслуживания
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ЭтоОбработкаПроверкиСобытия() Экспорт
	
	Возврат Истина;
	
КонецФункции //ЭтоОбработкаПроверкиСобытия()

// Функция - Получает форму обработчиков команд, где расположены процедуры-обработчики команд
// 			 из списка действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  Строка - Имя формы обработчиков комманд
//
Функция ПолучитьФормуОбработчиковКоманд() Экспорт
	
	Возврат "Форма";
	
КонецФункции //ПолучитьФормуОбработчиковКоманд()

// Функция - Получает список действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  СписокЗначений - Список действий
//
Функция ПолучитьСписокДействийКнопкиОткрытия() Экспорт
	
	СписокДействий = Новый СписокЗначений();
	
	Возврат СписокДействий;
	
КонецФункции //ПолучитьСписокДействийКнопкиОткрытия()

// Функция - Выполняет проверку условий регистрации события
//
// Параметры:
//  Источник			 - Объект, НаборЗаписей						- Объект - источник возникновения события
//  Событие				 - СправочникСсылка.ктв_сб_События				- Проверяемое событие
//  ПараметрыПодписки	 - Структура								- Параметры обработчика подписки на событие, в котором выполняется проверка
//  ПараметрыСобытия	 - Структура								 - Параметры события для сохранения
// 
// Возвращаемое значение:
//  Булево - Истина - событие произошло (проверка выполнена успешно)
//
Функция ПроверитьНаступлениеСобытия(Источник, Событие, ПараметрыПодписки, ПараметрыСобытия) Экспорт
	
	//СоответствиеОбработчиков = Новый Соответствие();
	//СоответствиеОбработчиков.Вставить("Объект.ПриКопировании"								, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПриКопировании"));
	//СоответствиеОбработчиков.Вставить("Объект.ПередЗаписью"									, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПередЗаписью"));
	//СоответствиеОбработчиков.Вставить("ДокументОбъект.ПередЗаписью"							, Новый Структура("ВидОбъекта, МоментПроверки", "Документ"			, "ПередЗаписью"));
	//СоответствиеОбработчиков.Вставить("Объект.ПриЗаписи"									, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПриЗаписи"));
	//СоответствиеОбработчиков.Вставить("Объект.ПередУдалением"								, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ПередУдалением"));
	//СоответствиеОбработчиков.Вставить("Объект.ОбработкаЗаполнения"							, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ОбработкаЗаполнения"));
	//СоответствиеОбработчиков.Вставить("Объект.ОбработкаПроверкиЗаполнения"					, Новый Структура("ВидОбъекта, МоментПроверки", "ВсеОбъекты"		, "ОбработкаПроверкиЗаполнения"));
	//СоответствиеОбработчиков.Вставить("ДокументОбъект.ОбработкаПроведения"					, Новый Структура("ВидОбъекта, МоментПроверки", "Документ"			, "ОбработкаПроведения"));
	//СоответствиеОбработчиков.Вставить("ДокументОбъект.ОбработкаУдаленияПроведения"			, Новый Структура("ВидОбъекта, МоментПроверки", "Документ"			, "ОбработкаУдаленияПроведения"));
	//СоответствиеОбработчиков.Вставить("БизнесПроцессОбъект.ОбработкаИнтерактивнойАктивации"	, Новый Структура("ВидОбъекта, МоментПроверки", "БизнесПроцесс"		, "ОбработкаИнтерактивнойАктивации"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ОбработкаИнтерактивнойАктивации"		, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ОбработкаИнтерактивнойАктивации"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ОбработкаПроверкиВыполнения"			, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ОбработкаПроверкиВыполнения"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ПередВыполнением"						, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ПередВыполнением"));
	//СоответствиеОбработчиков.Вставить("ЗадачаОбъект.ПередИнтерактивнымВыполнением"			, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ПередИнтерактивнымВыполнением"));
	//СоответствиеОбработчиков.Вставить("Задачам.ПриВыполнении"								, Новый Структура("ВидОбъекта, МоментПроверки", "Задача"			, "ПриВыполнении"));
	//СоответствиеОбработчиков.Вставить("НаборЗаписей.ОбработкаПроверкиЗаполнения"			, Новый Структура("ВидОбъекта, МоментПроверки", "НаборЗаписей"		, "ОбработкаПроверкиЗаполнения"));
	//СоответствиеОбработчиков.Вставить("НаборЗаписей.ПередЗаписью"							, Новый Структура("ВидОбъекта, МоментПроверки", "НаборЗаписей"		, "ПередЗаписью"));
	//СоответствиеОбработчиков.Вставить("НаборЗаписей.ПриЗаписи"								, Новый Структура("ВидОбъекта, МоментПроверки", "НаборЗаписей"		, "ПриЗаписи"));
	//СоответствиеОбработчиков.Вставить("РегистрСведенийНаборЗаписей.ОбработкаЗаполнения"		, Новый Структура("ВидОбъекта, МоментПроверки", "РегистрСведений"	, "ОбработкаЗаполнения"));
	
	МоментПроверки = Неопределено;
	ПараметрыПодписки.Свойство("МоментПроверки", МоментПроверки);
	
	ИдОбъектаМетаданных = Неопределено;
	ПараметрыПодписки.Свойство("ИдОбъектаМетаданных", ИдОбъектаМетаданных);
	
	Возврат ПолучитьРезультатВыполненияКодаПроверки("Обработка" + СокрЛП(МоментПроверки) + "_Код", Источник, Событие, ПараметрыПодписки, ПараметрыСобытия);
	
КонецФункции //ПроверитьНаступлениеСобытия()

#КонецОбласти

#Область СлужебныеПроцедуры

// Функция - Получить результат выполнения кода проверки
//
// Параметры:
//  ИмяПоляНастройки_Код - Строка						 - Имя поля настроек в котором хранится код обработчика
//  Источник			 - Объект, НаборЗаписей			 - Объект - источник возникновения события
//  Событие				 - СправочникСсылка.ктв_сб_События	 - Проверяемое событие
//  ПараметрыПодписки	 - Структура					 - Параметры обработчика подписки на событие, в котором выполняется проверка
//  ПараметрыСобытия	 - Структура					 - Параметры события для сохранения
// 
// Возвращаемое значение:
//  Булево - Истина - код проверки выполнился успешно и вернул "Результат = Истина",
//			 Ложь - при выполнении кода произошла ошибка, либо "Результат = Ложь"
//
Функция ПолучитьРезультатВыполненияКодаПроверки(ИмяПоляНастройки_Код, Источник, Событие, ПараметрыПодписки, ПараметрыСобытия)
	
	Результат = Ложь;
	ТекстОшибки = "";
	
	Настройка = Событие.ОбработкаНастройки.Получить();
	
	Если НЕ ТипЗнч(Настройка) = Тип("Структура") Тогда
		ТекстОшибки = "Не указаны настройки обработки проверки события """ + СокрЛП(Событие) + """!";
		Возврат Результат;
	КонецЕсли;
	
	ИсполняемыйКод = "";
	Если НЕ Настройка.Свойство(ИмяПоляНастройки_Код, ИсполняемыйКод) Тогда
		//ТекстОшибки = "В настройках события """ + СокрЛП(Событие) + """ отсутствует поле """ + СокрЛП(ИмяПоляНастройки_Код) + """!";
		Возврат Результат;
	КонецЕсли;
	
	Если ИсполняемыйКод = "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Выполнить(ИсполняемыйКод);
	Исключение
		ТекстОшибки = "Ошибка: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					+ Символы.ПС +  " При выполнения кода: " + 
					+ Символы.ПС +  "========================================================" + 
					+ Символы.ПС +  СокрЛП(ИсполняемыйКод) + 
					+ Символы.ПС +  "========================================================";
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПараметрыСобытия.Вставить("ТекстОшибки", ТекстОшибки);
	Конецесли;
	
	Возврат Результат;
	
КонецФункции //ПолучитьРезультатВыполненияКодаПроверки()

#КонецОбласти
