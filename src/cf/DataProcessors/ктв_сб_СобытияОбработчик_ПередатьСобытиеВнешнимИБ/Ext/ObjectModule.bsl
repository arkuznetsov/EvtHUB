
#Область ПрограммныйИнтерфейс

// Функция - Подтверждает, что обработка является обработкой обслуживания
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ЭтоОбработкаВыполненияОбработчика() Экспорт
	
	Возврат Истина;
	
КонецФункции //ЭтоОбработкаВыполненияОбработчика()

// Функция - Получает форму обработчиков команд, где расположены процедуры-обработчики команд
// 			 из списка действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  Строка - Имя формы обработчиков комманд
//
Функция ПолучитьФормуОбработчиковКоманд() Экспорт
	
	Возврат "Форма";
	
КонецФункции //ПолучитьФормуОбработчиковКоманд()

// Функция - Получает список действий кнопки открытия поля выбора обработки обслуживания
// 
// Возвращаемое значение:
//  СписокЗначений - Список действий
//
Функция ПолучитьСписокДействийКнопкиОткрытия() Экспорт
	
	СписокДействий = Новый СписокЗначений();
	
	Возврат СписокДействий;
	
КонецФункции //ПолучитьСписокДействийКнопкиОткрытия()

// Функция - Выполняет обработчик события
//
// Параметры:
//  ТочкаВозникновения	 - СправочникСсылка.ктв_сб_СобытияТочкиВозникновения	- Точка (ИБ), где возникло событие
//  ИдСобытия			 - Строка											- Уникальный идентификатор события
//  Источник			 - ЛюбаяСсылка										- Источник возникновения события
//  Дата				 - Дата												- Дата и время возникновения события
//  Момент				 - Число											- Момет возникновения события в миллисекундах
//  Событие				 - СправочникСсылка.ктв_сб_События						- Возникшее событие
//  Обработчик			 - СправочникСсылка.ктв_сб_СобытияОбработчики			- Обработчик события
//  ПараметрыСобытия	 - Структура										- Параметры, сформированные при возникновении события
// 
// Возвращаемое значение:
//  Булево - Истина - Обработка выполнена успешно, Ложь - в противном случае
//
Функция ОбработатьСобытие(ТочкаВозникновения
						, ИдСобытия
						, Источник
						, Дата
						, Момент
						, Событие
						, Обработчик
						, ПараметрыСобытия) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыСобытия) = Тип("Структура") Тогда
		ПараметрыСобытия = Новый Структура();
	КонецЕсли;
	
	ПараметрыСобытия.Вставить("ПредставлениеИсточника", СокрЛП(Источник));
	
	//Преобразуем все запрещенные для JSON типы
	ВремПараметрыСобытия = ктв_ОбщегоНазначенияПреобразованиеЗначений.ПреобразоватьЗначениеДляJSON(ПараметрыСобытия);
	
	Настройка = Обработчик.ОбработкаНастройки.Получить();
	Если НЕ ТипЗнч(Настройка) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВнешниеИБ = Неопределено;
	Если НЕ Настройка.Свойство("СобытияВнешнихИБДляПередачи", ВнешниеИБ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ВнешниеИБ) = Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВнешниеИБ.Колонки.Найти("ВнешняяСистема") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ВнешниеИБ Цикл
		
		МассивСобытий = Новый Массив();
		
		ОписаниеСобытия = Новый Структура("ИдСобытия,
										  |Источник_Наименование,
										  |Источник_Ид,
										  |Приемник_Наименование,
										  |Приемник_Ид,
										  |ИдТочки,
										  |Дата,
										  |Момент,
										  |Параметры"
										, ИдСобытия
										, СокрЛП(Событие)
										, Событие.Ид
										, ТекСтрока.НаименованиеСобытия
										, ТекСтрока.ИдСобытия
										, ТочкаВозникновения.Ид
										, Дата
										, Момент
										, ВремПараметрыСобытия);
		
		МассивСобытий.Добавить(ОписаниеСобытия);
		
		СтруктураНастроек = ктв_ОбщегоНазначенияРаботаССервисами.ПолучитьНастройкиСоединения(ТекСтрока.ВнешняяСистема.СервисСобытий_Адрес);
		
		ктв_сб_СобытияВнешниеЗапросы.ПередатьСобытиеВоВнешнююИБ(СтруктураНастроек, МассивСобытий);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции //ОбработатьСобытие()

#КонецОбласти
